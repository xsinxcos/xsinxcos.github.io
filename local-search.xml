<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/09/14/%E6%B5%8B%E8%AF%95xmind/"/>
    <url>/2024/09/14/%E6%B5%8B%E8%AF%95xmind/</url>
    
    <content type="html"><![CDATA[<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% pullquote mindmap mindmap-md %&#125;<br><span class="hljs-bullet">-</span> [<span class="hljs-string">在 Hexo 中使用思维导图</span>](<span class="hljs-link">https://hunterx.xyz/use-mindmap-in-hexo.html</span>)<br><span class="hljs-bullet">  -</span> 前言<br><span class="hljs-bullet">  -</span> 操作指南<br><span class="hljs-bullet">    -</span> 准备需要的文件<br><span class="hljs-bullet">    -</span> 为主题添加 CSS/JS 文件<br><span class="hljs-bullet">  -</span> 使用方法<br>&#123;% endpullquote %&#125;<br></code></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>设计模式：装饰者模式</title>
    <link href="/2024/06/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/06/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h1><p><strong>装饰器模式（Decorator Pattern）</strong>允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。</p><p>装饰器模式通过将对象包装在装饰器类中，以便动态地修改其行为。</p><p>这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>动态地给一个对象添加额外的职责，同时不改变其结构。装饰器模式提供了一种灵活的替代继承方式来扩展功能。</p><h5 id="主要解决的问题"><a href="#主要解决的问题" class="headerlink" title="主要解决的问题"></a>主要解决的问题</h5><ul><li>避免通过继承引入静态特征，特别是在子类数量急剧膨胀的情况下。</li><li>允许在运行时动态地添加或修改对象的功能。</li></ul><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><ul><li>当需要在不增加大量子类的情况下扩展类的功能。</li><li>当需要动态地添加或撤销对象的功能。</li></ul><h5 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h5><ul><li><strong>定义组件接口</strong>：创建一个接口，规定可以动态添加职责的对象的标准。</li><li><strong>创建具体组件</strong>：实现该接口的具体类，提供基本功能。</li><li><strong>创建抽象装饰者</strong>：实现同样的接口，持有一个组件接口的引用，可以在任何时候动态地添加功能。</li><li><strong>创建具体装饰者</strong>：扩展抽象装饰者，添加额外的职责。</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p><strong>NotityDataSource</strong>：一个组件接口，通知数据源</p><p><strong>AccountNotityDataSource</strong>：该接口（NotityDataSource）的具体组件</p><p><strong>NotifyDataDecorator</strong>：抽象类装饰者，实现该接口（NotityDataSource）</p><p><strong>SMSNotifyDataDecorator</strong>：具体装饰者，继承抽象类装饰者</p><p><strong>QQNotifyDataDecorator</strong>：具体装饰者，继承抽象类装饰者</p><p><strong>WeChatNotifyDataDecorator</strong>：具体装饰者，继承抽象类装饰者</p><p>类结构图：</p><p><img src="/../img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20240608003216731.png" alt="image-20240608003216731"></p><h4 id="NotityDataSource"><a href="#NotityDataSource" class="headerlink" title="NotityDataSource"></a>NotityDataSource</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">NotifyDataSource</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String mes , Map&lt;String ,String&gt; props)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">callBack</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="AccountNotityDataSource"><a href="#AccountNotityDataSource" class="headerlink" title="AccountNotityDataSource"></a>AccountNotityDataSource</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountNotifyDataSource</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NotifyDataSource</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String mes , Map&lt;String ,String&gt; props)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;消息已发送&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">callBack</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;消息发送成功&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="NotifyDataDecorator"><a href="#NotifyDataDecorator" class="headerlink" title="NotifyDataDecorator"></a>NotifyDataDecorator</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NotifyDataDecorator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NotifyDataSource</span> &#123;<br>    <span class="hljs-keyword">private</span> NotifyDataSource notifyDataSource;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NotifyDataDecorator</span><span class="hljs-params">(NotifyDataSource notifyDataSource)</span> &#123;<br>        <span class="hljs-built_in">this</span>.notifyDataSource = notifyDataSource;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String mes, Map&lt;String, String&gt; props)</span> &#123;<br>        notifyDataSource.send(mes ,props);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">callBack</span><span class="hljs-params">()</span> &#123;<br>        notifyDataSource.callBack();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SMSNotifyDataDecorator"><a href="#SMSNotifyDataDecorator" class="headerlink" title="SMSNotifyDataDecorator"></a>SMSNotifyDataDecorator</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmsNotifyDataDecorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">NotifyDataDecorator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SmsNotifyDataDecorator</span><span class="hljs-params">(NotifyDataSource notifyDataSource)</span> &#123;<br>        <span class="hljs-built_in">super</span>(notifyDataSource);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String mes, Map&lt;String, String&gt; props)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">deviceId</span> <span class="hljs-operator">=</span> props.get(<span class="hljs-string">&quot;deviceId&quot;</span>);<br>        System.out.printf(<span class="hljs-string">&quot;设备ID：%s SMS消息发送成功\n&quot;</span> ,deviceId);<br>        <span class="hljs-built_in">super</span>.send(mes, props);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">callBack</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;SMS消息发送成功&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><h4 id="demo示例"><a href="#demo示例" class="headerlink" title="demo示例"></a>demo示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> decorator.my;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : wzq</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> : 2024-06-07 23:35</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Map&lt;String ,String&gt; props = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        props.put(<span class="hljs-string">&quot;qq&quot;</span> ,<span class="hljs-string">&quot;14645701009&quot;</span>);<br>        props.put(<span class="hljs-string">&quot;wx&quot;</span> ,<span class="hljs-string">&quot;123456&quot;</span>);<br>        props.put(<span class="hljs-string">&quot;deviceId&quot;</span> ,<span class="hljs-string">&quot;1234567890&quot;</span>);<br><br>        <span class="hljs-type">NotifyDataDecorator</span> <span class="hljs-variable">ways</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QQNotifyDataDecorator</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WechatNotifyDataDecorator</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SmsNotifyDataDecorator</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AccountNotifyDataSource</span>())));<br><br>        ways.send(<span class="hljs-string">&quot;你好啊&quot;</span> ,props);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="demo结果"><a href="#demo结果" class="headerlink" title="demo结果"></a>demo结果</h4><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">qq:</span> <span class="hljs-number">14645701009</span> 发送成功<br>qq消息发送成功<br><span class="hljs-symbol">wx:</span> <span class="hljs-number">123456</span> 消息发送成功<br>wx消息发送成功<br>设备ID：<span class="hljs-number">1234567890</span> SMS消息发送成功<br>消息已发送<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
      <category>结构型模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式七大原则</title>
    <link href="/2024/04/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    <url>/2024/04/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式七大原则"><a href="#设计模式七大原则" class="headerlink" title="设计模式七大原则"></a>设计模式七大原则</h1><ul><li>单一职责原则（类和方法，接口）</li><li>开闭原则 （扩展开放，修改关闭）</li><li>里氏替换原则（基类和子类之间的关系）</li><li>依赖倒置原则（依赖抽象接口，而不是具体对象）</li><li>接口隔离原则（接口按照功能细分）</li><li>迪米特法则 （类与类之间的亲疏关系）</li><li>合成复用原则</li></ul><h2 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h2><p><strong>单一职责原则（SRP：Single responsibility principle）又称为单一功能原则：</strong> 它规定一个类应该只负责一项职责。</p><p><strong>单一职责原则注意事项和细节：</strong></p><ul><li>降低类的复杂度，一个类只负责一项职责。</li><li>提高类的可读性，可维护性。</li><li>降低变更引起的风险。</li><li>通常情况下，我们应当遵守单一职责原则，只有当逻辑足够简单时，才可以在代码级别违反单一职责原则；只有类中方法足够少，可以在方法级别保持单一职责原则。</li></ul><h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><p><strong>开闭原则（Open Closed Principle，OCP）的定义是：</strong> 一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。模块应尽量在不修改原代码的情况下进行扩展。</p><p><strong>开闭原则的基本介绍：</strong></p><ul><li>开闭原则是编程中最基础、最重要的设计原则。</li><li>当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是修改已有的代码来实现变化。</li><li>一个软件实体，如类，模块和函数应该对扩展开发（提供方），对修改关闭（使用方）。用抽象构建框架，用实现扩展细节。</li><li>编程中遵循其他原则，以及使用设计模式的目的就是遵循开闭原则</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//这是一个用于绘图的类 [使用方]</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GraphicEditor</span> &#123;<br>    <span class="hljs-comment">//接收Shape对象，然后根据type，来绘制不同的图形</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawShape</span><span class="hljs-params">(Shape s)</span> &#123;<br>                <span class="hljs-comment">//**问题所在：此类属于使用方，但当我们需要扩展新的图形时，却要修改使用方，就不符合OCP原则</span><br>            <span class="hljs-keyword">if</span> (s.m_type == <span class="hljs-number">1</span>) &#123;<br>              drawRectangle(s);<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.m_type == <span class="hljs-number">2</span>) &#123;<br>              drawCircle(s);<br>                &#125;<br>    &#125;<br> <br>    <span class="hljs-comment">//绘制矩形</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawRectangle</span><span class="hljs-params">(Shape r)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot; 绘制矩形 &quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//绘制圆形</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawCircle</span><span class="hljs-params">(Shape r)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot; 绘制圆形 &quot;</span>);<br>    &#125;<br>&#125;<br> <br><span class="hljs-comment">//Shape类，基类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span> &#123;<br>    <span class="hljs-type">int</span> m_type;<br>&#125;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span> &#123;<br>    Rectangle() &#123;<br>        <span class="hljs-built_in">super</span>.m_type = <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span> &#123;<br>    Circle() &#123;<br>        <span class="hljs-built_in">super</span>.m_type = <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><p><strong>里氏代换原则（Liskov Substitution Principle，LSP）的定义：</strong> 所有引用基类的地方必须能透明地使用其子类的对象，子类可以扩展父类的功能，但不能改变父类原有的功能。<strong>面向对象(Object Oriented,OO)继承性的思考和说明：</strong></p><ol><li>继承包含这样一层含义：父类中凡是已经实现好的方法，实际上是在设定规范和契约，虽然它不强制要求所有子类都必须遵循这种契约，但是如果子类对这些已经实现的方法任意修改，就会对这个继承体系造成破坏。</li><li>继承在给程序设计带来方便的同时，也带来了弊端。比如使用继承给程序带来侵入性，程序可移植性降低，增加对对象间的耦合性。如果一个类被其他的类所继承，则当此类需要修改时，必须考虑到所有的子类，并且父类修改后，所有涉及到子类的功能都有可能产生故障。</li><li>问题提出：在编程中如何正确的使用继承，答案是：遵循里氏替换原则</li></ol><p><strong>里氏替换原则基本介绍：</strong></p><ul><li>如果对类型为T1的对象o1，对有类型为T2的对象o2，使得以T1定义的所有程序P中对象o1可以代替成o2，程序 P 的行为没有发生变化，那么类型T2是类型T1的子类型。换句话说，所有引用基类的地方能透明地使用其子类的对象。</li><li>在使用继承时，遵循里氏替换原则，在子类中尽量不要重写父类的方法。</li><li>里氏替换原则告诉我们，继承实际上让两个类耦合性增强了，在适当的情况下，可以通过聚合、组合、依赖来解决问题。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// A类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-comment">// 返回两个数的差</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">func1</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span> &#123;<br>        <span class="hljs-keyword">return</span> num1 - num2;<br>    &#125;<br>&#125;<br> <br><span class="hljs-comment">// B类继承了A</span><br><span class="hljs-comment">// 增加了一个新功能：完成两个数相加,然后和9求和</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-comment">//这里，重写了A类的方法, 可能是无意识</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">func1</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">func2</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-keyword">return</span> func1(a, b) + <span class="hljs-number">9</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h2><p><strong>依赖倒转原则（Dependency Inversion Principle，DIP）的定义：</strong> 程序要依赖于抽象接口，不要依赖于具体实现。简单的说就是要求对抽象进行编程，不要对实现进行编程，这样就降低了客户与实现模块间的耦合。</p><p><strong>依赖倒置的原则：</strong></p><ul><li>高层模块不应该依赖底层模块，二者都应该依赖其抽象。</li><li>抽象不应该依赖细节（实现类），细节应该依赖抽象。</li><li>依赖倒置的中心思想是面向接口编程。</li><li>依赖倒置的的设计理念是：相对于细节的多样性，抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础的架构要稳的多。在 Java 中，抽象指的是接口和抽象类，细节就是具体的实现类。</li><li>使用接口或抽象类的目的是定制好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成。</li></ul><p>依赖倒置解决的问题如下（方法中确定的参数为类，而不是接口）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//完成 Person 接收消息的功能:这里receive方法中直接传入的对象是 类 也是依赖倒置重要强调的问题所在。</span><br><span class="hljs-comment">/**1. 如果我们获取的对象是 微信，短信等等，则新增类，同时Perons也要增加相应的接收方法getInfo()</span><br><span class="hljs-comment"> * 2. 解决思路：引入一个抽象的接口IReceiver, 表示接收者, 这样Person类与接口IReceiver发生依赖</span><br><span class="hljs-comment"> * 因为Email, WeiXin 等等属于接收的范围，他们各自实现IReceiver 接口就ok, 这样我们就符号依赖倒转原则</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receive</span><span class="hljs-params">(Email email )</span> &#123;<br>        System.out.println(email.getInfo());<br>    &#125;<br>&#125;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Email</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;电子邮件信息: hello,world&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>循依赖倒置原则后（方法中确定的参数修改为接口）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DependecyInversion</span> &#123;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        <span class="hljs-comment">//当为电子邮件时，传入邮件对象</span><br>        person.receive(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Email</span>());<br>        <span class="hljs-comment">//当为微信时，传入微信对象</span><br>        person.receive(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WeiXin</span>());<br>    &#125;<br> <br>&#125;<br> <br><span class="hljs-comment">//定义接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IReceiver</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-comment">//原电子邮件类，实现接口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Email</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IReceiver</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;电子邮件信息: hello,world&quot;</span>;<br>    &#125;<br>&#125;<br> <br><span class="hljs-comment">//增加微信</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WeiXin</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IReceiver</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;微信信息: hello,ok&quot;</span>;<br>    &#125;<br>&#125;<br> <br><span class="hljs-comment">//方法中传入接口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-comment">//这里我们是对接口的依赖</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receive</span><span class="hljs-params">(IReceiver receiver )</span> &#123;<br>        System.out.println(receiver.getInfo());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><p><strong>接口隔离原则（Interface Segregation Principle，ISP）的定义：</strong> 客户端不应该依赖它不需要的接口类，类之间的依赖关系应该建立在最小的接口上。一句话，就是实现接口的类中，有多余的方法时，需要将接口进行拆分。</p><ul><li>使用接口隔离原则前首先需要满足单一职责原则。</li><li>接口需要高内聚，也就是提高接口、类、模块的处理能力，少对外发布public的方法。</li><li>定制服务，就是单独为一个个体提供优良的服务，简单来说就是拆分接口，对特定接口进行定制。</li><li>接口设计是有限度的，接口的设计粒度越小，系统越灵活，但是值得注意不能过小，否则变成”字节码编程”。</li></ul><p>解决以下问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Interface1</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation1</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation2</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation3</span><span class="hljs-params">()</span>;<br>&#125;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Interface1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation1</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;B 实现了 operation1&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation2</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;B 实现了 operation2&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation3</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;B 实现了 operation3&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//问题所在：A类只用到了B类的 1,2 方法，但B类却要实现方法3，造成代码的冗余。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123; <span class="hljs-comment">//A 类通过接口Interface1 依赖(使用) B类，但是只会用到1,2方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">depend1</span><span class="hljs-params">(Interface1 i)</span> &#123;<br>        i.operation1();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">depend2</span><span class="hljs-params">(Interface1 i)</span> &#123;<br>        i.operation2();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>正确方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 接口1</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Interface1</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation1</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation2</span><span class="hljs-params">()</span>;<br>&#125;<br> <br><span class="hljs-comment">// 接口2</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Interface2</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation3</span><span class="hljs-params">()</span>;<br>&#125;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Interface1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation1</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;B 实现了 operation1&quot;</span>);<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operation2</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;B 实现了 operation2&quot;</span>);<br>    &#125;<br> <br>&#125;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123; <span class="hljs-comment">// A 类通过接口Interface1,Interface2 依赖(使用) B类，但是只会用到1,2,3方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">depend1</span><span class="hljs-params">(Interface1 i)</span> &#123;<br>        i.operation1();<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">depend2</span><span class="hljs-params">(Interface2 i)</span> &#123;<br>        i.operation2();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h2><p><strong>迪米特法则（Law of Demeter，LOD），有时候也叫做最少知识原则（Least Knowledge Principle，LKP）定义是：</strong> 一个软件实体应尽可能少地与其他实体发生相互作用。迪米特法则的初衷在于降低类之间的耦合。由于每个类尽量减少对其他类的依赖，因此，很容易使得系统的功能模块独立，相互之间不存在（或很少有）依赖关系。迪米特法则则不希望类之间建立直接的关系。如果真的有需要建立联系，也希望能通过它的友元类（中间类或者跳转类）来转达。</p><p><strong>迪米特法则的规则：</strong></p><ul><li>Only talk to your immediate friends(只与直接的朋友通讯)：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系， 我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖，关联，组合，聚合等。其中，我们称出现成员变量，方法参数，方法返回值中的类为直接的朋友，而出现在局部变量中的类不是直接的朋友（例如，在一个方法中new了一个类，那么此类就不属于直接朋友）。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部。</li><li>一个对象应该对其他对象保持最少的了解。</li><li>类与类关系越密切，耦合度越大。</li><li>迪米特法则指一个类对自己依赖的类知道的 越少越好。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供的public 方法，不对外泄露任何信息。</li><li>迪米特法则还有个更简单的定义：只与直接的朋友通信。</li></ul><p><strong>迪米特法则解决的问题如下：</strong>（方法中出现了局部变量）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//通过查看如下代码会发现，CollegeEmployee 以局部变量的形式出现在方法 printAllEmployee 中，违反了迪米特法则</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demeter1</span> &#123;<br>        <span class="hljs-comment">//该方法完成输出学校总部和学院员工信息(id)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">printAllEmployee</span><span class="hljs-params">(CollegeManager sub)</span> &#123;<br> <br>        <span class="hljs-comment">//分析问题</span><br>        <span class="hljs-comment">//1. 这里的 CollegeEmployee 不是  SchoolManager的直接朋友</span><br>        <span class="hljs-comment">//2. CollegeEmployee 是以局部变量方式出现在 SchoolManager</span><br>        <span class="hljs-comment">//3. 违反了 迪米特法则</span><br> <br>        <span class="hljs-comment">//获取到学院员工</span><br>        List&lt;CollegeEmployee&gt; list1 = sub.getAllEmployee();<br>        System.out.println(<span class="hljs-string">&quot;------------学院员工------------&quot;</span>);<br>        <span class="hljs-keyword">for</span> (CollegeEmployee e : list1) &#123;<br>            System.out.println(e.getId());<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p><strong>遵循迪米特法则后（将局部变量部分，提取到自己的类中）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemeterUpdate</span> &#123;<br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">printAllEmployee</span><span class="hljs-params">(CollegeManager sub)</span> &#123;<br>        <span class="hljs-comment">//分析问题</span><br>        <span class="hljs-comment">//1. 将输出学院的员工方法，封装到CollegeManager</span><br>        sub.printEmployee();<br>    &#125;<br>&#125;<br> <br><span class="hljs-comment">//管理学院员工的管理类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CollegeManager</span> &#123;<br>    <span class="hljs-comment">//输出学院员工的信息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printEmployee</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//获取到学院员工</span><br>        List&lt;CollegeEmployee&gt; list1 = getAllEmployee();<br>        System.out.println(<span class="hljs-string">&quot;------------学院员工------------&quot;</span>);<br>        <span class="hljs-keyword">for</span> (CollegeEmployee e : list1) &#123;<br>            System.out.println(e.getId());<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-comment">//返回学院的所有员工</span><br>    <span class="hljs-keyword">public</span> List&lt;CollegeEmployee&gt; <span class="hljs-title function_">getAllEmployee</span><span class="hljs-params">()</span> &#123;<br>        List&lt;CollegeEmployee&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;CollegeEmployee&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123; <span class="hljs-comment">//这里我们增加了10个员工到 list</span><br>            <span class="hljs-type">CollegeEmployee</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CollegeEmployee</span>();<br>            emp.setId(<span class="hljs-string">&quot;学院员工id= &quot;</span> + i);<br>            list.add(emp);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h2><p><strong>合成复用原则的定义是：</strong> 原则是尽量使用合成&#x2F;聚合的方法，而不是使用继承。</p><p><strong>聚合用来表示“拥有”关系或者整体与部分的关系：</strong> 代表部分的对象有可能会被多个代表整体的对象所共享，而且不一定会随着某个代表整体的对象被销毁或破坏而被销毁或破坏，部分的生命周期可以超越整体。例如，班级和学生，当班级删除后，学生还能存在，学生可以被培训机构引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">OpenAndClose</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IOpenAndClose</span> &#123;<br>    <span class="hljs-keyword">private</span> ITV tv;<br>        <span class="hljs-comment">//通过set方法将ITV对象聚合到OpenAndClose对象中</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTv</span><span class="hljs-params">(ITV tv)</span> &#123;<br>        <span class="hljs-built_in">this</span>.tv = tv;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.tv.play();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>合成用来表示一种强得多的“拥有”关系：</strong> 在一个合成关系里，部分和整体的生命周期是一样的。一个合成的新对象完全拥有对其组成部分的支配权，包括它们的创建和湮灭等。使用程序语言的术语来说，合成的新对象对组成部分的内存分配、内存释放有绝对的责任。例如，一个人由头、四肢和各种器官组成，人与这些具有相同的生命周期，人死了，这些器官也就挂了。房子和房间的关系，当房子没了，房间也不可能独立存在。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">OpenAndClose</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IOpenAndClose</span> &#123;<br>    <span class="hljs-comment">//将 ITV 对象组合到 OpenAndClose 对象中</span><br>    <span class="hljs-type">ITV</span> <span class="hljs-variable">tv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ITV</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>【总结】设计原则的核心思想：</strong></p><p>【1】精确应用中可能需要变化的地方，把它们独立出来，不要和那些不需要变化的代码混在一起。<br>【2】针对编程接口，而不是针对实际编程<br>【3】为了交互对象之间的松耦合设计和努力。</p><p><strong>简单理解就是：</strong>开闭原则是总纲，它指导我们要对扩展开放，对修改封闭；单一职责原则指导我们实现类要职责单一；里氏替换原则指导我们不破坏继承体系；依赖倒置原则指导我们针对接口编程；接口隔离原则指导我们在设计接口的时候要专业化；迪米特原则指导我们要降低耦合。</p><p>[设计模式：七大原则]: <a href="https://it-blog-cn.com/blogs/design_mode/seven_principle.html#%E4%B8%80%E3%80%81%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99">https://it-blog-cn.com/blogs/design_mode/seven_principle.html#%E4%B8%80%E3%80%81%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99</a>“设计模式：七大原则”</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式：代理模式</title>
    <link href="/2024/04/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/04/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p>在<strong>代理模式（Proxy Pattern）</strong>中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。<br>在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong>为其他对象提供一种代理以控制对这个对象的访问。</p><p><strong>主要解决：</strong>在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。</p><p><strong>何时使用：</strong>想在访问一个类时做一些控制。</p><p><strong>如何解决：</strong>增加中间层。</p><p><strong>关键代码：</strong>实现与被代理类组合。</p><p><strong>优点：</strong> 1、职责清晰。 2、高扩展性。 3、智能化。</p><p><strong>缺点：</strong> 1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。 2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。</p><p><strong>使用场景</strong>：Spring-AOP</p><p><strong>注意事项：</strong></p><ul><li>1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。</li><li>2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p><img src="/../img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20240404195034972.png" alt="image-20240404195034972"></p><h3 id="静态模式"><a href="#静态模式" class="headerlink" title="静态模式"></a>静态模式</h3><p><img src="/../img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20240404194630768.png" alt="image-20240404194630768"></p><h3 id="动态模式"><a href="#动态模式" class="headerlink" title="动态模式"></a>动态模式</h3><p><strong>作用：</strong> 与静态代理一样，但动态代理解决了 静态代理中 1个静态代理，只代理1种类型的目标对象 的问题</p><h4 id="1-JDK动态代理"><a href="#1-JDK动态代理" class="headerlink" title="1.  JDK动态代理"></a>1.  JDK动态代理</h4><p>在 JDK 动态代理中涉及如下角色：</p><ul><li>目标类的接口 Interface</li><li>目标类 target</li><li>处理模版 Handler</li><li>在内存中生成的动态代理类</li><li>java.lang.reflect.Proxy</li></ul><p><img src="/../img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20240404200723259.png" alt="image-20240404200723259"></p><p>动态代理类实现了目标类的接口，并实现了接口中的方法，该方法的实现逻辑是， 调用父类 —— Proxy 的 h 的 invoke（）方法</p><p>其中h 是 在创建动态代理实例时 newProxyInstance(ClassLoader loader, Class&lt;?&gt;[]interfaces,InvocationHandler h) 传入的第3个参数InvocationHandler对象</p><p>在 InvocationHandler.invoke（）中通过反射，调用目标对象。</p><p><strong>特点：</strong> 不需要显式实现与目标类相同的接口，而是将这种实现推迟到程序调用时由 JVM来实现，</p><ul><li>即：在使用时再创建动态代理类 和 实例</li><li>静态代理则是在代理类实现时就指定与目标相同的接口</li></ul><p><strong>优点：一个代理类就可以代理多个目标类</strong>，避免重复、多余代码</p><p><strong>缺点</strong></p><ul><li><strong>相比与静态代理，效率低。</strong> 静态代理是直接调用目标对象方法，而动态代理则需要先生成类和对象，在通过Java反射机制间接调用目标对象的方法</li><li><strong>应用场景局限</strong>， 由于每个代理类都继承了 java.lang.reflect.Proxy 类，而Java又只能支持单继承，导致不能针对类 创建代理类，只能针对接口 创建 代理类。<strong>即，动态代理只能代理实现了接口的类。</strong></li></ul><p><strong>应用场景</strong></p><ul><li>需要代理的对象数量较多的情况下。数量较少时，推荐直接使用静态代理</li><li>面向切面编程时</li></ul><h4 id="2-cglib动态代理"><a href="#2-cglib动态代理" class="headerlink" title="2. cglib动态代理"></a>2. cglib动态代理</h4><p><img src="/../img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20240404202401008.png" alt="image-20240404202401008"></p><p><strong>代理类必须要和目标类是同一个类型！</strong></p><p>这里的“同一个类型”指的是</p><ul><li>要么，<strong>代理类</strong>和<strong>目标类</strong>都实现了同一个接口，他们都属于同一种类型，即都是该接口的子类。</li><li>要么，<strong>代理类</strong>继承自<strong>目标类</strong>，这也是属于同一种类型，前提是目标类没有被 final 关键字修饰</li></ul><h3 id="3-CGLib的动态代理-与java动态代理的区别"><a href="#3-CGLib的动态代理-与java动态代理的区别" class="headerlink" title="3. CGLib的动态代理 与java动态代理的区别"></a>3. CGLib的动态代理 与java动态代理的区别</h3><p><img src="/../img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20240404203513475.png" alt="image-20240404203513475"></p><ul><li>Java动态代理生成的代理类和目标类是 <strong>“兄弟”关系</strong></li><li>cglib动态代理生成的代理类和目标类是 <strong>“父子”关系</strong></li></ul><h4 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h4><ul><li>Java动态代理依赖于<strong>目标类有实现接口</strong></li><li>cglib动态代依赖于<strong>目标类没有被final关键字修饰</strong></li></ul>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
      <category>结构型模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络和因特网：网络核心</title>
    <link href="/2024/03/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91%EF%BC%9A%E7%BD%91%E7%BB%9C%E6%A0%B8%E5%BF%83/"/>
    <url>/2024/03/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91%EF%BC%9A%E7%BD%91%E7%BB%9C%E6%A0%B8%E5%BF%83/</url>
    
    <content type="html"><![CDATA[<h2 id="网络核心"><a href="#网络核心" class="headerlink" title="网络核心"></a>网络核心</h2><p>网络核心：网络核心即由互联因特网端系统的分组交换机和链路构成的网状网络。</p><h4 id="1-1-分组交换"><a href="#1-1-分组交换" class="headerlink" title="1.1 分组交换"></a>1.1 分组交换</h4><ul><li><p><strong>报文（message）</strong>：端系统彼此交换<strong>报文</strong>，包含该应用的设计者需要的任何东西。报文可以执行一种控制功能，也可以包含数据</p></li><li><p><strong>分组（packet）</strong>：为了从源端系统向目的端系统发送发送一个报文，源将长报文划分为较小的数据块，称为<strong>分组</strong></p></li><li><p><strong>分组交换机（packet switch）</strong>：每个分组通过通信链路和<strong>分组交换机</strong>进行传送</p><p>传输分组时间：L <em>bit</em> 的分组 &#x2F; R <em>bit</em> 的链路传输速率</p></li></ul><p><img src="/../img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240309235220588.png" alt="image-20240309235220588"></p><p><img src="/../img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240309235100557.png" alt="image-20240309235100557"></p><h5 id="1-存储转发传输"><a href="#1-存储转发传输" class="headerlink" title="1. 存储转发传输"></a>1. 存储转发传输</h5><ul><li><strong>存储转发传输（store-and-forword transmission）</strong>：存储转发传输是指在交换机开始向输出链路传输该分组的第一个比特之前，必须接收到整个分组。在传输分组时，必须先缓存（即<strong>”存储“</strong>）该分组的比特，仅当路由器&#x2F;链路层交换机已经接收完该分组的所有比特后，它才能开始向链路传输（即<strong>”转发“</strong>）该分组</li></ul><h5 id="2-排队时延和分组丢失"><a href="#2-排队时延和分组丢失" class="headerlink" title="2. 排队时延和分组丢失"></a>2. 排队时延和分组丢失</h5><ul><li><strong>输出缓存（output buffer）&#x2F;输出队列（output queue）</strong>：对于每条相连的链路，该分组交换机具有一个<strong>输出缓存</strong>，它用户存储路由器准备发往那条链路的分组</li><li><strong>排队时延（queuing delay）</strong>：链路忙于传输其他分组，该分组在输出缓存中产生的等待时间</li><li><strong>分组丢失（packet loss）</strong>：因为分组交换机的缓存空间是有限的，一个到达的分组可能发现该缓存被其他分组占满，在此情况下将出现<strong>分组丢失（丢包）</strong>，到达的分组或者已经排队的分组之一将被丢弃</li></ul><h5 id="3-转发表和路由选择协议"><a href="#3-转发表和路由选择协议" class="headerlink" title="3. 转发表和路由选择协议"></a>3. 转发表和路由选择协议</h5><p>​每个端系统具有一个称为IP地址的地址。当源主机要向目的端系统发送一个分组时，源在该分组的首部中包含了目的地的IP地址</p><ul><li><strong>转发表（forwarding table）</strong> ：每台路由器具有一个<strong>转发表</strong>用于将目的地址（或目的地址的一部分）映射成输出链路。当某分组到达路由器时，路由器检查其地址，并搜索转发表，发现相应的出链路</li><li><strong>路由选择协议（routing protocol）</strong>：用于自动地设置这些转发表。通过决定每台路由器到每个目的地的最短路径，使用最短路径结果来配置路由器中的转发表</li></ul><h4 id="1-2-电路交换"><a href="#1-2-电路交换" class="headerlink" title="1.2 电路交换"></a>1.2 电路交换</h4><p>两台主机要通信时，该网络在两台主机之间创建一条专用的<strong>端到端连接</strong></p><h5 id="电路交换网络中的复用"><a href="#电路交换网络中的复用" class="headerlink" title="电路交换网络中的复用"></a>电路交换网络中的复用</h5><ul><li><strong>频分复用（FDM）</strong>：链路的频谱由跨越链路创建的所有连接共享。特别的，在连接期间链路为每条连接专设一个频段</li><li><strong>时分复用（TDM）</strong>：将时间划分成固定时段的帧，并且每个帧又被划分固定数量的时隙。</li><li>存在<strong>静默期</strong></li></ul><h4 id="1-3-网络的网络"><a href="#1-3-网络的网络" class="headerlink" title="1.3 网络的网络"></a>1.3 网络的网络</h4><p><img src="/../img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240310151246840.png" alt="image-20240310151246840"></p><ul><li><strong>因特网交换点（IXP）</strong>：<strong>IXP</strong> 是一个汇合点，多个 ISP 能够在这里一起对等</li></ul><h4 id="相关习题"><a href="#相关习题" class="headerlink" title="相关习题"></a>相关习题</h4><ul><li><strong>R11.  假定在发送主机和接收主机间只有一台分组交换机。发送主机和交换机间以及交换机和接收主机间的传输速率分别是R1和R2。假设该交换机使用存储转发分组交换方式，发送一个长度为L的分组的端到端总时延是什么？（忽略排队时延、传播时延和处理时延）</strong><br>答：L &#x2F; R1 + L &#x2F; R2</li><li><strong>R12. 与分组交换网络相比，电路交换网络有哪些优点？在电路交换网络中，TDM比FDM有哪些优点？</strong><br>答：电路交换网络适合实时服务。交付质量高。<br>TDM比FDM的优点如下：（来源于网络）</li></ul><ol><li>当发生拥塞等网络问题时，TDM中的数据丢失可能只会是一部分，而FDM中就可能是大部分或全部。</li><li>TDM适合数字信号传输，而FDM适合模拟信号传输，因为现在通信网络多是传输数字信号，所以TDM比FDM好。</li><li>因为频分复用连接建立后，当中途没有数据传输时，他所占有的频段带宽不能被其他连接使用，故可能存在空置，而在时分复用的统计时分模式下，连接建立后，当某个连接暂时不用传输数据时可以少分时间片或者不分，即其时隙的分配时“按需分配”，这样就让出了相应的传输时间给其他连接。</li></ol><ul><li><strong>R13. 假定用户共享一条2Mbps链路。同时假定当每个用户传输时连续以1Mbps传输，但每个用户仅传输20%的时间。<br>a. 当使用电路交换时，能够支持多少用户？<br>b. 作为该题的遗留问题，假定使用分组交换。为什么如果两个或更少的用户同时传输的话，在链路前面基本没有排队时延？为什么如果3个用户同时传输的话，将会有排队时延？<br>c. 求出某指定用户正在传输的概率。<br>d. 假定现在有3个用户。求出在任何给定时间，所有3个用户在同时传输的概率。求出队列增长的时间比率。</strong><br>答：<br>a.  2Mbps &#x2F; 1 Mbps &#x3D; 2 ，能够支持2位用户<br>b. 如果两个或更少的用户在传输，即使它们同时传输，也仅仅完全占用了2Mbps链路，不会造成排队。如果有3个用户同时传输，需要3Mbps，而此时链路只有2Mbps，因此将会有排队时延。<br>c.指定用户正在传输的概率为20%。<br>d.在任何给定的时间，所有三个用户同时传输的概率为0.2<em>0.2</em>0.2&#x3D;0.008。因为只有三个用户时，队列才会增长，所以队列增长的时间比率为0.008。</li><li><strong>R14. 为什么在等级结构相同级别的两个ISP通常互相对等？某IXP是如何挣钱的？</strong><br>答：因为它们之间的所有流量可以直接连接而不是通过上游的ISP传输。<br>IXP可以通过交换的流量对ISP收费。</li><li><strong>R15. 某些内容提供商构建了自己的网络。描述谷歌的网络。内容提供商构建这些网络的动机是什么？</strong><br>答：谷歌的网络：在本书写作的时候，谷歌估计有30-50个数据中心。谷歌的数据中心经过专用的TCP&#x2F;IP网络互连，该网络跨越全球，但仍然独立于公共因特网。<br>内容提供商构建这些网络的动机是：直接与较低层ISP对接，减少向ISP支付的费用。对其服务最终如何交付给端用户有了更多的控制。</li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
      <category>计算机网络和因特网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA为什么需要线程池？该如何实现？</title>
    <link href="/2024/03/04/JAVA%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%9F%E8%AF%A5%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%EF%BC%9F/"/>
    <url>/2024/03/04/JAVA%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%9F%E8%AF%A5%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>整篇文章将围绕以下三个问题进行阐述</strong></p><ol><li><strong>为什么需要线程池</strong></li><li><strong>不同线程池的种类，各自的特点</strong></li><li><strong>如何实现线程池的配置和使用</strong></li></ol><hr><h2 id="1-为什么我们需要线程池"><a href="#1-为什么我们需要线程池" class="headerlink" title="1. 为什么我们需要线程池"></a>1. 为什么我们需要线程池</h2><ul><li><h5 id="不使用线程池带来的问题"><a href="#不使用线程池带来的问题" class="headerlink" title="不使用线程池带来的问题"></a>不使用线程池带来的问题</h5><ol><li>线程池默认使用无界队列，任务过多导致 <em>OOM（out of memory）</em></li><li>线程创建过多，导致 <em>OOM（out of memory）</em></li><li>共享线程池，次要逻辑拖垮主要逻辑</li></ol></li><li><p><strong>使用线程池的好处</strong></p><ol><li>降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li><li>提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</li><li>提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li></ol></li></ul><hr><h2 id="2-不同线程池的种类，各自的特点"><a href="#2-不同线程池的种类，各自的特点" class="headerlink" title="2. 不同线程池的种类，各自的特点"></a>2. <strong>不同线程池的种类，各自的特点</strong></h2><h4 id="1、newCaChedThreadPool"><a href="#1、newCaChedThreadPool" class="headerlink" title="1、newCaChedThreadPool"></a>1、<strong>newCaChedThreadPool</strong></h4><p>创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</p><p>这种类型的线程池特点是：</p><p>工作线程的创建数量几乎没有限制(其实也有限制的,数目为Interger. MAX_VALUE), 这样可灵活的往线程池中添加线程。</p><p>如果长时间没有往线程池中提交任务，即如果工作线程空闲了指定的时间(默认为1分钟)，则该工作线程将自动终止。终止后，如果你又提交了新的任务，则线程池重新创建一个工作线程。</p><p>在使用CachedThreadPool时，一定要注意控制任务的数量，否则，由于大量线程同时运行，很有会造成系统OOM。</p><h4 id="2、newFixedThreadPool"><a href="#2、newFixedThreadPool" class="headerlink" title="2、newFixedThreadPool"></a><strong>2、newFixedThreadPool</strong></h4><p>创建一个指定工作线程数量的线程池。每当提交一个任务就创建一个工作线程，如果工作线程数量达到线程池初始的最大数，则将提交的任务存入到池队列中。</p><p>FixedThreadPool是一个典型且优秀的线程池，它具有线程池提高程序效率和节省创建线程时所耗的开销的优点。但是，在线程池空闲时，即线程池中没有可运行任务时，它不会释放工作线程，还会占用一定的系统资源。</p><h4 id="3、newSingleThreadExecutor"><a href="#3、newSingleThreadExecutor" class="headerlink" title="3、newSingleThreadExecutor"></a><strong>3、newSingleThreadExecutor</strong></h4><p>创建一个单线程化的Executor，即只创建唯一的工作者线程来执行任务，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。如果这个线程异常结束，会有另一个取代它，保证顺序执行。单工作线程最大的特点是可保证顺序地执行各个任务，并且在任意给定的时间不会有多个线程是活动的。</p><h4 id="4、newScheduleThreadPool"><a href="#4、newScheduleThreadPool" class="headerlink" title="4、newScheduleThreadPool"></a><strong>4、newScheduleThreadPool</strong></h4><p>创建一个定长的线程池，而且支持定时的以及周期性的任务执行，支持定时及周期性任务执行。</p><h4 id="5、newSingleThreadScheduledExecutor"><a href="#5、newSingleThreadScheduledExecutor" class="headerlink" title="5、newSingleThreadScheduledExecutor"></a><strong>5、newSingleThreadScheduledExecutor</strong></h4><p>创建一个单线程执行程序，它可安排在给定延迟后运行命令或者定期地执行。线程池中最多执行1个线程，之后提交的线程活动将会排在队列中以此执行并且可定时或者延迟执行线程活动。</p><hr><h2 id="3-如何实现线程池的配置和使用"><a href="#3-如何实现线程池的配置和使用" class="headerlink" title="3.如何实现线程池的配置和使用"></a>3.<strong>如何实现线程池的配置和使用</strong></h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><img src="/../img/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20240305004822212.png" alt="image-20240305004822212"></p><p>ThreadPoolExecutor的构造函数参数：</p><ul><li>corePoolSize：核心线程数</li><li>maximumPoolSize：最大线程数</li><li>keepAliveTime：空闲线程的最大保活时限</li><li>TimeUnit：最大保活时限的时间单位</li><li>BlockingQueue：堵塞队列</li><li>RejectedExecutionHandler：拒绝处理策略</li></ul><p>（ps：这里例子使用的框架为spring）</p><p><img src="/../img/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20240305002049836.png" alt="image-20240305002049836"></p><p>这里使用FixedThreadPool作为例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 异步线程池配置</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: xsinxcos</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2024-03-04 23:50</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableAsync</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AsyncThreadPoolConfig</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * CPU 核数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">CPU_COUNT</span> <span class="hljs-operator">=</span> Runtime.getRuntime().availableProcessors();<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * IO 处理线程数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">IO_MAX</span> <span class="hljs-operator">=</span> Math.max(<span class="hljs-number">2</span>, <span class="hljs-number">2</span> * CPU_COUNT);<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 空闲线程最大保活时限，单位为秒</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">KEEP_ALIVE_SECOND</span> <span class="hljs-operator">=</span> <span class="hljs-number">60</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 有界阻塞队列容量上限</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">QUEUE_SIZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">10000</span>;<br>    <br>    <span class="hljs-meta">@Bean(&quot;asyncExecutor&quot;)</span><br>    <span class="hljs-keyword">public</span> Executor <span class="hljs-title function_">asyncThreadPool</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">poolExecutor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<br>                IO_MAX / <span class="hljs-number">5</span>,<br>                IO_MAX,<br>                KEEP_ALIVE_SECOND,<br>                TimeUnit.SECONDS,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingDeque</span>&lt;&gt;(QUEUE_SIZE),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.CallerRunsPolicy()<br>        );<br>       <span class="hljs-keyword">return</span> poolExecutor;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Async(&quot;asyncExecutor&quot;)</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onApplicationEvent</span><span class="hljs-params">(MatchFailMessageEvent event)</span> &#123;<br>       <span class="hljs-type">MessageBo</span> <span class="hljs-variable">matchResultMessage</span> <span class="hljs-operator">=</span> event.getMatchResultMessage();<br>       <span class="hljs-comment">//获取三个关键参数 匹配发起者、被邀请者、帖子ID</span><br>       <span class="hljs-type">Long</span> <span class="hljs-variable">matchFrom</span> <span class="hljs-operator">=</span> matchResultMessage.getMessage().getSendTo();<br>       <span class="hljs-type">Long</span> <span class="hljs-variable">matchTo</span> <span class="hljs-operator">=</span> matchResultMessage.getMessage().getSendFrom();<br>       <span class="hljs-type">Long</span> <span class="hljs-variable">matchPost</span> <span class="hljs-operator">=</span> matchResultMessage.getMessage().getPostId();<br>       <span class="hljs-comment">//匹配成功，将Redis中的数据删除</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;USER:&quot;</span> + matchFrom + <span class="hljs-string">&quot; invited USER:&quot;</span> + matchTo + <span class="hljs-string">&quot;with &quot;</span> + <span class="hljs-string">&quot;POST:&quot;</span> + matchPost;<br>       <span class="hljs-comment">//删除redis中的数据</span><br>       redisCache.deleteObject(key);<br>   &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>并发编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>并发编程</tag>
      
      <tag>线程池</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>String、StringBuilder、StringBuffer</title>
    <link href="/2024/03/01/JAVA%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%9Alang%E7%AF%87%EF%BC%881%EF%BC%89/"/>
    <url>/2024/03/01/JAVA%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%9Alang%E7%AF%87%EF%BC%881%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul><li><em>class</em> 类被 <em>final</em> 修饰，无法被继承</li><li>在 <em>jdk</em>1.8 之前及 <em>jdk</em>1.8 底层使用 <em>char</em> 数组进行存储，在 <em>jdk</em>1.8 之后使用 <em>byte</em> 数组进行存储</li></ul><hr><h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><ul><li>特点：可变长度的字符串，同样被final修饰，底层是使用 <em>char</em> 数组或者 <em>byte</em> 数组进行存储，线程不安全</li><li>初始容量：空参构造时容量为16。有参构造时，当参数为 <em>int</em> 则容量为参数值，当参数为 <em>String</em> 类型或 <em>CharSequence</em> 类型时则初始容量为 <em>String.length()</em> + 16。</li><li>自动扩容机制：当 <em>String Builder</em> 中的 <em>char</em> 或 <em>byte</em> 数组容量充足时，则自动将需要拼接的字符串置于数组中进行拼接；如果数组容量不足时，则通过计算得出数组最小需要长度，并将旧数据 <em>copy</em> 一份置于新数组，再进行拼接</li></ul><hr><h3 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h3><ul><li>特点：可变长度的字符串，同样被final修饰，底层是使用 <em>char</em> 数组或者 <em>byte</em> 数组进行存储，但是线程安全，但是方法使用 <em>synchronized</em> 关键字进行修饰，效率较差</li><li>初始容量：与 <em>StringBuilder</em> 相同</li><li>自动扩容机制：与 <em>StringBuilder</em> 相同</li></ul>]]></content>
    
    
    <categories>
      
      <category>JAVA核心源码</category>
      
      <category>lang篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>源码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络和因特网：网络边缘</title>
    <link href="/2024/02/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91%EF%BC%9A%E7%BD%91%E7%BB%9C%E8%BE%B9%E7%BC%98/"/>
    <url>/2024/02/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91%EF%BC%9A%E7%BD%91%E7%BB%9C%E8%BE%B9%E7%BC%98/</url>
    
    <content type="html"><![CDATA[<h2 id="网络边缘"><a href="#网络边缘" class="headerlink" title="网络边缘"></a>网络边缘</h2><p>网络边缘：<strong>与因特网相连的计算机和其他设备位于因特网的边缘</strong>，故而被称为网络边缘，又称端系统。</p><p>主机&#x2F;端系统可分为：</p><ul><li>客户端（client）</li><li>服务端（server）</li></ul><p><img src="/../img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240203223816912.png" alt="image-20240203223816912"></p><h4 id="1-1-接入网"><a href="#1-1-接入网" class="headerlink" title="1. 1 接入网"></a>1. 1 接入网</h4><p> 接入网：将端设备物理连接到其边缘路由器<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="边缘路由器：端系统到任何其他远程端系统的路径的第一台路由器">[1]</span></a></sup>的网络。</p><p><img src="/../img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240203231259515.png" alt="image-20240203231259515"></p><h4 id="1-2-物理媒介"><a href="#1-2-物理媒介" class="headerlink" title="1. 2 物理媒介"></a>1. 2 物理媒介</h4><p> <img src="/../img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240203231916389.png" alt="image-20240203231916389"></p><ul><li>导引型媒介：电波沿着固体媒介前行</li><li>非导引型媒介：电波在空气或外层空间中传播</li></ul><h5 id="拓展定义"><a href="#拓展定义" class="headerlink" title="拓展定义"></a>拓展定义</h5><p>数据中心：数据中心是全球协作的特定设备网络，用来在网络基础设施上传递、加速、展示、计算、存储数据信息，由成千上百个端系统组成。</p><h4 id="相关习题"><a href="#相关习题" class="headerlink" title="相关习题"></a>相关习题</h4><ul><li><strong>R4. 列出4种接入技术。将它们分类为住宅接入、公司接入或广域无线接入。</strong><br>  答：<br>  家庭接入：DSL、电缆、FTTH和5G固定式无线<br>  公司接入：以太网和WIFI<br>  广域无线接入：3G、LTE 4G和5G</li><li><strong>R5. HFC宽带是专用的，还是用户间共享的？在下行HFC信道中，有可能发生碰撞吗？为什么？</strong><br>答：HFC带宽是用户间共享的。<br>下行HFC信道中不会发生碰撞。因为分组是由一个源发出，由不同的端系统接受，因此不存在冲突。</li><li><strong>R6. 列出你所在城市中的可供使用的住宅接入技术。对于每种类型的接入方式，给出所宣称的下行速率、上行速率和每月的价格。</strong><br>答： 光纤到户、上下行速率100M、30元</li><li><strong>R7. 以太LAN的传输速率是多少？</strong><br>答：100Mbps-几十Gbps</li><li><strong>R8. 能够运行以太网的一些物理媒体是什么？</strong><br>答：双绞铜线，同轴电缆，光纤等等。</li><li><strong>R9. 拨号调制解调器、HFC、DSL和FTTH都用于住宅接入。对于这些技术中的每一种，给出传输速率的范围。并讨论有关宽带是共享的还是专用的。</strong><br>  答：<br>  拨号调制解调器 56Kbps 共享<br>  HFC 下行42.8Mbps, 上行30.7Mbps 专用<br>  DSL 下行24Mbps, 上行2.5Mbps 共享<br>  FTTH 下行10-20Mbps, 上行2-10Mbps 专用</li><li><strong>R10. 描述今天最流行的无线因特网接入技术。对它们进行比较和对照。</strong><br>答：WIFI与5G接入。WIFI距离短速度快成本低，5G距离远速度快成本高</li></ul><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>边缘路由器：端系统到任何其他远程端系统的路径的第一台路由器<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
      <category>计算机网络和因特网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络和因特网：什么是因特网</title>
    <link href="/2024/02/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF%E5%9B%A0%E7%89%B9%E7%BD%91/"/>
    <url>/2024/02/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF%E5%9B%A0%E7%89%B9%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是因特网（Internet）"><a href="#什么是因特网（Internet）" class="headerlink" title="什么是因特网（Internet）"></a>什么是因特网（Internet）</h2><p>可以从两个方面进行解释：</p><ul><li>因特网的具体构成，构成因特网的基本硬件和软件组件</li><li>分布式应用提供服务的联网基础设施</li></ul><p><img src="/../img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240203210420787.png" alt="image-20240203210420787"></p><h4 id="1-1-具体构成描述"><a href="#1-1-具体构成描述" class="headerlink" title="1. 1 具体构成描述"></a>1. 1 具体构成描述</h4><p>具体构成：主机&#x2F;端系统、通信链路、分组交换机、协议</p><p>主机&#x2F;端系统：<strong>连接到网络并进行通信的设备</strong>，可以是个人计算机、服务器、移动设备等。</p><p>通信链路：进行<strong>网络通信的物理媒介</strong>，如同轴电缆、铜线、光纤和无线电频谱，链路的传输速率以bit&#x2F;s 或 bps 进行度量。</p><p>分组交换机：将一条<strong>入通信链路</strong>接收到的分组<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="分组：在计算机网络中，数据通常会被分割成较小的块，称为分组">[1]</span></a></sup>，并从一条<strong>出通信链路</strong>进行转化该分组。常见的分组交换机有<strong>路由器</strong>和<strong>链路层交换机</strong>。</p><p>路径：从发送端到接收端，所经过的一系列的通信链路和分组交换机。</p><p>（注：端系统、分组交换机和其他因特网部件都要运行多个协议，这些<strong>协议控制因特网中的信息的接收和发送</strong>。）</p><p><img src="/../img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240203220020095.png" alt="image-20240203220020095"></p><h4 id="1-2-服务描述"><a href="#1-2-服务描述" class="headerlink" title="1. 2 服务描述"></a>1. 2 服务描述</h4><p>套接字接口（socket interface）：该接口规定了运行在一个端系统上的程序与另外一个端系统的特定目的地程序通过因特网基础设施进行数据交付的方式。</p><p><img src="/../img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240203221004219.png" alt="image-20240203221004219"></p><h4 id="1-3-什么是协议"><a href="#1-3-什么是协议" class="headerlink" title="1. 3 什么是协议"></a>1. 3 什么是协议</h4><p>协议：定义了在两个或多个通信实体之间交换的报文格式与顺序，以及报文的发送&#x2F;接收或其他事件所采取的操作。</p><p>（常见协议有网络层上的IP协议，传输层上的TCP、UDP协议，应用层上的http、websocket、sse、quic等协议）</p><h4 id="相关习题"><a href="#相关习题" class="headerlink" title="相关习题"></a>相关习题</h4><ul><li><p><strong>R1. “主机”和“端系统”之间有什么不同？列举几种不同类型的端系统。Web服务器是一种端系统吗？</strong><br>答：”主机“和”端系统“没有什么不同，常见的端系统包括移动手机，笔记本电脑等，Web服务器是一种端系统。</p></li><li><p><strong>R2. “协议”一词常被用于描述外交关系。维基百科是怎样描述外交协议的？</strong><br>答：百度百科： 国家之间或政府之间缔结的据以确定其相互权利和义务的协议文书，多用于重大的政治、经济、军事、法律等问题的协议。有双边的，也有多边的。狭义仅指以条约命名的协议，如同盟条约、友好条约、和平条约、互不侵犯条约等。广义指不论以何种名称或形式缔结的协议，如条约、公约、协定、联合宣言、联合公报、联合声明、议定书、会谈纪要、换文、合同等。条约、公约等属于国际法律文件,是最重要的外交文书。其缔结和生效程序很严格，需经国家宪法规定的机关批准，完成其法律手续。一般由缔约国各方派代表经正式谈判达成原则协议后,共同拟订条文;次经缔约方国家元首批准,再按商定日期和地点举行换文仪式,交换批准书。通常规定双方缔结的条约，自互换批准书之日起开始生效。条约或公约经签订后，在其有效期内对各缔约国均具有约束力。协定用于缔结意义不十分重大或短期性的协议，其应用较广泛，如贸易协定、海运协定等。议定书通常用于某些具体问题的协议，或用于对已经缔结的条约进行解释、补充、修改或延长其有效期等。协定和议定书的有效期较短，缔结手续也比较简单。换文指双方用互换照会的形式对达成协议的内容予以确认，有时它是条约、协定等的附件。</p></li><li><p><strong>R3. 标准对于协议为什么重要？</strong><br>答：标准定义了协议的要做什么和具体内容。</p></li></ul><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>分组：在计算机网络中，数据通常会被分割成较小的块，称为分组<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
      <category>计算机网络和因特网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式：策略模式</title>
    <link href="/2024/01/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/01/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><p>在<strong>策略模式（Strategy Pattern）</strong>中一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。</p><p>在策略模式定义了一系列算法或策略，并将每个算法封装在独立的类中，使得它们可以互相替换。通过使用策略模式，可以在运行时根据需要选择不同的算法，而不需要修改客户端代码。</p><p>在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong>定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。</p><p><strong>主要解决：</strong>在有多种算法相似的情况下，使用 if…else 所带来的复杂和难以维护。</p><p><strong>何时使用：</strong>一个系统有许多许多类，而区分它们的只是他们直接的行为。</p><p><strong>如何解决：</strong>将这些算法封装成一个一个的类，任意地替换。</p><p><strong>关键代码：</strong>实现同一个接口。</p><p><strong>应用实例：</strong> 1、诸葛亮的锦囊妙计，每一个锦囊就是一个策略。 2、旅行的出游方式，选择骑自行车、坐汽车，每一种旅行方式都是一个策略。 3、JAVA AWT 中的 LayoutManager。</p><p><strong>优点：</strong> 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。</p><p><strong>缺点：</strong> 1、策略类会增多。 2、所有策略类都需要对外暴露。</p><p><strong>使用场景：</strong> 1、如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。 2、一个系统需要动态地在几种算法中选择一种。 3、如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</p><p><strong>注意事项：</strong>如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题。</p><p><strong>策略模式包含以下几个核心角色：</strong></p><ul><li>环境（Context）：维护一个对策略对象的引用，负责将客户端请求委派给具体的策略对象执行。环境类可以通过依赖注入、简单工厂等方式来获取具体策略对象。</li><li>抽象策略（Abstract Strategy）：定义了策略对象的公共接口或抽象类，规定了具体策略类必须实现的方法。</li><li>具体策略（Concrete Strategy）：实现了抽象策略定义的接口或抽象类，包含了具体的算法实现。</li></ul><p>策略模式通过将算法与使用算法的代码解耦，提供了一种动态选择不同算法的方法。客户端代码不需要知道具体的算法细节，而是通过调用环境类来使用所选择的策略。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p><em><strong>AuthGranterStrategy</strong></em>（统一登录策略接口）：登录通用接口</p><p><em><strong>AbstractAuthGranter</strong></em>（抽象登录类）：主要用于实现一些通用方法</p><p><em><strong>PasswordStrategy</strong></em>（密码登录策略）：实现密码登录具体细节</p><p><em><strong>WxOpenIdStrategy</strong></em>（微信OPENID登录策略）：实现微信OPENID登录具体细节</p><p><em><strong>GrantTypeEnum</strong></em>（策略枚举类）：使用 <em><strong>Key-Value</strong></em> 结构存储登录类型</p><p><em><strong>AuthStrategyFactory</strong></em>（策略工厂）：对应的工厂类，主要用于获取对应的策略</p><p>结构图如下：</p><p><img src="/../img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20240121020112825.png" alt="image-20240121020530482"></p><p><img src="/../img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20240121020817424.png" alt="image-20240121020900834"></p><h2 id="具体代码实现"><a href="#具体代码实现" class="headerlink" title="具体代码实现"></a>具体代码实现</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AuthGranterStrategy</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 登录</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> authParam</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">TokenInfo <span class="hljs-title">grant</span><span class="hljs-params">(AuthParam authParam)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractAuthGranter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuthGranterStrategy</span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-title class_">TokenInfo</span> <span class="hljs-title function_">createTokenInfoByUserId</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> userid</span>)&#123;<br>        ....<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Component</span><br>public class PasswordStrategy extends AbstractAuthGranter &#123;&#125;<br>    <span class="hljs-variable">@Override</span><br>    public TokenInfo <span class="hljs-built_in">grant</span>(AuthParam authParam) &#123;<br>        ....<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-meta">@Component</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WxOpenIdStrategy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractAuthGranter</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    public <span class="hljs-type">TokenInfo</span> grant(<span class="hljs-type">AuthParam</span> authParam) &#123;<br>        ....<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">GrantTypeEnum</span> &#123;<br>    <span class="hljs-title function_">WX_OPENID</span>(<span class="hljs-string">&quot;openId&quot;</span> ,<span class="hljs-string">&quot;wxOpenIdStrategy&quot;</span>),<br>    <span class="hljs-title function_">PASSWORD</span>(<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;passwordStrategy&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> final <span class="hljs-title class_">String</span> <span class="hljs-keyword">type</span>;<br><br>    <span class="hljs-keyword">private</span> final <span class="hljs-title class_">String</span> value;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getValueByType</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> grantType</span>)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-title class_">GrantTypeEnum</span> grantTypeEnum : <span class="hljs-title function_">values</span>())&#123;<br>            <span class="hljs-keyword">if</span>(grantTypeEnum.<span class="hljs-title function_">getType</span>().<span class="hljs-title function_">equals</span>(grantType))&#123;<br>                <span class="hljs-keyword">return</span> grantTypeEnum.<span class="hljs-title function_">getValue</span>();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthFactory</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;<span class="hljs-keyword">String</span>, AuthGranterStrategy&gt; granterMap = <span class="hljs-keyword">new</span> <span class="hljs-type">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> AuthFactory(Map&lt;<span class="hljs-keyword">String</span>, AuthGranterStrategy&gt; granterMap)&#123;<br>        <span class="hljs-built_in">this</span>.granterMap.putAll(granterMap);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> AuthGranterStrategy getGranter(<span class="hljs-keyword">String</span> grantType)&#123;<br>        AuthGranterStrategy granterStrategy = granterMap.<span class="hljs-keyword">get</span>(grantType);<br>        Optional.ofNullable(granterStrategy).orElseThrow(() -&gt; <span class="hljs-keyword">new</span> <span class="hljs-type">RuntimeException</span>(<span class="hljs-string">&quot;不存在此种登录类型&quot;</span>));<br>        <span class="hljs-keyword">return</span> granterStrategy;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p><img src="/../img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20240121021950422.png" alt="image-20240121021950422"></p><p>[部分引用]: <a href="https://www.runoob.com/design-pattern/strategy-pattern.html">https://www.runoob.com/design-pattern/strategy-pattern.html</a>“策略模式”</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
      <category>行为模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手撸Spring：设计与实现资源加载器，从Spring.xml解析和注册Bean对象（Day5）</title>
    <link href="/2024/01/18/%E6%89%8B%E6%92%B8Spring%EF%BC%9Aday5/"/>
    <url>/2024/01/18/%E6%89%8B%E6%92%B8Spring%EF%BC%9Aday5/</url>
    
    <content type="html"><![CDATA[<h2 id="一、目标"><a href="#一、目标" class="headerlink" title="一、目标"></a>一、目标</h2><p>在完成 Spring 的框架雏形后，现在我们可以通过单元测试进行手动操作 Bean 对象的定义、注册和属性填充，以及最终获取对象调用方法。但这里会有一个问题，就是如果实际使用这个 Spring 框架，是不太可能让用户通过手动方式创建的，而是最好能通过配置文件的方式简化创建过程。需要完成如下操作：</p><p><img src="/../img/%E6%89%8B%E6%92%B8Spring%E7%B3%BB%E5%88%97/image-20240118015147266.png" alt="image-20240118015147266"></p><ul><li>如图中我们需要把步骤：2、3、4整合到Spring框架中，通过 Spring 配置文件的方式将 Bean 对象实例化。</li><li>接下来我们就需要在现有的 Spring 框架中，添加能解决 Spring 配置的读取、解析、注册Bean的操作。</li></ul><h2 id="二、设计"><a href="#二、设计" class="headerlink" title="二、设计"></a>二、设计</h2><p>依照本章节的需求背景，我们需要在现有的 Spring 框架雏形中添加一个资源解析器，也就是能读取classpath、本地文件和云文件的配置内容。这些配置内容就是像使用 Spring 时配置的 Spring.xml 一样，里面会包括 Bean 对象的描述和属性信息。在读取配置文件信息后，接下来就是对配置文件中的 Bean 描述信息解析后进行注册操作，把 Bean 对象注册到 Spring 容器中。整体设计结构如下图：</p><p><img src="/../img/%E6%89%8B%E6%92%B8Spring%E7%B3%BB%E5%88%97/image-20240118015309831.png" alt="image-20240118015309831"></p><ul><li>资源加载器属于相对独立的部分，它位于 Spring 框架核心包下的IO实现内容，主要用于处理Class、本地和云环境中的文件信息。</li><li>当资源可以加载后，接下来就是解析和注册 Bean 到 Spring 中的操作，这部分实现需要和 DefaultListableBeanFactory 核心类结合起来，因为你所有的解析后的注册动作，都会把 Bean 定义信息放入到这个类中。</li><li>那么在实现的时候就设计好接口的实现层级关系，包括我们需要定义出 Bean 定义的读取接口 <code>BeanDefinitionReader</code> 以及做好对应的实现类，在实现类中完成对 Bean 对象的解析和注册。</li></ul><h2 id="三、实现"><a href="#三、实现" class="headerlink" title="三、实现"></a>三、实现</h2><h3 id="1-工程结构"><a href="#1-工程结构" class="headerlink" title="1. 工程结构"></a>1. 工程结构</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs stylus">small-spring-step-<span class="hljs-number">05</span><br>└── <span class="hljs-attribute">src</span><br>    ├── <span class="hljs-selector-tag">main</span><br>    │   └── java<br>    │       └── cn<span class="hljs-selector-class">.bugstack</span><span class="hljs-selector-class">.springframework</span>  <br>    │           ├── beans<br>    │           │   ├── factory<br>    │           │   │   ├── factory<br>    │           │   │   │   ├── AutowireCapableBeanFactory<span class="hljs-selector-class">.java</span><br>    │           │   │   │   ├── BeanDefinition<span class="hljs-selector-class">.java</span><br>    │           │   │   │   ├── BeanReference<span class="hljs-selector-class">.java</span><br>    │           │   │   │   ├── ConfigurableBeanFactory<span class="hljs-selector-class">.java</span><br>    │           │   │   │   └── SingletonBeanRegistry<span class="hljs-selector-class">.java</span><br>    │           │   │   ├── support<br>    │           │   │   │   ├── AbstractAutowireCapableBeanFactory<span class="hljs-selector-class">.java</span><br>    │           │   │   │   ├── AbstractBeanDefinitionReader<span class="hljs-selector-class">.java</span><br>    │           │   │   │   ├── AbstractBeanFactory<span class="hljs-selector-class">.java</span><br>    │           │   │   │   ├── BeanDefinitionReader<span class="hljs-selector-class">.java</span><br>    │           │   │   │   ├── BeanDefinitionRegistry<span class="hljs-selector-class">.java</span><br>    │           │   │   │   ├── CglibSubclassingInstantiationStrategy<span class="hljs-selector-class">.java</span><br>    │           │   │   │   ├── DefaultListableBeanFactory<span class="hljs-selector-class">.java</span><br>    │           │   │   │   ├── DefaultSingletonBeanRegistry<span class="hljs-selector-class">.java</span><br>    │           │   │   │   ├── InstantiationStrategy<span class="hljs-selector-class">.java</span><br>    │           │   │   │   └── SimpleInstantiationStrategy<span class="hljs-selector-class">.java</span>  <br>    │           │   │   ├── support<br>    │           │   │   │   └── XmlBeanDefinitionReader<span class="hljs-selector-class">.java</span><br>    │           │   │   ├── BeanFactory<span class="hljs-selector-class">.java</span><br>    │           │   │   ├── ConfigurableListableBeanFactory<span class="hljs-selector-class">.java</span><br>    │           │   │   ├── HierarchicalBeanFactory<span class="hljs-selector-class">.java</span><br>    │           │   │   └── ListableBeanFactory<span class="hljs-selector-class">.java</span><br>    │           │   ├── BeansException<span class="hljs-selector-class">.java</span><br>    │           │   ├── PropertyValue<span class="hljs-selector-class">.java</span><br>    │           │   └── PropertyValues<span class="hljs-selector-class">.java</span> <br>    │           ├── core<span class="hljs-selector-class">.io</span><br>    │           │   ├── ClassPathResource<span class="hljs-selector-class">.java</span> <br>    │           │   ├── DefaultResourceLoader<span class="hljs-selector-class">.java</span> <br>    │           │   ├── FileSystemResource<span class="hljs-selector-class">.java</span> <br>    │           │   ├── Resource<span class="hljs-selector-class">.java</span> <br>    │           │   ├── ResourceLoader<span class="hljs-selector-class">.java</span> <br>    │           │   └── UrlResource<span class="hljs-selector-class">.java</span><br>    │           └── utils<br>    │               └── ClassUtils<span class="hljs-selector-class">.java</span><br>    └── test<br>        └── java<br>            └── cn<span class="hljs-selector-class">.bugstack</span><span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.test</span><br>                ├── bean<br>                │   ├── UserDao<span class="hljs-selector-class">.java</span><br>                │   └── UserService<span class="hljs-selector-class">.java</span><br>                └── ApiTest.java<br></code></pre></td></tr></table></figure><p>Spring Bean 容器资源加载和使用类关系，如图 6-3</p><p><img src="/../img/%E6%89%8B%E6%92%B8Spring%E7%B3%BB%E5%88%97/image-20240118015435040.png" alt="image-20240118015435040"></p><ul><li>本章节为了能把 Bean 的定义、注册和初始化交给 Spring.xml 配置化处理，那么就需要实现两大块内容，分别是：资源加载器、xml资源处理类，实现过程主要以对接口 <code>Resource</code>、<code>ResourceLoader</code> 的实现，而另外 <code>BeanDefinitionReader</code> 接口则是对资源的具体使用，将配置信息注册到 Spring 容器中去。</li><li>在 Resource 的资源加载器的实现中包括了，ClassPath、系统文件、云配置文件，这三部分与 Spring 源码中的设计和实现保持一致，最终在 DefaultResourceLoader 中做具体的调用。</li><li>接口：BeanDefinitionReader、抽象类：AbstractBeanDefinitionReader、实现类：XmlBeanDefinitionReader，这三部分内容主要是合理清晰的处理了资源读取后的注册 Bean 容器操作。<em>接口管定义，抽象类处理非接口功能外的注册Bean组件填充，最终实现类即可只关心具体的业务实现</em></li></ul><p>另外本章节还参考 Spring 源码，做了相应接口的集成和实现的关系，虽然这些接口目前还并没有太大的作用，但随着框架的逐步完善，它们也会发挥作用。如图 6-4</p><p><img src="/../img/%E6%89%8B%E6%92%B8Spring%E7%B3%BB%E5%88%97/image-20240118015533478.png" alt="image-20240118015533478"></p><ul><li>BeanFactory，已经存在的 Bean 工厂接口用于获取 Bean 对象，这次新增加了按照类型获取 Bean 的方法：<code>&lt;T&gt; T getBean(String name, Class&lt;T&gt; requiredType)</code></li><li>ListableBeanFactory，是一个扩展 Bean 工厂接口的接口，新增加了 <code>getBeansOfType</code>、<code>getBeanDefinitionNames()</code> 方法，在 Spring 源码中还有其他扩展方法。</li><li>HierarchicalBeanFactory，在 Spring 源码中它提供了可以获取父类 BeanFactory 方法，属于是一种扩展工厂的层次子接口。<em>Sub-interface implemented by bean factories that can be part of a hierarchy.</em></li><li>AutowireCapableBeanFactory，是一个自动化处理Bean工厂配置的接口，目前案例工程中还没有做相应的实现，后续逐步完善。</li><li>ConfigurableBeanFactory，可获取 BeanPostProcessor、BeanClassLoader等的一个配置化接口。</li><li>ConfigurableListableBeanFactory，提供分析和修改Bean以及预先实例化的操作接口，不过目前只有一个 getBeanDefinition 方法。</li></ul><h3 id="2-资源加载接口定义和实现"><a href="#2-资源加载接口定义和实现" class="headerlink" title="2. 资源加载接口定义和实现"></a>2. 资源加载接口定义和实现</h3><p><strong>cn.bugstack.springframework.core.io.Resource</strong></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Resource</span> </span>&#123;<br><br>    <span class="hljs-function">InputStream <span class="hljs-title">getInputStream</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在 Spring 框架下创建 core.io 核心包，在这个包中主要用于处理资源加载流。</li><li>定义 Resource 接口，提供获取 InputStream 流的方法，接下来再分别实现三种不同的流文件操作：classPath、FileSystem、URL</li></ul><p><strong>ClassPath</strong>：cn.bugstack.springframework.core.io.ClassPathResource</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassPathResource</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Resource</span></span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> path;<br><br>    <span class="hljs-keyword">private</span> ClassLoader classLoader;<br><br>    <span class="hljs-keyword">public</span> ClassPathResource(<span class="hljs-keyword">String</span> path) &#123;<br>        <span class="hljs-built_in">this</span>(path, (ClassLoader) <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ClassPathResource(<span class="hljs-keyword">String</span> path, ClassLoader classLoader) &#123;<br>        Assert.notNull(path, <span class="hljs-string">&quot;Path must not be null&quot;</span>);<br>        <span class="hljs-built_in">this</span>.path = path;<br>        <span class="hljs-built_in">this</span>.classLoader = (classLoader != <span class="hljs-literal">null</span> ? classLoader : <span class="hljs-type">ClassUtils</span>.getDefaultClassLoader());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> InputStream getInputStream() throws IOException &#123;<br>        InputStream <span class="hljs-keyword">is</span> = classLoader.getResourceAsStream(path);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">is</span> == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">FileNotFoundException</span>(<br>                    <span class="hljs-built_in">this</span>.path + <span class="hljs-string">&quot; cannot be opened because it does not exist&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">is</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>这一部分的实现是用于通过 <code>ClassLoader</code> 读取<code>ClassPath</code> 下的文件信息，具体的读取过程主要是：<code>classLoader.getResourceAsStream(path)</code></li></ul><p><strong>FileSystem</strong>：cn.bugstack.springframework.core.io.FileSystemResource</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileSystemResource</span> implements Resource &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-built_in">File</span> file;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> path;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FileSystemResource</span><span class="hljs-params">(<span class="hljs-built_in">File</span> file)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.file = file;<br>        <span class="hljs-keyword">this</span>.path = file.<span class="hljs-built_in">getPath</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FileSystemResource</span><span class="hljs-params">(<span class="hljs-type">String</span> path)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.file = <span class="hljs-keyword">new</span> <span class="hljs-built_in">File</span>(path);<br>        <span class="hljs-keyword">this</span>.path = path;<br>    &#125;<br><br>    @<span class="hljs-function">Override</span><br><span class="hljs-function">    <span class="hljs-keyword">public</span> InputStream <span class="hljs-title">getInputStream</span><span class="hljs-params">()</span> throws IOException </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">FileInputStream</span>(<span class="hljs-keyword">this</span>.file);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-title">getPath</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.path;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通过指定文件路径的方式读取文件信息，这部分大家肯定还是非常熟悉的，经常会读取一些txt、excel文件输出到控制台。</li></ul><p><strong>Url</strong>：cn.bugstack.springframework.core.io.UrlResource</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UrlResource</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Resource</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> URL url;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UrlResource</span><span class="hljs-params">(URL url)</span> </span>&#123;<br>        Assert.notNull(url,<span class="hljs-string">&quot;URL must not be null&quot;</span>);<br>        <span class="hljs-keyword">this</span>.url = url;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function">InputStream <span class="hljs-title">getInputStream</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        URLConnection con = <span class="hljs-keyword">this</span>.url.openConnection();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">return</span> con.<span class="hljs-title">getInputStream</span><span class="hljs-params">()</span></span>;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (IOException ex)&#123;<br>            <span class="hljs-keyword">if</span> (con <span class="hljs-keyword">instanceof</span> HttpURLConnection)&#123;<br>                ((HttpURLConnection) con).disconnect();<br>            &#125;<br>            <span class="hljs-keyword">throw</span> ex;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通过 HTTP 的方式读取云服务的文件，我们也可以把配置文件放到 GitHub 或者 Gitee 上。</li></ul><h3 id="3-包装资源加载器"><a href="#3-包装资源加载器" class="headerlink" title="3. 包装资源加载器"></a>3. 包装资源加载器</h3><p>按照资源加载的不同方式，资源加载器可以把这些方式集中到统一的类服务下进行处理，外部用户只需要传递资源地址即可，简化使用。</p><p><strong>定义接口</strong>：cn.bugstack.springframework.core.io.ResourceLoader</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">interface</span> <span class="hljs-title">ResourceLoader</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Pseudo URL prefix for loading from the class path: &quot;classpath:&quot;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">String</span> CLASSPATH_URL_PREFIX = <span class="hljs-string">&quot;classpath:&quot;</span>;<br><br>    Resource getResource(<span class="hljs-keyword">String</span> location);<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>定义获取资源接口，里面传递 location 地址即可。</li></ul><p><strong>实现接口</strong>：cn.bugstack.springframework.core.io.DefaultResourceLoader</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">DefaultResourceLoader</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">ResourceLoader</span></span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Resource getResource(<span class="hljs-keyword">String</span> location) &#123;<br>        Assert.notNull(location, <span class="hljs-string">&quot;Location must not be null&quot;</span>);<br>        <span class="hljs-keyword">if</span> (location.startsWith(CLASSPATH_URL_PREFIX)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">ClassPathResource</span>(location.substring(CLASSPATH_URL_PREFIX.length()));<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                URL url = <span class="hljs-keyword">new</span> <span class="hljs-type">URL</span>(location);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">UrlResource</span>(url);<br>            &#125; <span class="hljs-keyword">catch</span> (MalformedURLException e) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">FileSystemResource</span>(location);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在获取资源的实现中，主要是把三种不同类型的资源处理方式进行了包装，分为：判断是否为ClassPath、URL以及文件。</li><li>虽然 DefaultResourceLoader 类实现的过程简单，但这也是设计模式约定的具体结果，像是这里不会让外部调用放知道过多的细节，而是仅关心具体调用结果即可。</li></ul><h3 id="4-Bean定义读取接口"><a href="#4-Bean定义读取接口" class="headerlink" title="4. Bean定义读取接口"></a>4. Bean定义读取接口</h3><p><strong>cn.bugstack.springframework.beans.factory.support.BeanDefinitionReader</strong></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BeanDefinitionReader</span> </span>&#123;<br><br>    <span class="hljs-function">BeanDefinitionRegistry <span class="hljs-title">getRegistry</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function">ResourceLoader <span class="hljs-title">getResourceLoader</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loadBeanDefinitions</span><span class="hljs-params">(Resource resource)</span> <span class="hljs-keyword">throws</span> BeansException</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loadBeanDefinitions</span><span class="hljs-params">(Resource... resources)</span> <span class="hljs-keyword">throws</span> BeansException</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loadBeanDefinitions</span><span class="hljs-params">(String location)</span> <span class="hljs-keyword">throws</span> BeansException</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>这是一个 <em>Simple interface for bean definition readers.</em> 其实里面无非定义了几个方法，包括：getRegistry()、getResourceLoader()，以及三个加载Bean定义的方法。</li><li>这里需要注意 getRegistry()、getResourceLoader()，都是用于提供给后面三个方法的工具，加载和注册，这两个方法的实现会包装到抽象类中，以免污染具体的接口实现方法。</li></ul><h3 id="5-Bean定义抽象类实现"><a href="#5-Bean定义抽象类实现" class="headerlink" title="5. Bean定义抽象类实现"></a>5. Bean定义抽象类实现</h3><p><strong>cn.bugstack.springframework.beans.factory.support.AbstractBeanDefinitionReader</strong></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractBeanDefinitionReader</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BeanDefinitionReader</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> BeanDefinitionRegistry registry;<br><br>    <span class="hljs-keyword">private</span> ResourceLoader resourceLoader;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">AbstractBeanDefinitionReader</span><span class="hljs-params">(BeanDefinitionRegistry registry)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(registry, <span class="hljs-keyword">new</span> DefaultResourceLoader());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AbstractBeanDefinitionReader</span><span class="hljs-params">(BeanDefinitionRegistry registry, ResourceLoader resourceLoader)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.registry = registry;<br>        <span class="hljs-keyword">this</span>.resourceLoader = resourceLoader;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function">BeanDefinitionRegistry <span class="hljs-title">getRegistry</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> registry;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function">ResourceLoader <span class="hljs-title">getResourceLoader</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> resourceLoader;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>抽象类把 BeanDefinitionReader 接口的前两个方法全部实现完了，并提供了构造函数，让外部的调用使用方，把Bean定义注入类，传递进来。</li><li>这样在接口 BeanDefinitionReader 的具体实现类中，就可以把解析后的 XML 文件中的 Bean 信息，注册到 Spring 容器去了。<em>以前我们是通过单元测试使用，调用 BeanDefinitionRegistry 完成Bean的注册，现在可以放到 XMl 中操作了</em></li></ul><h3 id="6-解析XML处理Bean注册"><a href="#6-解析XML处理Bean注册" class="headerlink" title="6. 解析XML处理Bean注册"></a>6. 解析XML处理Bean注册</h3><p><strong>cn.bugstack.springframework.beans.factory.xml.XmlBeanDefinitionReader</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XmlBeanDefinitionReader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractBeanDefinitionReader</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">XmlBeanDefinitionReader</span><span class="hljs-params">(BeanDefinitionRegistry registry)</span> &#123;<br>        <span class="hljs-built_in">super</span>(registry);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">XmlBeanDefinitionReader</span><span class="hljs-params">(BeanDefinitionRegistry registry, ResourceLoader resourceLoader)</span> &#123;<br>        <span class="hljs-built_in">super</span>(registry, resourceLoader);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadBeanDefinitions</span><span class="hljs-params">(Resource resource)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">try</span> (<span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> resource.getInputStream()) &#123;<br>                doLoadBeanDefinitions(inputStream);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException | ClassNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeansException</span>(<span class="hljs-string">&quot;IOException parsing XML document from &quot;</span> + resource, e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadBeanDefinitions</span><span class="hljs-params">(Resource... resources)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-keyword">for</span> (Resource resource : resources) &#123;<br>            loadBeanDefinitions(resource);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadBeanDefinitions</span><span class="hljs-params">(String location)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-type">ResourceLoader</span> <span class="hljs-variable">resourceLoader</span> <span class="hljs-operator">=</span> getResourceLoader();<br>        <span class="hljs-type">Resource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> resourceLoader.getResource(location);<br>        loadBeanDefinitions(resource);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doLoadBeanDefinitions</span><span class="hljs-params">(InputStream inputStream)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-type">Document</span> <span class="hljs-variable">doc</span> <span class="hljs-operator">=</span> XmlUtil.readXML(inputStream);<br>        <span class="hljs-type">Element</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> doc.getDocumentElement();<br>        <span class="hljs-type">NodeList</span> <span class="hljs-variable">childNodes</span> <span class="hljs-operator">=</span> root.getChildNodes();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; childNodes.getLength(); i++) &#123;<br>            <span class="hljs-comment">// 判断元素</span><br>            <span class="hljs-keyword">if</span> (!(childNodes.item(i) <span class="hljs-keyword">instanceof</span> Element)) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-comment">// 判断对象</span><br>            <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;bean&quot;</span>.equals(childNodes.item(i).getNodeName())) <span class="hljs-keyword">continue</span>;<br>            <br>            <span class="hljs-comment">// 解析标签</span><br>            <span class="hljs-type">Element</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> (Element) childNodes.item(i);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> bean.getAttribute(<span class="hljs-string">&quot;id&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> bean.getAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> bean.getAttribute(<span class="hljs-string">&quot;class&quot;</span>);<br>            <span class="hljs-comment">// 获取 Class，方便获取类中的名称</span><br>            Class&lt;?&gt; clazz = Class.forName(className);<br>            <span class="hljs-comment">// 优先级 id &gt; name</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">beanName</span> <span class="hljs-operator">=</span> StrUtil.isNotEmpty(id) ? id : name;<br>            <span class="hljs-keyword">if</span> (StrUtil.isEmpty(beanName)) &#123;<br>                beanName = StrUtil.lowerFirst(clazz.getSimpleName());<br>            &#125;<br><br>            <span class="hljs-comment">// 定义Bean</span><br>            <span class="hljs-type">BeanDefinition</span> <span class="hljs-variable">beanDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanDefinition</span>(clazz);<br>            <span class="hljs-comment">// 读取属性并填充</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; bean.getChildNodes().getLength(); j++) &#123;<br>                <span class="hljs-keyword">if</span> (!(bean.getChildNodes().item(j) <span class="hljs-keyword">instanceof</span> Element)) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;property&quot;</span>.equals(bean.getChildNodes().item(j).getNodeName())) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-comment">// 解析标签：property</span><br>                <span class="hljs-type">Element</span> <span class="hljs-variable">property</span> <span class="hljs-operator">=</span> (Element) bean.getChildNodes().item(j);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">attrName</span> <span class="hljs-operator">=</span> property.getAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">attrValue</span> <span class="hljs-operator">=</span> property.getAttribute(<span class="hljs-string">&quot;value&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">attrRef</span> <span class="hljs-operator">=</span> property.getAttribute(<span class="hljs-string">&quot;ref&quot;</span>);<br>                <span class="hljs-comment">// 获取属性值：引入对象、值对象</span><br>                <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> StrUtil.isNotEmpty(attrRef) ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanReference</span>(attrRef) : attrValue;<br>                <span class="hljs-comment">// 创建属性信息</span><br>                <span class="hljs-type">PropertyValue</span> <span class="hljs-variable">propertyValue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertyValue</span>(attrName, value);<br>                beanDefinition.getPropertyValues().addPropertyValue(propertyValue);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (getRegistry().containsBeanDefinition(beanName)) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeansException</span>(<span class="hljs-string">&quot;Duplicate beanName[&quot;</span> + beanName + <span class="hljs-string">&quot;] is not allowed&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">// 注册 BeanDefinition</span><br>            getRegistry().registerBeanDefinition(beanName, beanDefinition);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>XmlBeanDefinitionReader 类最核心的内容就是对 XML 文件的解析，把我们本来在代码中的操作放到了通过解析 XML 自动注册的方式。</p><ul><li>loadBeanDefinitions 方法，处理资源加载，这里新增加了一个内部方法：<code>doLoadBeanDefinitions</code>，它主要负责解析 xml</li><li>在 doLoadBeanDefinitions 方法中，主要是对xml的读取 <code>XmlUtil.readXML(inputStream)</code> 和元素 Element 解析。在解析的过程中通过循环操作，以此获取 Bean 配置以及配置中的 id、name、class、value、ref 信息。</li><li>最终把读取出来的配置信息，创建成 BeanDefinition 以及 PropertyValue，最终把完整的 Bean 定义内容注册到 Bean 容器：<code>getRegistry().registerBeanDefinition(beanName, beanDefinition)</code></li></ul><h2 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h2><h3 id="1-事先准备"><a href="#1-事先准备" class="headerlink" title="1. 事先准备"></a>1. 事先准备</h3><p><strong>cn.bugstack.springframework.test.bean.UserDao</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDao</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;<span class="hljs-keyword">String</span>, <span class="hljs-keyword">String</span>&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-type">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        hashMap.put(<span class="hljs-string">&quot;10001&quot;</span>, <span class="hljs-string">&quot;小傅哥&quot;</span>);<br>        hashMap.put(<span class="hljs-string">&quot;10002&quot;</span>, <span class="hljs-string">&quot;八杯水&quot;</span>);<br>        hashMap.put(<span class="hljs-string">&quot;10003&quot;</span>, <span class="hljs-string">&quot;阿毛&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> queryUserName(<span class="hljs-keyword">String</span> uId) &#123;<br>        <span class="hljs-keyword">return</span> hashMap.<span class="hljs-keyword">get</span>(uId);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>cn.bugstack.springframework.test.bean.UserService</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> uId;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">UserDao</span> userDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">queryUserInfo</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> userDao.<span class="hljs-title function_">queryUserName</span>(uId);<br>    &#125;<br><br>    <span class="hljs-comment">// ...get/set</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Dao、Service，是我们平常开发经常使用的场景。在 UserService 中注入 UserDao，这样就能体现出Bean属性的依赖了。</li></ul><h3 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2. 配置文件"></a>2. 配置文件</h3><p><strong>important.properties</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># Config File</span><br><span class="hljs-attr">system.key</span>=OLpj9823dZ<br></code></pre></td></tr></table></figure><p><strong>spring.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.bugstack.springframework.test.bean.UserDao&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.bugstack.springframework.test.bean.UserService&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;uId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10001&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>这里有两份配置文件，一份用于测试资源加载器，另外 spring.xml 用于测试整体的 Bean 注册功能。</li></ul><h3 id="3-单元测试-资源加载"><a href="#3-单元测试-资源加载" class="headerlink" title="3. 单元测试(资源加载)"></a>3. 单元测试(资源加载)</h3><p><strong>案例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> DefaultResourceLoader resourceLoader;      <br><br><span class="hljs-meta">@Before</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>    resourceLoader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultResourceLoader</span>();<br>&#125;   <br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test_classpath</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">Resource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> resourceLoader.getResource(<span class="hljs-string">&quot;classpath:important.properties&quot;</span>);<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> resource.getInputStream();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> IoUtil.readUtf8(inputStream);<br>    System.out.println(content);<br>&#125;   <br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test_file</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">Resource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> resourceLoader.getResource(<span class="hljs-string">&quot;src/test/resources/important.properties&quot;</span>);<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> resource.getInputStream();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> IoUtil.readUtf8(inputStream);<br>    System.out.println(content);<br>&#125;    <br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test_url</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">Resource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> resourceLoader.getResource(<span class="hljs-string">&quot;https://github.com/fuzhengwei/small-spring/important.properties&quot;</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> resource.getInputStream();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> IoUtil.readUtf8(inputStream);<br>    System.out.println(content);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试结果</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># Config File</span><br>system.key=OLpj9823dZ<br><br>Process finished with <span class="hljs-keyword">exit</span> code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ul><li>这三个方法：test_classpath、test_file、test_url，分别用于测试加载 ClassPath、FileSystem、Url 文件，<em>URL文件在Github，可能加载时会慢</em></li></ul><h3 id="4-单元测试-配置文件注册Bean"><a href="#4-单元测试-配置文件注册Bean" class="headerlink" title="4. 单元测试(配置文件注册Bean)"></a>4. 单元测试(配置文件注册Bean)</h3><p><strong>案例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test_xml</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1.初始化 BeanFactory</span><br>    <span class="hljs-type">DefaultListableBeanFactory</span> <span class="hljs-variable">beanFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultListableBeanFactory</span>();<br><br>    <span class="hljs-comment">// 2. 读取配置文件&amp;注册Bean</span><br>    <span class="hljs-type">XmlBeanDefinitionReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XmlBeanDefinitionReader</span>(beanFactory);<br>    reader.loadBeanDefinitions(<span class="hljs-string">&quot;classpath:spring.xml&quot;</span>);<br><br>    <span class="hljs-comment">// 3. 获取Bean对象调用方法</span><br>    <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> beanFactory.getBean(<span class="hljs-string">&quot;userService&quot;</span>, UserService.class);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userService.queryUserInfo();<br>    System.out.println(<span class="hljs-string">&quot;测试结果：&quot;</span> + result);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试结果</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">测试结果：小傅哥<br><br>Process finished with <span class="hljs-keyword">exit</span> code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ul><li>在上面的测试案例中可以看到，我们把以前通过手动注册 Bean 以及配置属性信息的内容，交给了 <code>new XmlBeanDefinitionReader(beanFactory)</code> 类读取 Spring.xml 的方式来处理，并通过了测试验证。</li></ul><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>以配置文件为入口解析和注册 Bean 信息，最终再通过 Bean 工厂获取 Bean 以及做相应的调用操作</p><p>[文章引用]: <a href="https://mp.weixin.qq.com/s?__biz=MzIxMDAwMDAxMw==&amp;mid=2650730645&amp;idx=1&amp;sn=70862b3f3ee482e03d56a5b68af710c6&amp;chksm=8f611177b8169861c5dff11d2b7f475af8e827c3e79764007e43c9a16566a16992ad8085b142&amp;cur_album_id=1871634116341743621&amp;scene=189&amp;poc_token=HC4VqGWjQ3nyOjH4FoQM0xRW_JSLa6TArN4RIjq-">https://mp.weixin.qq.com/s?__biz=MzIxMDAwMDAxMw==&amp;mid=2650730645&amp;idx=1&amp;sn=70862b3f3ee482e03d56a5b68af710c6&amp;chksm=8f611177b8169861c5dff11d2b7f475af8e827c3e79764007e43c9a16566a16992ad8085b142&amp;cur_album_id=1871634116341743621&amp;scene=189&amp;poc_token=HC4VqGWjQ3nyOjH4FoQM0xRW_JSLa6TArN4RIjq-</a>“《Spring 手撸专栏》第 6 章：气吞山河，设计与实现资源加载器，从Spring.xml解析和注册Bean对象”</p>]]></content>
    
    
    <categories>
      
      <category>手撸spring系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手撸Spring：为Bean对象注入属性和依赖Bean的功能实现（Day4）</title>
    <link href="/2024/01/10/%E6%89%8B%E6%92%B8Spring%EF%BC%9Aday4/"/>
    <url>/2024/01/10/%E6%89%8B%E6%92%B8Spring%EF%BC%9Aday4/</url>
    
    <content type="html"><![CDATA[<h2 id="一、目标"><a href="#一、目标" class="headerlink" title="一、目标"></a>一、目标</h2><p>如果类中包含属性那么在实例化的时候，对于属性的填充不仅仅是int、Long、String，还包括还<strong>没有实例化的对象属性，都需要在Bean创建时进行填充操作。</strong>  <em>暂时不会考虑Bean的循环依赖</em></p><h2 id="二、设计"><a href="#二、设计" class="headerlink" title="二、设计"></a>二、设计</h2><p>那么属性填充是在Bean使用<code>newInstance</code>或者<code>Cglib</code>创建之后，开始补全属性信息，那么就可以在类<code>AbstractAutowireCapableBeanFactory</code>的createBean方法中添加补全属性方法。</p><p><img src="/../img/%E6%89%8B%E6%92%B8Spring%E7%B3%BB%E5%88%97/image-20240110155007945.png" alt="image-20240110155007945"></p><ul><li>属性填充要在类实例化创建之后，那么就需要在<code>AbstractAutowireCapableBeanFactory</code>createBean方法中添加<code>applyPropertyValues</code>操作。</li><li>由于我们需要在创建Bean的时候填充属性操作，那么就需要在bean定义BeanDefinition类中，添加PropertyValues信息。</li><li>另外是填充属性信息还包括了 Bean 的对象类型，需要再定义一个 BeanReference，里面其实就是一个简单的 Bean 名称，在具体的实例化操作时进行增量创建和填充，与 Spring 源码实现一样<em>。 BeanReference源码是一个接口</em></li></ul><h2 id="三、实现"><a href="#三、实现" class="headerlink" title="三、实现"></a>三、实现</h2><h3 id="1、工程结构"><a href="#1、工程结构" class="headerlink" title="1、工程结构"></a>1、工程结构</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs stylus">small-spring-step-<span class="hljs-number">04</span><br>└── <span class="hljs-attribute">src</span><br>    ├── <span class="hljs-selector-tag">main</span><br>    │   └── java<br>    │       └── cn<span class="hljs-selector-class">.bugstack</span><span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.beans</span><br>    │           ├── factory<br>    │           │   ├── factory<br>    │           │   │   ├── BeanDefinition<span class="hljs-selector-class">.java</span><br>    │           │   │   ├── BeanReference<span class="hljs-selector-class">.java</span><br>    │           │   │   └── SingletonBeanRegistry<span class="hljs-selector-class">.java</span><br>    │           │   ├── support<br>    │           │   │   ├── AbstractAutowireCapableBeanFactory<span class="hljs-selector-class">.java</span><br>    │           │   │   ├── AbstractBeanFactory<span class="hljs-selector-class">.java</span><br>    │           │   │   ├── BeanDefinitionRegistry<span class="hljs-selector-class">.java</span><br>    │           │   │   ├── CglibSubclassingInstantiationStrategy<span class="hljs-selector-class">.java</span><br>    │           │   │   ├── DefaultListableBeanFactory<span class="hljs-selector-class">.java</span><br>    │           │   │   ├── DefaultSingletonBeanRegistry<span class="hljs-selector-class">.java</span><br>    │           │   │   ├── InstantiationStrategy<span class="hljs-selector-class">.java</span><br>    │           │   │   └── SimpleInstantiationStrategy<span class="hljs-selector-class">.java</span><br>    │           │   └── BeanFactory<span class="hljs-selector-class">.java</span><br>    │           ├── BeansException<span class="hljs-selector-class">.java</span><br>    │           ├── PropertyValue<span class="hljs-selector-class">.java</span><br>    │           └── PropertyValues<span class="hljs-selector-class">.java</span><br>    └── test<br>        └── java<br>            └── cn<span class="hljs-selector-class">.bugstack</span><span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.test</span><br>                ├── bean<br>                │   ├── UserDao<span class="hljs-selector-class">.java</span><br>                │   └── UserService<span class="hljs-selector-class">.java</span><br>                └── ApiTest.java<br></code></pre></td></tr></table></figure><p>Spring Bean 容器类关系，如图 5-2</p><p><img src="/../img/%E6%89%8B%E6%92%B8Spring%E7%B3%BB%E5%88%97/image-20240110155238048.png" alt="image-20240110155238048"></p><ul><li>本章节中需要新增3个类，<code>BeanReference</code>（类引用）、<code>PropertyValue</code>（属性值）、<code>PropertyValues</code>（属性集合），分别用于类和其他类型属性填充操作。</li><li>另外的类主要是<code>AbstractAutowireCapableBeanFactory</code>，在 createBean 中补全属性填充部分。</li></ul><h3 id="2-定义属性"><a href="#2-定义属性" class="headerlink" title="2. 定义属性"></a>2. 定义属性</h3><p><strong>cn.bugstack.springframework.beans.PropertyValue</strong></p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PropertyValue</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-built_in">String</span> name;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-built_in">Object</span> value;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PropertyValue</span>(<span class="hljs-built_in">String</span> name, <span class="hljs-built_in">Object</span> value) &#123;<br>        <span class="hljs-variable">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable">this</span>.<span class="hljs-property">value</span> = value;<br>    &#125;<br>    <br>    <span class="hljs-comment">// ...get/set</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>cn.bugstack.springframework.beans.PropertyValues</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PropertyValues</span> &#123;<br><br>    <span class="hljs-keyword">private</span> final <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">PropertyValue</span>&gt; propertyValueList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">addPropertyValue</span>(<span class="hljs-params">PropertyValue pv</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">propertyValueList</span>.<span class="hljs-title function_">add</span>(pv);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">PropertyValue</span>[] <span class="hljs-title function_">getPropertyValues</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">propertyValueList</span>.<span class="hljs-title function_">toArray</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertyValue</span>[<span class="hljs-number">0</span>]);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">PropertyValue</span> <span class="hljs-title function_">getPropertyValue</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> propertyName</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-title class_">PropertyValue</span> pv : <span class="hljs-variable language_">this</span>.<span class="hljs-property">propertyValueList</span>) &#123;<br>            <span class="hljs-keyword">if</span> (pv.<span class="hljs-title function_">getName</span>().<span class="hljs-title function_">equals</span>(propertyName)) &#123;<br>                <span class="hljs-keyword">return</span> pv;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>这个类的作用就是创建出两个用于传递类中属性信息的类，因为属性可能会有很多，所以还需要定义一个集合包装下。</li></ul><h3 id="3-豆类定义补全"><a href="#3-豆类定义补全" class="headerlink" title="3. 豆类定义补全"></a>3. 豆类定义补全</h3><p><strong>cn.bugstack.springframework.beans.factory.config.BeanDefinition</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> BeanDefinition &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">Class</span> beanClass;<br><br>    <span class="hljs-keyword">private</span> PropertyValues propertyValues;<br><br>    <span class="hljs-keyword">public</span> BeanDefinition(<span class="hljs-keyword">Class</span> beanClass) &#123;<br>        <span class="hljs-keyword">this</span>.beanClass = beanClass;<br>        <span class="hljs-keyword">this</span>.propertyValues = <span class="hljs-keyword">new</span> PropertyValues();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> BeanDefinition(<span class="hljs-keyword">Class</span> beanClass, PropertyValues propertyValues) &#123;<br>        <span class="hljs-keyword">this</span>.beanClass = beanClass;<br>        <span class="hljs-keyword">this</span>.propertyValues = propertyValues != <span class="hljs-keyword">null</span> ? propertyValues : <span class="hljs-keyword">new</span> PropertyValues();<br>    &#125;<br>    <br>    <span class="hljs-comment">// ...get/set</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在Bean注册的过程中是需要传递Bean的信息，在前面几个章节的测试中都有所说明<code>new BeanDefinition(UserService.class, propertyValues);</code></li><li>所以为了把属性确定替换Bean定义，所以这里填充了PropertyValues属性，同时把两个构造函数做了一些简单的优化，避免后面进行循环时还得判断属性填充是否为空。</li></ul><h3 id="4-Bean属性填充"><a href="#4-Bean属性填充" class="headerlink" title="4.Bean属性填充"></a>4.Bean属性填充</h3><p><strong>cn.bugstack.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractAutowireCapableBeanFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">AbstractBeanFactory</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">InstantiationStrategy</span> instantiationStrategy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CglibSubclassingInstantiationStrategy</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">createBean</span>(<span class="hljs-title class_">String</span> beanName, <span class="hljs-title class_">BeanDefinition</span> beanDefinition, <span class="hljs-title class_">Object</span>[] args) throws <span class="hljs-title class_">BeansException</span> &#123;<br>        <span class="hljs-title class_">Object</span> bean = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            bean = <span class="hljs-title function_">createBeanInstance</span>(beanDefinition, beanName, args);<br>            <span class="hljs-comment">// 给 Bean 填充属性</span><br>            <span class="hljs-title function_">applyPropertyValues</span>(beanName, bean, beanDefinition);<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeansException</span>(<span class="hljs-string">&quot;Instantiation of bean failed&quot;</span>, e);<br>        &#125;<br><br>        <span class="hljs-title function_">addSingleton</span>(beanName, bean);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">createBeanInstance</span>(<span class="hljs-params">BeanDefinition beanDefinition, <span class="hljs-built_in">String</span> beanName, <span class="hljs-built_in">Object</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">Constructor</span> constructorToUse = <span class="hljs-literal">null</span>;<br>        <span class="hljs-title class_">Class</span>&lt;?&gt; beanClass = beanDefinition.<span class="hljs-title function_">getBeanClass</span>();<br>        <span class="hljs-title class_">Constructor</span>&lt;?&gt;[] declaredConstructors = beanClass.<span class="hljs-title function_">getDeclaredConstructors</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-title class_">Constructor</span> ctor : declaredConstructors) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != args &amp;&amp; ctor.<span class="hljs-title function_">getParameterTypes</span>().<span class="hljs-property">length</span> == args.<span class="hljs-property">length</span>) &#123;<br>                constructorToUse = ctor;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">getInstantiationStrategy</span>().<span class="hljs-title function_">instantiate</span>(beanDefinition, beanName, constructorToUse, args);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Bean 属性填充</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">applyPropertyValues</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> beanName, <span class="hljs-built_in">Object</span> bean, BeanDefinition beanDefinition</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-title class_">PropertyValues</span> propertyValues = beanDefinition.<span class="hljs-title function_">getPropertyValues</span>();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-title class_">PropertyValue</span> propertyValue : propertyValues.<span class="hljs-title function_">getPropertyValues</span>()) &#123;<br><br>                <span class="hljs-title class_">String</span> name = propertyValue.<span class="hljs-title function_">getName</span>();<br>                <span class="hljs-title class_">Object</span> value = propertyValue.<span class="hljs-title function_">getValue</span>();<br><br>                <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">BeanReference</span>) &#123;<br>                    <span class="hljs-comment">// A 依赖 B，获取 B 的实例化</span><br>                    <span class="hljs-title class_">BeanReference</span> beanReference = (<span class="hljs-title class_">BeanReference</span>) value;<br>                    value = <span class="hljs-title function_">getBean</span>(beanReference.<span class="hljs-title function_">getBeanName</span>());<br>                &#125;<br>                <span class="hljs-comment">// 属性填充</span><br>                <span class="hljs-title class_">BeanUtil</span>.<span class="hljs-title function_">setFieldValue</span>(bean, name, value);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeansException</span>(<span class="hljs-string">&quot;Error setting property values：&quot;</span> + beanName);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">InstantiationStrategy</span> <span class="hljs-title function_">getInstantiationStrategy</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> instantiationStrategy;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setInstantiationStrategy</span>(<span class="hljs-params">InstantiationStrategy instantiationStrategy</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">instantiationStrategy</span> = instantiationStrategy;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>这类的内容有点长，主要包括三个方法：createBean、createBeanInstance、applyPropertyValues，这里我们主要关注 createBean 的方法中调用的 applyPropertyValues 方法。</li><li>在 applyPropertyValues 中，通过获取<code>beanDefinition.getPropertyValues()</code>循环进行属性填充操作，如果遇到的是 BeanReference，那么就需要递归获取 Bean 实例，调用 getBean 方法。</li><li>当把完成依赖的Bean对象创建后，会递归现在属性填充中。这里需要注意我们并没有去处理循环依赖的问题，这部分内容增加，后续补充。<em>BeanUtil.setFieldValue(bean, name, value)是hutool-all工具类中的方法，你也可以自己实现</em></li></ul><h2 id="五、测试"><a href="#五、测试" class="headerlink" title="五、测试"></a><strong>五、测试</strong></h2><h3 id="1-事前准备"><a href="#1-事前准备" class="headerlink" title="1. 事前准备"></a>1. 事前准备</h3><p><strong>cn.bugstack.springframework.test.bean.UserDao</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDao</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;<span class="hljs-keyword">String</span>, <span class="hljs-keyword">String</span>&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-type">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        hashMap.put(<span class="hljs-string">&quot;10001&quot;</span>, <span class="hljs-string">&quot;小傅哥&quot;</span>);<br>        hashMap.put(<span class="hljs-string">&quot;10002&quot;</span>, <span class="hljs-string">&quot;八杯水&quot;</span>);<br>        hashMap.put(<span class="hljs-string">&quot;10003&quot;</span>, <span class="hljs-string">&quot;阿毛&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> queryUserName(<span class="hljs-keyword">String</span> uId) &#123;<br>        <span class="hljs-keyword">return</span> hashMap.<span class="hljs-keyword">get</span>(uId);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>cn.bugstack.springframework.test.bean.UserService</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String uId;<br><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">queryUserInfo</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;查询用户信息：&quot;</span> + userDao.queryUserName(uId));<br>    &#125;<br><br>    <span class="hljs-comment">// ...get/set</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Dao、Service，是我们平时开发经常使用的场景。在 UserService 中注入 UserDao，这样就能体现出Bean属性的依赖了。</li></ul><h3 id="2-测试示例"><a href="#2-测试示例" class="headerlink" title="2. 测试示例"></a>2. 测试示例</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> void test_BeanFactory() &#123;<br>    <span class="hljs-comment">// 1.初始化 BeanFactory</span><br>    DefaultListableBeanFactory beanFactory = <span class="hljs-keyword">new</span> <span class="hljs-type">DefaultListableBeanFactory</span>();  <br><br>    <span class="hljs-comment">// 2. UserDao 注册</span><br>    beanFactory.registerBeanDefinition(<span class="hljs-string">&quot;userDao&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-type">BeanDefinition</span>(UserDao.class));   <br><br>    <span class="hljs-comment">// 3. UserService 设置属性[uId、userDao]</span><br>    PropertyValues propertyValues = <span class="hljs-keyword">new</span> <span class="hljs-type">PropertyValues</span>();<br>    propertyValues.addPropertyValue(<span class="hljs-keyword">new</span> <span class="hljs-type">PropertyValue</span>(<span class="hljs-string">&quot;uId&quot;</span>, <span class="hljs-string">&quot;10001&quot;</span>));<br>    propertyValues.addPropertyValue(<span class="hljs-keyword">new</span> <span class="hljs-type">PropertyValue</span>(<span class="hljs-string">&quot;userDao&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-type">BeanReference</span>(<span class="hljs-string">&quot;userDao&quot;</span>)));  <br><br>    <span class="hljs-comment">// 4. UserService 注入bean</span><br>    BeanDefinition beanDefinition = <span class="hljs-keyword">new</span> <span class="hljs-type">BeanDefinition</span>(UserService.class, propertyValues);<br>    beanFactory.registerBeanDefinition(<span class="hljs-string">&quot;userService&quot;</span>, beanDefinition);    <br><br>    <span class="hljs-comment">// 5. UserService 获取bean</span><br>    UserService userService = (UserService) beanFactory.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br>    userService.queryUserInfo();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>与直接获取 Bean 对象不同，这个时候我们还需要先把 userDao 注入到 Bean 容器中。<code>beanFactory.registerBeanDefinition(&quot;userDao&quot;, new BeanDefinition(UserDao.class));</code></li><li>接下来就是属性填充的操作了，一种是普通属性<code>new PropertyValue(&quot;uId&quot;, &quot;10001&quot;)</code>，另外一种是对象属性<code>new PropertyValue(&quot;userDao&quot;,new BeanReference(&quot;userDao&quot;))</code></li><li>接下来的操作就简单了，只不过是正常获取 userService 对象，调用方法即可。</li></ul><h3 id="3-测试结果"><a href="#3-测试结果" class="headerlink" title="3. 测试结果"></a>3. 测试结果</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">查询用户信息：小傅哥<br><br>Process finished with <span class="hljs-keyword">exit</span> code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>[文章引用]: <a href="https://mp.weixin.qq.com/s?__biz=MzIxMDAwMDAxMw==&amp;mid=2650730594&amp;idx=1&amp;sn=6c02c7a188f847db1c249d732f088dd3&amp;chksm=8f611180b8169896f607a0d1a135e11090a8386c9a4ef024560c63100460dd3781a2d9e236e2&amp;cur_album_id=1871634116341743621&amp;scene=189#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzIxMDAwMDAxMw==&amp;mid=2650730594&amp;idx=1&amp;sn=6c02c7a188f847db1c249d732f088dd3&amp;chksm=8f611180b8169896f607a0d1a135e11090a8386c9a4ef024560c63100460dd3781a2d9e236e2&amp;cur_album_id=1871634116341743621&amp;scene=189#wechat_redirect</a>“《Spring手撸专栏》第5章：一鸣惊人，为Bean对象注入属性和依赖Bean的功能实现”</p>]]></content>
    
    
    <categories>
      
      <category>手撸spring系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手撸Spring：基于DeclaredConstructor实现含构造函数的类实例化策略（Day3）</title>
    <link href="/2023/12/31/%E6%89%8B%E6%92%B8Spring%EF%BC%9Aday3/"/>
    <url>/2023/12/31/%E6%89%8B%E6%92%B8Spring%EF%BC%9Aday3/</url>
    
    <content type="html"><![CDATA[<h2 id="一、目标"><a href="#一、目标" class="headerlink" title="一、目标"></a>一、目标</h2><p>实例化方式并没有考虑构造函数的入参，接下来将<strong>构造函数的入参加入作为实例化方式</strong></p><h2 id="二、设计"><a href="#二、设计" class="headerlink" title="二、设计"></a>二、设计</h2><p>填平这个坑的技术设计主要考虑两部分，一个是串流程从哪合理的把构造函数的入参信息传递到实例化操作里，另外一个是怎么去实例化含有构造函数的对象。</p><p><img src="/../img/%E6%89%8B%E6%92%B8Spring%E7%B3%BB%E5%88%97/image-20231231213835139.png" alt="image-20231231213835139"></p><ul><li>参考 Spring Bean 容器源码的实现方式，在 BeanFactory 中添加 <code>Object getBean(String name, Object... args)</code> 接口，这样就可以在获取 Bean 时把构造函数的入参信息传递进去了。</li><li>另外一个核心的内容是使用什么方式来创建含有构造函数的 Bean 对象呢？这里有两种方式可以选择，一个是基于 Java 本身自带的方法 <code>DeclaredConstructor</code>，另外一个是使用 Cglib 来动态创建 Bean 对象。<em>Cglib 是基于字节码框架 ASM 实现，所以你也可以直接通过 ASM 操作指令码来创建对象</em></li></ul><h2 id="三、实现"><a href="#三、实现" class="headerlink" title="三、实现"></a>三、实现</h2><h3 id="1-工程结构"><a href="#1-工程结构" class="headerlink" title="1. 工程结构"></a>1. 工程结构</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs stylus">small-spring-step-<span class="hljs-number">03</span><br>└── <span class="hljs-attribute">src</span><br>    ├── <span class="hljs-selector-tag">main</span><br>    │   └── java<br>    │       └── cn<span class="hljs-selector-class">.bugstack</span><span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.beans</span><br>    │           ├── factory<br>    │           │   ├── factory<br>    │           │   │   ├── BeanDefinition<span class="hljs-selector-class">.java</span><br>    │           │   │   └── SingletonBeanRegistry<span class="hljs-selector-class">.java</span><br>    │           │   ├── support<br>    │           │   │   ├── AbstractAutowireCapableBeanFactory<span class="hljs-selector-class">.java</span><br>    │           │   │   ├── AbstractBeanFactory<span class="hljs-selector-class">.java</span><br>    │           │   │   ├── BeanDefinitionRegistry<span class="hljs-selector-class">.java</span><br>    │           │   │   ├── CglibSubclassingInstantiationStrategy<span class="hljs-selector-class">.java</span><br>    │           │   │   ├── DefaultListableBeanFactory<span class="hljs-selector-class">.java</span><br>    │           │   │   ├── DefaultSingletonBeanRegistry<span class="hljs-selector-class">.java</span><br>    │           │   │   ├── InstantiationStrategy<span class="hljs-selector-class">.java</span><br>    │           │   │   └── SimpleInstantiationStrategy<span class="hljs-selector-class">.java</span><br>    │           │   └── BeanFactory<span class="hljs-selector-class">.java</span><br>    │           └── BeansException<span class="hljs-selector-class">.java</span><br>    └── test<br>        └── java<br>            └── cn<span class="hljs-selector-class">.bugstack</span><span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.test</span><br>                ├── bean<br>                │   └── UserService<span class="hljs-selector-class">.java</span><br>                └── ApiTest.java<br></code></pre></td></tr></table></figure><p>Spring Bean 容器类关系，如图 4-2</p><p><img src="/../img/%E6%89%8B%E6%92%B8Spring%E7%B3%BB%E5%88%97/image-20231231214159370.png" alt="image-20231231214159370"></p><p>现有工程中添加 InstantiationStrategy 实例化策略接口，以及补充相应的 getBean 入参信息，让外部调用时可以传递构造函数的入参并顺利实例化。</p><h3 id="2-新增-getBean-接口"><a href="#2-新增-getBean-接口" class="headerlink" title="2. 新增 getBean 接口"></a>2. 新增 getBean 接口</h3><p><strong>cn.bugstack.springframework.beans.factory.BeanFactory</strong></p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> interface BeanFactory &#123;<br><br>    <span class="hljs-built_in">Object</span> <span class="hljs-title function_">getBean</span>(<span class="hljs-built_in">String</span> name) <span class="hljs-keyword">throws</span> BeansException;<br><br>    <span class="hljs-built_in">Object</span> <span class="hljs-title function_">getBean</span>(<span class="hljs-built_in">String</span> name, <span class="hljs-built_in">Object</span>... args) <span class="hljs-keyword">throws</span> BeansException;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>BeanFactory 中我们重载了一个含有入参信息 args 的 getBean 方法，这样就可以方便的传递入参给构造函数实例化了。</li></ul><h3 id="3-定义实例化策略接口"><a href="#3-定义实例化策略接口" class="headerlink" title="3. 定义实例化策略接口"></a>3. 定义实例化策略接口</h3><p><strong>cn.bugstack.springframework.beans.factory.support.InstantiationStrategy</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">public interface <span class="hljs-keyword">InstantiationStrategy </span>&#123;<br><br>    Object <span class="hljs-keyword">instantiate(BeanDefinition </span><span class="hljs-keyword">beanDefinition, </span>String <span class="hljs-keyword">beanName, </span>Constructor ctor, Object[] args) throws <span class="hljs-keyword">BeansException;</span><br><span class="hljs-keyword"></span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在实例化接口 instantiate 方法中添加必要的入参信息，包括：beanDefinition、 beanName、ctor、args</li><li>其中 Constructor 你可能会有一点陌生，它是 java.lang.reflect 包下的 Constructor 类，里面包含了一些必要的类信息，有这个参数的目的就是为了拿到符合入参信息相对应的构造函数。</li><li>而 args 就是一个具体的入参信息了，最终实例化时候会用到。</li></ul><h3 id="4-JDK-实例化"><a href="#4-JDK-实例化" class="headerlink" title="4. JDK 实例化"></a>4. JDK 实例化</h3><p><strong>cn.bugstack.springframework.beans.factory.support.SimpleInstantiationStrategy</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleInstantiationStrategy</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">InstantiationStrategy</span></span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object instantiate(BeanDefinition beanDefinition, <span class="hljs-keyword">String</span> beanName, Constructor ctor, Object[] args) throws BeansException &#123;<br>        Class clazz = beanDefinition.getBeanClass();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != ctor) &#123;<br>                <span class="hljs-keyword">return</span> clazz.getDeclaredConstructor(ctor.getParameterTypes()).<span class="hljs-keyword">new</span><span class="hljs-type">Instance</span>(args);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> clazz.getDeclaredConstructor().<span class="hljs-keyword">new</span><span class="hljs-type">Instance</span>();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">BeansException</span>(<span class="hljs-string">&quot;Failed to instantiate [&quot;</span> + clazz.getName() + <span class="hljs-string">&quot;]&quot;</span>, e);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>首先通过 beanDefinition 获取 Class 信息，这个 Class 信息是在 Bean 定义的时候传递进去的。</li><li>接下来判断 ctor 是否为空，如果为空则是无构造函数实例化，否则就是需要有构造函数的实例化。</li><li>这里我们重点关注有构造函数的实例化，实例化方式为 <code>clazz.getDeclaredConstructor(ctor.getParameterTypes()).newInstance(args);</code>，把入参信息传递给 newInstance 进行实例化。</li></ul><h3 id="5-Cglib-实例化"><a href="#5-Cglib-实例化" class="headerlink" title="5. Cglib 实例化"></a>5. Cglib 实例化</h3><p><strong>cn.bugstack.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy</strong></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CglibSubclassingInstantiationStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InstantiationStrategy</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function">Object <span class="hljs-title">instantiate</span><span class="hljs-params">(BeanDefinition beanDefinition, String beanName, Constructor ctor, Object[] args)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>        Enhancer enhancer = <span class="hljs-keyword">new</span> Enhancer();<br>        enhancer.setSuperclass(beanDefinition.getBeanClass());<br>        enhancer.setCallback(<span class="hljs-keyword">new</span> NoOp() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;<br>                <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.<span class="hljs-title">hashCode</span><span class="hljs-params">()</span></span>;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == ctor) <span class="hljs-function"><span class="hljs-keyword">return</span> enhancer.<span class="hljs-title">create</span><span class="hljs-params">()</span></span>;<br>        <span class="hljs-keyword">return</span> enhancer.create(ctor.getParameterTypes(), args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>其实 Cglib 创建有构造函数的 Bean 也非常方便，在这里我们更加简化的处理了，如果你阅读 Spring 源码还会看到 CallbackFilter 等实现，不过我们目前的方式并不会影响创建。</li></ul><h3 id="6-创建策略调用"><a href="#6-创建策略调用" class="headerlink" title="6. 创建策略调用"></a>6. 创建策略调用</h3><p><strong>cn.bugstack.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractAutowireCapableBeanFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractBeanFactory</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">InstantiationStrategy</span> instantiationStrategy = <span class="hljs-keyword">new</span> <span class="hljs-type">CglibSubclassingInstantiationStrategy</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">Object</span> createBean(<span class="hljs-type">String</span> beanName, <span class="hljs-type">BeanDefinition</span> beanDefinition, <span class="hljs-type">Object</span>[] args) <span class="hljs-keyword">throws</span> <span class="hljs-type">BeansException</span> &#123;<br>        <span class="hljs-type">Object</span> bean = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            bean = createBeanInstance(beanDefinition, beanName, args);<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-type">Exception</span> e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">BeansException</span>(<span class="hljs-string">&quot;Instantiation of bean failed&quot;</span>, e);<br>        &#125;<br><br>        addSingleton(beanName, bean);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">Object</span> createBeanInstance(<span class="hljs-type">BeanDefinition</span> beanDefinition, <span class="hljs-type">String</span> beanName, <span class="hljs-type">Object</span>[] args) &#123;<br>        <span class="hljs-type">Constructor</span> constructorToUse = <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Class</span>&lt;?&gt; beanClass = beanDefinition.getBeanClass();<br>        <span class="hljs-type">Constructor</span>&lt;?&gt;[] declaredConstructors = beanClass.getDeclaredConstructors();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Constructor</span> ctor : declaredConstructors) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != args &amp;&amp; ctor.getParameterTypes().length == args.length) &#123;<br>                constructorToUse = ctor;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> getInstantiationStrategy().instantiate(beanDefinition, beanName, constructorToUse, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>首先在 AbstractAutowireCapableBeanFactory 抽象类中定义了一个创建对象的实例化策略属性类 <code>InstantiationStrategy instantiationStrategy</code>，这里我们选择了 Cglib 的实现类。</li><li>接下来抽取 <code>createBeanInstance</code> 方法，在这个方法中需要注意 Constructor 代表了你有多少个构造函数，通过 beanClass.getDeclaredConstructors() 方式可以获取到你所有的构造函数，是一个集合。</li><li>接下来就需要循环比对出构造函数集合与入参信息 <code>args</code> 的匹配情况，这里我们对比的方式比较简单，只是一个数量对比，而实际 Spring 源码中还需要比对入参类型，否则相同数量不同入参类型的情况，就会抛异常了。</li></ul><h2 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h2><h3 id="1-事先准备"><a href="#1-事先准备" class="headerlink" title="1. 事先准备"></a>1. 事先准备</h3><p><strong>cn.bugstack.springframework.test.bean.UserService</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">UserService</span>(<span class="hljs-title class_">String</span> name) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">queryUserInfo</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;查询用户信息：&quot;</span> + name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        final <span class="hljs-title class_">StringBuilder</span> sb = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;&quot;</span>);<br>        sb.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">append</span>(name);<br>        <span class="hljs-keyword">return</span> sb.<span class="hljs-title function_">toString</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>这里唯一多在 UserService 中添加的就是一个有 name 入参的构造函数，方便我们验证这样的对象是否能被实例化。</li></ul><h3 id="2-测试用例"><a href="#2-测试用例" class="headerlink" title="2. 测试用例"></a>2. 测试用例</h3><p><strong>cn.bugstack.springframework.test.ApiTest</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test_BeanFactory</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1.初始化 BeanFactory</span><br>    <span class="hljs-type">DefaultListableBeanFactory</span> <span class="hljs-variable">beanFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultListableBeanFactory</span>();<br><br>    <span class="hljs-comment">// 2. 注入bean</span><br>    <span class="hljs-type">BeanDefinition</span> <span class="hljs-variable">beanDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanDefinition</span>(UserService.class);<br>    beanFactory.registerBeanDefinition(<span class="hljs-string">&quot;userService&quot;</span>, beanDefinition);<br><br>    <span class="hljs-comment">// 3.获取bean</span><br>    <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> (UserService) beanFactory.getBean(<span class="hljs-string">&quot;userService&quot;</span>, <span class="hljs-string">&quot;小傅哥&quot;</span>);<br>    userService.queryUserInfo();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在此次的单元测试中除了包括；Bean 工厂、注册 Bean、获取 Bean，三个步骤，还额外增加了一次对象的获取和调用。这里主要测试验证单例对象的是否正确的存放到了缓存中。</li><li>此外与上一章节测试过程中不同的是，我们把 UserService.class 传递给了 BeanDefinition 而不是像上一章节那样直接 new UserService() 操作。</li></ul><h3 id="3-测试结果"><a href="#3-测试结果" class="headerlink" title="3. 测试结果"></a>3. 测试结果</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">查询用户信息：小傅哥<br><br>Process finished with <span class="hljs-keyword">exit</span> code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ul><li>从测试结果来看，最大的变化就是可以满足带有构造函数的对象，可以被实例化了。</li></ul><p>[文章引用]: <a href="https://mp.weixin.qq.com/s?__biz=MzIxMDAwMDAxMw==&amp;mid=2650730583&amp;idx=1&amp;sn=79df973accd3e05e2789792d8155a94b&amp;chksm=8f6111b5b81698a3babffe182241907ecfb203668858a279dbeb1a7450d8629fcacdb656b783&amp;cur_album_id=1871634116341743621&amp;scene=189#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzIxMDAwMDAxMw==&amp;mid=2650730583&amp;idx=1&amp;sn=79df973accd3e05e2789792d8155a94b&amp;chksm=8f6111b5b81698a3babffe182241907ecfb203668858a279dbeb1a7450d8629fcacdb656b783&amp;cur_album_id=1871634116341743621&amp;scene=189#wechat_redirect</a>“《Spring 手撸专栏》第 4 章：崭露头角，基于Cglib实现含构造函数的类实例化策略”</p>]]></content>
    
    
    <categories>
      
      <category>手撸spring系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手撸Spring：运用设计模式，实现 Bean 的定义、注册、获取（Day2）</title>
    <link href="/2023/12/31/%E6%89%8B%E6%92%B8Spring%EF%BC%9ADay2/"/>
    <url>/2023/12/31/%E6%89%8B%E6%92%B8Spring%EF%BC%9ADay2/</url>
    
    <content type="html"><![CDATA[<h2 id="一、目标"><a href="#一、目标" class="headerlink" title="一、目标"></a>一、目标</h2><p>对已实现的 Spring Bean 容器进行功能完善，实现 Bean 容器关于 <strong>Bean 对象的注册和获取</strong>。</p><h2 id="二、设计"><a href="#二、设计" class="headerlink" title="二、设计"></a>二、设计</h2><p>将 Spring Bean 容器完善起来，首先非常重要的一点是在 <strong>Bean 注册的时候只注册一个类信息</strong>，而不会直接把实例化信息注册到 Spring 容器中。那么就需要<strong>修改 BeanDefinition 中的属性 Object 为 Class</strong>，接下来在需要做的就是在获取 Bean 对象时需要<strong>处理 Bean 对象的实例化操作</strong>以及<strong>判断当前单例对象在容器中是否已经缓存</strong>起来了。整体设计如图 3-1</p><p><img src="/../img/%E6%89%8B%E6%92%B8Spring%E7%B3%BB%E5%88%97/image-20231231013033695.png" alt="image-20231231013033695"></p><h2 id="三、实现"><a href="#三、实现" class="headerlink" title="三、实现"></a>三、实现</h2><h3 id="1-工程结构"><a href="#1-工程结构" class="headerlink" title="1. 工程结构"></a>1. 工程结构</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs stylus">small-spring-step-<span class="hljs-number">02</span><br>└── <span class="hljs-attribute">src</span><br>    ├── <span class="hljs-selector-tag">main</span><br>    │   └── java<br>    │       └── cn<span class="hljs-selector-class">.bugstack</span><span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.beans</span><br>    │           ├── factory<br>    │           │   ├── factory<br>    │           │   │   ├── BeanDefinition<span class="hljs-selector-class">.java</span><br>    │           │   │   └── SingletonBeanRegistry<span class="hljs-selector-class">.java</span><br>    │           │   ├── support<br>    │           │   │   ├── AbstractAutowireCapableBeanFactory<span class="hljs-selector-class">.java</span><br>    │           │   │   ├── AbstractBeanFactory<span class="hljs-selector-class">.java</span><br>    │           │   │   ├── BeanDefinitionRegistry<span class="hljs-selector-class">.java</span><br>    │           │   │   ├── DefaultListableBeanFactory<span class="hljs-selector-class">.java</span><br>    │           │   │   └── DefaultSingletonBeanRegistry<span class="hljs-selector-class">.java</span><br>    │           │   └── BeanFactory<span class="hljs-selector-class">.java</span><br>    │           └── BeansException<span class="hljs-selector-class">.java</span><br>    └── test<br>        └── java<br>            └── cn<span class="hljs-selector-class">.bugstack</span><span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.test</span><br>                ├── bean<br>                │   └── UserService<span class="hljs-selector-class">.java</span><br>                └── ApiTest.java<br></code></pre></td></tr></table></figure><p>Spring Bean 容器类关系，如图 3-2</p><p><img src="/../img/%E6%89%8B%E6%92%B8Spring%E7%B3%BB%E5%88%97/image-20231231013250315.png" alt="image-20231231013250315"></p><p>虽然这一章节关于 Spring Bean 容器的功能实现与 <code>Spring 源码</code>中还有不少的差距，但以目前实现结果的类关系图来看，其实已经具备了一定的设计复杂性，这些复杂的类关系设计在各个接口定义和实现以及在抽象类继承中都有所体现，例如：</p><ul><li><strong>BeanFactory</strong> 的定义由 <strong>AbstractBeanFactory 抽象类实现接口的 getBean 方法</strong></li><li>而 <strong>AbstractBeanFactory 又继承了实现了 SingletonBeanRegistry 的DefaultSingletonBeanRegistry 类</strong>。这样 <strong>AbstractBeanFactory 抽象类就具备了单例 Bean 的注册功能</strong>。</li><li><strong>AbstractBeanFactory</strong> 中又定义了两个抽象方法：<strong>getBeanDefinition(String beanName)、createBean(String beanName, BeanDefinition beanDefinition)</strong> ，而这<strong>两个抽象方法分别由 DefaultListableBeanFactory、AbstractAutowireCapableBeanFactory 实现</strong>。</li><li>最终 <strong>DefaultListableBeanFactory</strong> 还会<strong>继承抽象类 AbstractAutowireCapableBeanFactory</strong> 也就可以调用抽象类中的 createBean 方法了。</li></ul><h3 id="2-BeanDefinition-定义"><a href="#2-BeanDefinition-定义" class="headerlink" title="2. BeanDefinition 定义"></a>2. BeanDefinition 定义</h3><p><strong>cn.bugstack.springframework.beans.factory.config.BeanDefinition</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> BeanDefinition &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">Class</span> beanClass;<br><br>    <span class="hljs-keyword">public</span> BeanDefinition(<span class="hljs-keyword">Class</span> beanClass) &#123;<br>        <span class="hljs-keyword">this</span>.beanClass = beanClass;<br>    &#125;<br>    <span class="hljs-comment">// ...get/set</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在 Bean 定义类中已经把上一章节中的 Object bean 替换为 Class，这样就可以把 Bean 的实例化操作放到容器中处理了。<em>如果你有仔细阅读过上一章并做了相应的测试，那么你会发现 Bean 的实例化操作是放在初始化调用阶段传递给 BeanDefinition 构造函数的。</em></li></ul><h3 id="3-单例注册接口定义和实现"><a href="#3-单例注册接口定义和实现" class="headerlink" title="3. 单例注册接口定义和实现"></a>3. 单例注册接口定义和实现</h3><p><strong>cn.bugstack.springframework.beans.factory.config.SingletonBeanRegistry</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">interface</span> <span class="hljs-title">SingletonBeanRegistry</span> </span>&#123;<br><br>    Object getSingleton(<span class="hljs-keyword">String</span> beanName);<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>这个类比较简单主要是定义了一个获取单例对象的接口。</li></ul><p><strong>cn.bugstack.springframework.beans.factory.config.DefaultSingletonBeanRegistry</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultSingletonBeanRegistry</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SingletonBeanRegistry</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt; singletonObjects = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">getSingleton</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> beanName</span>) &#123;<br>        <span class="hljs-keyword">return</span> singletonObjects.<span class="hljs-title function_">get</span>(beanName);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">addSingleton</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> beanName, <span class="hljs-built_in">Object</span> singletonObject</span>) &#123;<br>        singletonObjects.<span class="hljs-title function_">put</span>(beanName, singletonObject);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在 DefaultSingletonBeanRegistry 中主要实现 getSingleton 方法，同时实现了一个受保护的 addSingleton 方法，这个方法可以被继承此类的其他类调用。包括：AbstractBeanFactory 以及继承的 DefaultListableBeanFactory 调用。</li></ul><h3 id="4-抽象类定义模板方法-AbstractBeanFactory"><a href="#4-抽象类定义模板方法-AbstractBeanFactory" class="headerlink" title="4. 抽象类定义模板方法(AbstractBeanFactory)"></a>4. 抽象类定义模板方法(AbstractBeanFactory)</h3><p><strong>cn.bugstack.springframework.beans.factory.support.AbstractBeanFactory</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractBeanFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DefaultSingletonBeanRegistry</span> <span class="hljs-title">implements</span> <span class="hljs-title">BeanFactory</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    public <span class="hljs-type">Object</span> getBean(<span class="hljs-type">String</span> name) <span class="hljs-keyword">throws</span> <span class="hljs-type">BeansException</span> &#123;<br>        <span class="hljs-type">Object</span> bean = getSingleton(name);<br>        <span class="hljs-keyword">if</span> (bean != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> bean;<br>        &#125;<br><br>        <span class="hljs-type">BeanDefinition</span> beanDefinition = getBeanDefinition(name);<br>        <span class="hljs-keyword">return</span> createBean(name, beanDefinition);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">BeanDefinition</span> getBeanDefinition(<span class="hljs-type">String</span> beanName) <span class="hljs-keyword">throws</span> <span class="hljs-type">BeansException</span>;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">Object</span> createBean(<span class="hljs-type">String</span> beanName, <span class="hljs-type">BeanDefinition</span> beanDefinition) <span class="hljs-keyword">throws</span> <span class="hljs-type">BeansException</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>AbstractBeanFactory 首先继承了 DefaultSingletonBeanRegistry，也就具备了使用单例注册类方法。</li><li>接下来很重要的一点是关于接口 BeanFactory 的实现，在方法 getBean 的实现过程中可以看到，主要是对单例 Bean 对象的获取以及在获取不到时需要拿到 Bean 的定义做相应 Bean 实例化操作。那么 getBean 并没有自身的去实现这些方法，而是只定义了调用过程以及提供了抽象方法，由实现此抽象类的其他类做相应实现。</li><li>后续继承抽象类 AbstractBeanFactory 的类有两个，包括：AbstractAutowireCapableBeanFactory、DefaultListableBeanFactory，这两个类分别做了相应的实现处理，接着往下看。</li></ul><h3 id="5-实例化Bean类-AbstractAutowireCapableBeanFactory"><a href="#5-实例化Bean类-AbstractAutowireCapableBeanFactory" class="headerlink" title="5. 实例化Bean类(AbstractAutowireCapableBeanFactory)"></a>5. 实例化Bean类(AbstractAutowireCapableBeanFactory)</h3><p><strong>cn.bugstack.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractAutowireCapableBeanFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractBeanFactory</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">Object</span> createBean(<span class="hljs-type">String</span> beanName, <span class="hljs-type">BeanDefinition</span> beanDefinition) <span class="hljs-keyword">throws</span> <span class="hljs-type">BeansException</span> &#123;<br>        <span class="hljs-type">Object</span> bean = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            bean = beanDefinition.getBeanClass().newInstance();<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-type">InstantiationException</span> | <span class="hljs-type">IllegalAccessException</span> e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">BeansException</span>(<span class="hljs-string">&quot;Instantiation of bean failed&quot;</span>, e);<br>        &#125;<br><br>        addSingleton(beanName, bean);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在 AbstractAutowireCapableBeanFactory 类中实现了 Bean 的实例化操作 <code>newInstance</code>，其实这块会埋下一个坑，有构造函数入参的对象怎么处理？<em>可以提前思考</em></li><li>在处理完 Bean 对象的实例化后，直接调用 <code>addSingleton</code> 方法存放到单例对象的缓存中去。</li></ul><h3 id="6-核心类实现-DefaultListableBeanFactory"><a href="#6-核心类实现-DefaultListableBeanFactory" class="headerlink" title="6. 核心类实现(DefaultListableBeanFactory)"></a>6. 核心类实现(DefaultListableBeanFactory)</h3><p><strong>cn.bugstack.springframework.beans.factory.support.DefaultSingletonBeanRegistry</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">DefaultListableBeanFactory</span> <span class="hljs-keyword"><span class="hljs-keyword">extends</span> <span class="hljs-type">AbstractAutowireCapableBeanFactory</span></span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">BeanDefinitionRegistry</span></span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Map&lt;<span class="hljs-keyword">String</span>, BeanDefinition&gt; beanDefinitionMap = <span class="hljs-keyword">new</span> <span class="hljs-type">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> void registerBeanDefinition(<span class="hljs-keyword">String</span> beanName, BeanDefinition beanDefinition) &#123;<br>        beanDefinitionMap.put(beanName, beanDefinition);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> BeanDefinition getBeanDefinition(<span class="hljs-keyword">String</span> beanName) throws BeansException &#123;<br>        BeanDefinition beanDefinition = beanDefinitionMap.<span class="hljs-keyword">get</span>(beanName);<br>        <span class="hljs-keyword">if</span> (beanDefinition == <span class="hljs-literal">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">BeansException</span>(<span class="hljs-string">&quot;No bean named &#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27; is defined&quot;</span>);<br>        <span class="hljs-keyword">return</span> beanDefinition;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>DefaultListableBeanFactory 在 Spring 源码中也是一个非常核心的类，在我们目前的实现中也是逐步贴近于源码，与源码类名保持一致。</li><li>DefaultListableBeanFactory 继承了 AbstractAutowireCapableBeanFactory 类，也就具备了接口 BeanFactory 和 AbstractBeanFactory 等一连串的功能实现。<em>所以有时候你会看到一些类的强转，调用某些方法，也是因为你强转的类实现接口或继承了某些类。</em></li><li>除此之外这个类还实现了接口 BeanDefinitionRegistry 中的 registerBeanDefinition(String beanName, BeanDefinition beanDefinition) 方法，当然你还会看到一个 getBeanDefinition 的实现，这个方法我们文中提到过它是抽象类 AbstractBeanFactory 中定义的抽象方法。<em>现在注册Bean定义与获取Bean定义就可以同时使用了，是不感觉这个套路还蛮深的。接口定义了注册，抽象类定义了获取，都集中在 DefaultListableBeanFactory 中的 beanDefinitionMap 里</em></li></ul><h2 id="四、测试用例"><a href="#四、测试用例" class="headerlink" title="四、测试用例"></a>四、测试用例</h2><p><strong>cn.bugstack.springframework.test.ApiTest</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test_BeanFactory</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// 1.初始化 BeanFactory</span><br>    <span class="hljs-type">DefaultListableBeanFactory</span> <span class="hljs-variable">beanFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultListableBeanFactory</span>();<br>    <span class="hljs-comment">// 2.注册 bean</span><br>    <span class="hljs-type">BeanDefinition</span> <span class="hljs-variable">beanDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanDefinition</span>(UserService.class);<br>    beanFactory.registerBeanDefinition(<span class="hljs-string">&quot;userService&quot;</span>, beanDefinition);<br>    <span class="hljs-comment">// 3.第一次获取 bean</span><br>    <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> (UserService) beanFactory.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br>    userService.queryUserInfo();<br>    <span class="hljs-comment">// 4.第二次获取 bean from Singleton</span><br>    <span class="hljs-type">UserService</span> <span class="hljs-variable">userService_singleton</span> <span class="hljs-operator">=</span> (UserService) beanFactory.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br>    userService_singleton.queryUserInfo();<br>&#125;<br></code></pre></td></tr></table></figure><p>具体流程为：</p><ol><li>创建并初始化<strong>DefaultListableBeanFactory（继承BeanFactory）</strong></li><li>将需要<strong>注册的类使用BeanDefinition包装</strong>（保证一致性）</li><li>将<strong>包装好的BeanDefinition</strong>通过<strong>DefaultListableBeanFactory</strong>进行<strong>注册</strong></li><li>第一次获取bean时，将<strong>Bean的实例</strong>放入<strong>singletonObjects（单例对象）</strong>中（通过HashMap置于缓存中），同时返回已实例化的bean</li><li>第二次获取bean时，直接通过<strong>singletonObjects（单例对象）</strong>从缓存得到已存入的bean实例</li></ol><p>[文章部分引用]: <a href="https://mp.weixin.qq.com/s?__biz=MzIxMDAwMDAxMw==&amp;mid=2650730563&amp;idx=1&amp;sn=54f7765a18b974649856842a6f2203a2&amp;chksm=8f6111a1b81698b7ce66aed26180285c9247677263962a95397ce3d3eeb18a27dee53d11be94&amp;cur_album_id=1871634116341743621&amp;scene=189#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzIxMDAwMDAxMw==&amp;mid=2650730563&amp;idx=1&amp;sn=54f7765a18b974649856842a6f2203a2&amp;chksm=8f6111a1b81698b7ce66aed26180285c9247677263962a95397ce3d3eeb18a27dee53d11be94&amp;cur_album_id=1871634116341743621&amp;scene=189#wechat_redirect</a>“《Spring 手撸专栏》第 3 章：初显身手，运用设计模式，实现 Bean 的定义、注册、获取”</p>]]></content>
    
    
    <categories>
      
      <category>手撸spring系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式：模板模式</title>
    <link href="/2023/12/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/12/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h1><p>在模板模式（Template Pattern）中，一个抽象类公开定义了执行它的方法的方式&#x2F;模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><p><strong>主要解决：</strong>一些方法通用，却在每一个子类都重新写了这一方法。</p><p><strong>何时使用：</strong>有一些通用的方法。</p><p><strong>如何解决：</strong>将这些通用算法抽象出来。</p><p><strong>关键代码：</strong>在抽象类实现，其他步骤在子类实现。</p><p><strong>应用实例：</strong> 1、在造房子的时候，地基、走线、水管都一样，只有在建筑的后期才有加壁橱加栅栏等差异。 2、西游记里面菩萨定好的 81 难，这就是一个顶层的逻辑骨架。 3、spring 中对 Hibernate 的支持，将一些已经定好的方法封装起来，比如开启事务、获取 Session、关闭 Session 等，程序员不重复写那些已经规范好的代码，直接丢一个实体就可以保存。</p><p><strong>优点：</strong> 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。</p><p><strong>缺点：</strong>每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。</p><p><strong>使用场景：</strong> 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。</p><p><strong>注意事项：</strong>为防止恶意操作，一般模板方法都加上 final 关键词。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="核心原理：多态"><a href="#核心原理：多态" class="headerlink" title="核心原理：多态"></a>核心原理：多态</h3><p>定义操作的 <em>Game</em> 抽象类，其中，模板方法设置为 final，这样它就不会被重写。<em>Cricket</em> 和 <em>Football</em> 是扩展了 <em>Game</em> 的实体类，它们重写了抽象类的方法。</p><p><em>TemplatePatternDemo</em>，我们的演示类使用 <em>Game</em> 来演示模板模式的用法。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/template_pattern_uml_diagram.jpg" alt="模板模式的 UML 图"></p><h4 id="Game-java"><a href="#Game-java" class="headerlink" title="Game.java"></a>Game.java</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Game</span> &#123;<br>   <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initialize</span>()</span>;<br>   <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">startPlay</span>()</span>;<br>   <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">endPlay</span>()</span>;<br> <br>   <span class="hljs-comment">//模板</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> final <span class="hljs-keyword">void</span> <span class="hljs-title">play</span>()</span>&#123;<br> <br>      <span class="hljs-comment">//初始化游戏</span><br>      initialize();<br> <br>      <span class="hljs-comment">//开始游戏</span><br>      startPlay();<br> <br>      <span class="hljs-comment">//结束游戏</span><br>      endPlay();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Cricket-java"><a href="#Cricket-java" class="headerlink" title="Cricket.java"></a>Cricket.java</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cricket</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Game</span> </span>&#123;<br> <br>   <span class="hljs-meta">@Override</span><br>   void endPlay() &#123;<br>      <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;Cricket Game Finished!&quot;</span>);<br>   &#125;<br> <br>   <span class="hljs-meta">@Override</span><br>   void initialize() &#123;<br>      <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;Cricket Game Initialized! Start playing.&quot;</span>);<br>   &#125;<br> <br>   <span class="hljs-meta">@Override</span><br>   void startPlay() &#123;<br>      <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;Cricket Game Started. Enjoy the game!&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Football-java"><a href="#Football-java" class="headerlink" title="Football.java"></a>Football.java</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Football</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Game</span> </span>&#123;<br> <br>   <span class="hljs-meta">@Override</span><br>   void endPlay() &#123;<br>      <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;Football Game Finished!&quot;</span>);<br>   &#125;<br> <br>   <span class="hljs-meta">@Override</span><br>   void initialize() &#123;<br>      <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;Football Game Initialized! Start playing.&quot;</span>);<br>   &#125;<br> <br>   <span class="hljs-meta">@Override</span><br>   void startPlay() &#123;<br>      <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;Football Game Started. Enjoy the game!&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>[文章部分引用]: <a href="https://www.runoob.com/design-pattern/template-pattern.html">https://www.runoob.com/design-pattern/template-pattern.html</a>“模板模式”</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
      <category>行为模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手撸Spring：定义一个简单的 Spring 容器（Day1）</title>
    <link href="/2023/12/30/%E6%89%8B%E6%92%B8Spring%EF%BC%9ADay1/"/>
    <url>/2023/12/30/%E6%89%8B%E6%92%B8Spring%EF%BC%9ADay1/</url>
    
    <content type="html"><![CDATA[<h2 id="一、目标：定义一个简单的-Spring-容器"><a href="#一、目标：定义一个简单的-Spring-容器" class="headerlink" title="一、目标：定义一个简单的 Spring 容器"></a>一、目标：定义一个简单的 Spring 容器</h2><h3 id="Spring-Bean-容器是什么？"><a href="#Spring-Bean-容器是什么？" class="headerlink" title="Spring Bean 容器是什么？"></a><strong>Spring Bean 容器是什么？</strong></h3><p>Spring <strong>包含并管理应用对象的配置和生命周期</strong>，在这个意义上它是一种用于<strong>承载对象的容器</strong>，你可以<strong>配置你的每个 Bean 对象是如何被创建</strong>的，这些 Bean 可以<strong>创建一个单独的实例或者每次需要时都生成一个新的实例</strong>，以及它们是如何<strong>相互关联构建和使用</strong>的。</p><p>当一个 <strong>Bean 对象被定义存放以后，再由 Spring 统一进行装配</strong>，这个过程包括 <strong>Bean 的初始化、属性填充等</strong>，最终我们就可以完整的使用一个 Bean 实例化后的对象了。</p><h2 id="二、设计：使用HashMap作为-Spring-Bean-容器"><a href="#二、设计：使用HashMap作为-Spring-Bean-容器" class="headerlink" title="二、设计：使用HashMap作为 Spring Bean 容器"></a>二、设计：使用HashMap作为 Spring Bean 容器</h2><p>一个简单的 Spring Bean 容器实现，还需 Bean 的定义、注册、获取三个基本步骤，简化设计如下；</p><p><img src="/../img/%E6%89%8B%E6%92%B8Spring%E7%B3%BB%E5%88%97/image-20231230030219258.png" alt="image-20231230030219258"></p><ul><li>定义：BeanDefinition，可能这是你在查阅 Spring 源码时经常看到的一个类，例如它会包括 singleton、prototype、BeanClassName 等。但目前我们初步实现会更加简单的处理，只定义一个 Object 类型用于存放对象。</li><li>注册：这个过程就相当于我们把数据存放到 HashMap 中，只不过现在 HashMap 存放的是定义了的 Bean 的对象信息。</li><li>获取：最后就是获取对象，Bean 的名字就是key，Spring 容器初始化好 Bean 以后，就可以直接获取了。</li></ul><h2 id="三、实现"><a href="#三、实现" class="headerlink" title="三、实现"></a>三、实现</h2><h3 id="1-工程结构"><a href="#1-工程结构" class="headerlink" title="1. 工程结构"></a>1. 工程结构</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">small-spring-step-<span class="hljs-number">01</span><br>└── <span class="hljs-attribute">src</span><br>    ├── <span class="hljs-selector-tag">main</span><br>    │   └── java<br>    │       └── cn<span class="hljs-selector-class">.chaos</span><span class="hljs-selector-class">.springframework</span><br>    │           ├── BeanDefinition<span class="hljs-selector-class">.java</span><br>    │           └── BeanFactory<span class="hljs-selector-class">.java</span><br>    └── test<br>        └── java<br>            └── cn<span class="hljs-selector-class">.chaos</span><span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.test</span>  <br>                ├── bean<br>                │   └── UserService<span class="hljs-selector-class">.java</span>                <br>                └── ApiTest.java<br></code></pre></td></tr></table></figure><p>Spring Bean 容器类关系，如图 2-2</p><p><img src="/../img/%E6%89%8B%E6%92%B8Spring%E7%B3%BB%E5%88%97/image-20231230030342035.png" alt="image-20231230030342035"></p><p>Spring Bean 容器的整个实现内容非常简单，也仅仅是包括了一个简单的 BeanFactory 和 BeanDefinition，这里的类名称是与 Spring 源码中一致，只不过现在的类实现会相对来说更简化一些，在后续的实现过程中再不断的添加内容。</p><ol><li>BeanDefinition，用于定义 Bean 实例化信息，现在的实现是以一个 Object 存放对象</li><li>BeanFactory，代表了 Bean 对象的工厂，可以存放 Bean 定义到 Map 中以及获取。</li></ol><h3 id="2-Bean-定义"><a href="#2-Bean-定义" class="headerlink" title="2. Bean 定义"></a>2. Bean 定义</h3><p><strong>cn.chaos.springframework.BeanDefinition</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanDefinition</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Object</span> bean;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">BeanDefinition</span>(<span class="hljs-title class_">Object</span> bean) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">bean</span> = bean;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">getBean</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>目前的 Bean 定义中，只有一个 Object 用于存放 Bean 对象。如果感兴趣可以参考 Spring 源码中这个类的信息，名称都是一样的。</li><li>不过在后面陆续的实现中会逐步完善 BeanDefinition 相关属性的填充，例如：SCOPE_SINGLETON、SCOPE_PROTOTYPE、ROLE_APPLICATION、ROLE_SUPPORT、ROLE_INFRASTRUCTURE 以及 Bean Class 信息。</li></ul><h3 id="3-Bean-工厂"><a href="#3-Bean-工厂" class="headerlink" title="3. Bean 工厂"></a><strong>3. Bean 工厂</strong></h3><p><strong>cn.chaos.springframework.BeanFactory</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanFactory</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">BeanDefinition</span>&gt; beanDefinitionMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">getBean</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>) &#123;<br>        <span class="hljs-keyword">return</span> beanDefinitionMap.<span class="hljs-title function_">get</span>(name).<span class="hljs-title function_">getBean</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">registerBeanDefinition</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name, BeanDefinition beanDefinition</span>) &#123;<br>        beanDefinitionMap.<span class="hljs-title function_">put</span>(name, beanDefinition);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在 Bean 工厂的实现中，包括了 Bean 的注册，这里注册的是 Bean 的定义信息。同时在这个类中还包括了获取 Bean 的操作。</li><li>目前的 BeanFactory 仍然是非常简化的实现，但这种简化的实现内容也是整个 Spring 容器中关于 Bean 使用的最终体现结果，只不过实现过程只展示出基本的核心原理。在后续的补充实现中，这个会不断变得庞大。</li></ul><h2 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a><strong>四、测试</strong></h2><h3 id="1-事先准备"><a href="#1-事先准备" class="headerlink" title="1. 事先准备"></a>1. 事先准备</h3><p><strong>cn.chaos.springframework.test.bean.UserService</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> &#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">queryUserInfo</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;查询用户信息&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>这里简单定义了一个 UserService  对象，方便我们后续对 Spring 容器测试。</li></ul><h3 id="2-测试用例"><a href="#2-测试用例" class="headerlink" title="2. 测试用例"></a>2. 测试用例</h3><p><strong>cn.chaos.springframework.test.ApiTest</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test_BeanFactory</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// 1.初始化 BeanFactory</span><br>    <span class="hljs-type">BeanFactory</span> <span class="hljs-variable">beanFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanFactory</span>();<br>    <br>    <span class="hljs-comment">// 2.注册 bean</span><br>    <span class="hljs-type">BeanDefinition</span> <span class="hljs-variable">beanDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanDefinition</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>());<br>    beanFactory.registerBeanDefinition(<span class="hljs-string">&quot;userService&quot;</span>, beanDefinition);<br>    <br>    <span class="hljs-comment">// 3.获取 bean</span><br>    <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> (UserService) beanFactory.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br>    userService.queryUserInfo();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在单测中主要包括初始化 Bean 工厂、注册 Bean、获取 Bean，三个步骤，使用效果上贴近与 Spring，但显得会更简化。</li><li>在 Bean 的注册中，这里是直接把 UserService 实例化后作为入参传递给 BeanDefinition 的，在后续的陆续实现中，我们会把这部分内容放入 Bean 工厂中实现。</li></ul><h3 id="3-测试结果"><a href="#3-测试结果" class="headerlink" title="3. 测试结果"></a>3. 测试结果</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">查询用户信息<br><br>Process finished with <span class="hljs-keyword">exit</span> code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ul><li>通过测试结果可以看到，目前的 Spring Bean 容器案例，已经稍有雏形。</li></ul><p>[文章来源]: <a href="https://mp.weixin.qq.com/s?__biz=MzIxMDAwMDAxMw==&mid=2650730551&idx=1&sn=47cfff26ce11cc40c7cdc6495e409c91&chksm=8f6111d5b81698c36470c3413a8343c9e28b0494">https://mp.weixin.qq.com/s?__biz=MzIxMDAwMDAxMw==&amp;mid=2650730551&amp;idx=1&amp;sn=47cfff26ce11cc40c7cdc6495e409c91&amp;chksm=8f6111d5b81698c36470c3413a8343c9e28b0494</a>“《Spring 手撸专栏》第 2 章：小试牛刀，实现一个简单的Bean容器！”</p>]]></content>
    
    
    <categories>
      
      <category>手撸spring系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vector、Stack、TreeMap、TreeSet</title>
    <link href="/2023/12/28/JAVA%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%9Autil%E7%AF%87%EF%BC%884%EF%BC%89/"/>
    <url>/2023/12/28/JAVA%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%9Autil%E7%AF%87%EF%BC%884%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><ul><li>特点：类实现了一个可增长的对象数组。像数组一样，它包含可以使用整数索引访问的组件。大小可以根据需要增长或缩小，每个暴露的api方法都带有线程锁，保证了线程安全，同时导致性能较差</li><li>默认初始容量：10</li><li>最大容量：Integer.MAX_VALUE - 8</li><li>自动增长策略：以capacityIncrement的int类型参数来决定每次自动增长的长度，若capacityIncrement的值小于等于0，则扩容到原来的2倍，如果2倍仍不够则扩容至所需要的容量</li></ul><hr><h3 id="Stack-继承Vector"><a href="#Stack-继承Vector" class="headerlink" title="Stack(继承Vector)"></a>Stack(继承Vector)</h3><ul><li>特点：实现栈的数据结构（先进后出），继承了Vector，是线程安全的，但是效率较差</li><li>默认初始容量：0</li><li>其他特性与Vector一样，不再赘述</li></ul><hr><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><ul><li>特点：基于红黑树的实现，可通过new comparator自定义自动排序规则</li></ul><hr><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><ul><li>特点：基于基于TreeMap的NavigableSet实现，同样是红黑树结构</li></ul>]]></content>
    
    
    <categories>
      
      <category>JAVA核心源码</category>
      
      <category>util篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>源码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux常用命令（持续更新中）</title>
    <link href="/2023/12/26/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/12/26/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="1、ls命令"><a href="#1、ls命令" class="headerlink" title="1、ls命令"></a>1、ls命令</h3><p>就是 list 的缩写，通过 ls 命令不仅可以查看 linux 文件夹包含的文件，而且可以查看文件权限(包括目录、文件夹、文件权限)查看目录信息等等。</p><p><strong>常用参数搭配：</strong></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">ls</span> -a 列出目录所有文件，包含以.开始的隐藏文件<br><span class="hljs-keyword">ls</span> -A 列出除.及<span class="hljs-string">..</span>的其它文件<br><span class="hljs-keyword">ls</span> -r 反序排列<br><span class="hljs-keyword">ls</span> -t 以文件修改时间排序<br><span class="hljs-keyword">ls</span> -S 以文件大小排序<br><span class="hljs-keyword">ls</span> -h 以易读大小显示<br><span class="hljs-keyword">ls</span> -l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来<br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>(1) 按易读方式按时间反序排序，并显示文件详细信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -lhrt<br></code></pre></td></tr></table></figure><p>(2) 按大小反序显示文件详细信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -lrS<br></code></pre></td></tr></table></figure><p>(3)列出当前目录中所有以”t”开头的目录的详细内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l t*<br></code></pre></td></tr></table></figure><p>(4) 列出文件绝对路径（不包含隐藏文件）</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">ls | sed <span class="hljs-string">&quot;s:^:`pwd`/:&quot;</span><br></code></pre></td></tr></table></figure><p>(5) 列出文件绝对路径（包含隐藏文件）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> <span class="hljs-variable">$pwd</span> -maxdepth 1 | xargs ls -ld<br></code></pre></td></tr></table></figure><h3 id="2、cd-命令"><a href="#2、cd-命令" class="headerlink" title="2、cd 命令"></a>2、cd 命令</h3><p>cd(changeDirectory) 命令语法：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cd</span><span class="hljs-meta"> [目录名]</span><br></code></pre></td></tr></table></figure><p>说明：切换当前目录至 dirName。</p><p><strong>实例：</strong></p><p>（1）进入要目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /<br></code></pre></td></tr></table></figure><p>（2）进入 “home” 目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~<br></code></pre></td></tr></table></figure><p>（3）进入上一次工作路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> -<br></code></pre></td></tr></table></figure><p>（4）把上个命令的参数作为cd参数使用。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cd</span> !<span class="hljs-variable">$</span><br></code></pre></td></tr></table></figure><h3 id="3、pwd-命令"><a href="#3、pwd-命令" class="headerlink" title="3、pwd 命令"></a>3、pwd 命令</h3><p>pwd 命令用于查看当前工作目录路径。</p><p><strong>实例：</strong></p><p>（1）查看当前路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span><br></code></pre></td></tr></table></figure><p>（2）查看软链接的实际路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span> -P<br></code></pre></td></tr></table></figure><p>4、mkdir 命令</p><p>mkdir 命令用于创建文件夹。</p><p>可用选项：</p><ul><li><strong>-m</strong>: 对新建目录设置存取权限，也可以用 chmod 命令设置;</li><li><strong>-p</strong>: 可以是一个路径名称。此时若路径中的某些目录尚不存在,加上此选项后，系统将自动建立好那些尚不在的目录，即一次可以建立多个目录。</li></ul><p><strong>实例：</strong></p><p>（1）当前工作目录下创建名为 t的文件夹</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir t<br></code></pre></td></tr></table></figure><p>（2）在 tmp 目录下创建路径为 test&#x2F;t1&#x2F;t 的目录，若不存在，则创建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /tmp/test/t1/t<br></code></pre></td></tr></table></figure><h3 id="5、rm-命令"><a href="#5、rm-命令" class="headerlink" title="5、rm 命令"></a>5、rm 命令</h3><p>删除一个目录中的一个或多个文件或目录，如果没有使用 -r 选项，则 rm 不会删除目录。如果使用 rm 来删除文件，通常仍可以将该文件恢复原状。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> [选项] 文件…<br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）删除任何 .log 文件，删除前逐一询问确认：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -i *.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>（2）删除 test 子目录及子目录中所有档案删除，并且不用一一确认：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>（3）删除以 -f 开头的文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">rm</span> <span class="hljs-literal">--</span> <span class="hljs-operator">-f</span>*<br></code></pre></td></tr></table></figure><h3 id="6、rmdir-命令"><a href="#6、rmdir-命令" class="headerlink" title="6、rmdir 命令"></a>6、rmdir 命令</h3><p>从一个目录中删除一个或多个子目录项，删除某目录时也必须具有对其父目录的写权限。</p><p><strong>注意</strong>：不能删除非空目录</p><p><strong>实例：</strong></p><p>（1）当 parent 子目录被删除后使它也成为空目录的话，则顺便一并删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rmdir</span> -p parent/child/child11<br></code></pre></td></tr></table></figure><h3 id="7、mv-命令"><a href="#7、mv-命令" class="headerlink" title="7、mv 命令"></a>7、mv 命令</h3><p>移动文件或修改文件名，根据第二参数类型（如目录，则移动文件；如为文件则重命令该文件）。</p><p>当第二个参数为目录时，第一个参数可以是多个以空格分隔的文件或目录，然后移动第一个参数指定的多个文件到第二个参数指定的目录中。</p><p><strong>实例：</strong></p><p>（1）将文件 test.log 重命名为 test1.txt</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">mv <span class="hljs-keyword">test</span>.<span class="hljs-keyword">log</span> test1.txt<br></code></pre></td></tr></table></figure><p>（2）将文件 log1.txt,log2.txt,log3.txt 移动到根的 test3 目录中</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">mv llo<span class="hljs-name">g1.</span>txt lo<span class="hljs-name">g2.</span>txt lo<span class="hljs-name">g3.</span>txt /test<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>（3）将文件 file1 改名为 file2，如果 file2 已经存在，则询问是否覆盖</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">mv -i lo<span class="hljs-name">g1.</span>txt lo<span class="hljs-name">g2.</span>txt<br></code></pre></td></tr></table></figure><p>（4）移动当前文件夹下的所有文件到上一级目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> * ../<br></code></pre></td></tr></table></figure><h3 id="8、cp-命令"><a href="#8、cp-命令" class="headerlink" title="8、cp 命令"></a>8、cp 命令</h3><p>将源文件复制至目标文件，或将多个源文件复制至目标目录。</p><p>注意：命令行复制，如果目标文件已经存在会提示是否覆盖，而在 shell 脚本中，如果不加 -i 参数，则不会提示，而是直接覆盖！</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-i 提示</span><br><span class="hljs-deletion">-r 复制目录及目录内所有项目</span><br><span class="hljs-deletion">-a 复制的文件与原文件时间一样</span><br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）复制 a.txt 到 test 目录下，保持原文件时间，如果原文件存在提示是否覆盖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> -ai a.txt <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>（2）为 a.txt 建立一个链接（快捷方式）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cp -s <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.txt</span> link_a.txt<br></code></pre></td></tr></table></figure><h3 id="9、cat-命令"><a href="#9、cat-命令" class="headerlink" title="9、cat 命令"></a>9、cat 命令</h3><p>cat 主要有三大功能：</p><p>1.一次显示整个文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> filename<br></code></pre></td></tr></table></figure><p>2.从键盘创建一个文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &gt; filename<br></code></pre></td></tr></table></figure><p>只能创建新文件，不能编辑已有文件。</p><p>3.将几个文件合并为一个文件:</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> file1 file2 &gt; <span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure><ul><li>-b 对非空输出行号</li><li>-n 输出所有行号</li></ul><p><strong>实例：</strong></p><p>（1）把 log2012.log 的文件内容加上行号后输入 log2013.log 这个文件里</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">cat</span> -n log2012.<span class="hljs-built_in">log</span> log2013.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>（2）把 log2012.log 和 log2013.log 的文件内容加上行号（空白行不加）之后将内容附加到 log.log 里</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">cat</span> -b log2012.<span class="hljs-built_in">log</span> log2013.<span class="hljs-built_in">log</span> <span class="hljs-built_in">log</span>.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>（3）使用 here doc 生成新文件</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> &gt;<span class="hljs-keyword">log</span>.txt &lt;&lt;EOF<br>&gt;Hello<br>&gt;World<br>&gt;<span class="hljs-keyword">PWD</span>=$(<span class="hljs-keyword">pwd</span>)<br>&gt;EOF<br><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span> <span class="hljs-keyword">log</span>.txt<br><span class="hljs-keyword">cat</span> <span class="hljs-keyword">log</span>.txt<br>Hello<br>World<br><span class="hljs-keyword">PWD</span>=/opt/soft/<span class="hljs-keyword">test</span><br></code></pre></td></tr></table></figure><p>（4）反向列示</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">tac <span class="hljs-keyword">log</span>.txt<br><span class="hljs-keyword">PWD</span>=/opt/soft/<span class="hljs-keyword">test</span><br>World<br>Hello<br></code></pre></td></tr></table></figure><h3 id="10、more-命令"><a href="#10、more-命令" class="headerlink" title="10、more 命令"></a>10、more 命令</h3><p>功能类似于 cat, more 会以一页一页的显示方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示。</p><p><strong>命令参数：</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-addition">+n      从笫 n 行开始显示</span><br><span class="hljs-deletion">-n       定义屏幕大小为n行</span><br><span class="hljs-addition">+/pattern 在每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示 </span><br><span class="hljs-deletion">-c       从顶部清屏，然后显示</span><br><span class="hljs-deletion">-d       提示“Press space to continue，’q’ to quit（按空格键继续，按q键退出）”，禁用响铃功能</span><br><span class="hljs-deletion">-l        忽略Ctrl+l（换页）字符</span><br><span class="hljs-deletion">-p       通过清除窗口而不是滚屏来对文件进行换页，与-c选项相似</span><br><span class="hljs-deletion">-s       把连续的多个空行显示为一行</span><br><span class="hljs-deletion">-u       把文件内容中的下画线去掉</span><br></code></pre></td></tr></table></figure><p><strong>常用操作命令：</strong></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs excel">Enter    向下 <span class="hljs-built_in">n</span> 行，需要定义。默认为 <span class="hljs-number">1</span> 行<br>Ctrl+F   向下滚动一屏<br>空格键  向下滚动一屏<br>Ctrl+B  返回上一屏<br>=       输出当前行的行号<br><span class="hljs-symbol">:f</span>     输出文件名和当前行的行号<br>V      调用vi编辑器<br>!命令   调用Shell，并执行命令<br>q       退出more<br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）显示文件中从第3行起的内容</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">more</span> +<span class="hljs-number">3</span> text.txt<br></code></pre></td></tr></table></figure><p>（2）在所列出文件目录详细信息，借助管道使每次显示 5 行</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span> | <span class="hljs-keyword">more</span> -5<br></code></pre></td></tr></table></figure><p>按空格显示下 5 行。</p><h3 id="11、less-命令"><a href="#11、less-命令" class="headerlink" title="11、less 命令"></a>11、less 命令</h3><p>less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。</p><p><strong>常用命令参数：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css">-<span class="hljs-selector-tag">i</span>  忽略搜索时的大小写<br>-N  显示每行的行号<br>-o  &lt;文件名&gt; 将less 输出的内容在指定文件中保存起来<br>-s  显示连续空行为一行<br>/字符串：向下搜索“字符串”的功能<br>?字符串：向上搜索“字符串”的功能<br>n：重复前一个搜索（与 / 或 ? 有关）<br>N：反向重复前一个搜索（与 / 或 ? 有关）<br>-x &lt;数字&gt; 将“tab”键显示为规定的数字空格<br><span class="hljs-selector-tag">b</span>  向后翻一页<br>d  向后翻半页<br>h  显示帮助界面<br><span class="hljs-selector-tag">Q</span>  退出less 命令<br>u  向前滚动半页<br>y  向前滚动一行<br>空格键 滚动一行<br>回车键 滚动一页<br><span class="hljs-selector-attr">[pagedown]</span>： 向下翻动一页<br><span class="hljs-selector-attr">[pageup]</span>：   向上翻动一页<br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）ps 查看进程信息并通过 less 分页显示</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">ps -aux <span class="hljs-string">| less -N</span><br></code></pre></td></tr></table></figure><p>（2）查看多个文件</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">less <span class="hljs-number">1</span>.<span class="hljs-built_in">log</span> <span class="hljs-number">2</span>.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>可以使用 n 查看下一个，使用 p 查看前一个。</p><h3 id="12、head-命令"><a href="#12、head-命令" class="headerlink" title="12、head 命令"></a>12、head 命令</h3><p>head 用来显示档案的开头至标准输出中，默认 head 命令打印其相应文件的开头 10 行。</p><p><strong>常用参数：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">-n<span class="hljs-tag">&lt;<span class="hljs-name">行数</span>&gt;</span> 显示的行数（行数为复数表示从最后向前数）<br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）显示 1.log 文件中前 20 行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">head</span> <span class="hljs-number">1</span>.log -n <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>（2）显示 1.log 文件前 20 字节</p><figure class="highlight stan"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stan"><span class="hljs-built_in">head</span> -c <span class="hljs-number">20</span> log2014.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>（3）显示 t.log最后 10 行</p><figure class="highlight stan"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stan"><span class="hljs-built_in">head</span> -n -<span class="hljs-number">10</span> t.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><h3 id="13、tail-命令"><a href="#13、tail-命令" class="headerlink" title="13、tail 命令"></a>13、tail 命令</h3><p>用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件。</p><p><strong>常用参数：</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-f 循环读取（常用于查看递增的日志文件）</span><br><span class="hljs-deletion">-n&lt;行数&gt; 显示行数（从后向前）</span><br></code></pre></td></tr></table></figure><p>（1）循环读取逐渐增加的文件内容</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-built_in">ping</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> &gt; <span class="hljs-built_in">ping</span>.<span class="hljs-built_in">log</span> &amp;<br></code></pre></td></tr></table></figure><p>后台运行：可使用 jobs -l 查看，也可使用 fg 将其移到前台运行。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">tail -f <span class="hljs-built_in">ping</span>.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>（查看日志）</p><h3 id="14、which-命令"><a href="#14、which-命令" class="headerlink" title="14、which 命令"></a>14、which 命令</h3><p>在 linux 要查找某个文件，但不知道放在哪里了，可以使用下面的一些命令来搜索：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">which     查看可执行文件的位置。<br>whereis 查看文件的位置。<br>locate  配合数据库查看文件位置。<br><span class="hljs-built_in">find</span>        实际搜寻硬盘查询文件名称。<br></code></pre></td></tr></table></figure><p>which 是在 PATH 就是指定的路径中，搜索某个系统命令的位置，并返回第一个搜索结果。使用 which 命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。</p><p><strong>常用参数：</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-n 　指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。</span><br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）查看 ls 命令是否存在，执行哪个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">which</span> <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p>（2）查看 which</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">which</span> <span class="hljs-built_in">which</span><br></code></pre></td></tr></table></figure><p>（3）查看 cd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">which</span> <span class="hljs-built_in">cd</span>（显示不存在，因为 <span class="hljs-built_in">cd</span> 是内建命令，而 <span class="hljs-built_in">which</span> 查找显示是 PATH 中的命令）<br></code></pre></td></tr></table></figure><p>查看当前 PATH 配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure><p>或使用 env 查看所有环境变量及对应值</p><h3 id="15、whereis-命令"><a href="#15、whereis-命令" class="headerlink" title="15、whereis 命令"></a>15、whereis 命令</h3><p>whereis 命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。whereis 及 locate 都是基于系统内建的数据库进行搜索，因此效率很高，而find则是遍历硬盘查找文件。</p><p><strong>常用参数：</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-b   定位可执行文件。</span><br><span class="hljs-deletion">-m   定位帮助文件。</span><br><span class="hljs-deletion">-s   定位源代码文件。</span><br><span class="hljs-deletion">-u   搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件。</span><br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）查找 locate 程序相关文件</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">whereis locate</span><br></code></pre></td></tr></table></figure><p>（2）查找 locate 的源码文件</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">whereis -s locate</span><br></code></pre></td></tr></table></figure><p>（3）查找 lcoate 的帮助文件</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">whereis -m locate</span><br></code></pre></td></tr></table></figure><h3 id="16、locate-命令"><a href="#16、locate-命令" class="headerlink" title="16、locate 命令"></a>16、locate 命令</h3><p>locate 通过搜寻系统内建文档数据库达到快速找到档案，数据库由 updatedb 程序来更新，updatedb 是由 cron daemon 周期性调用的。默认情况下 locate 命令在搜寻数据库时比由整个由硬盘资料来搜寻资料来得快，但较差劲的是 locate 所找到的档案若是最近才建立或 刚更名的，可能会找不到，在内定值中，updatedb 每天会跑一次，可以由修改 crontab 来更新设定值 (etc&#x2F;crontab)。</p><p>locate 与 find 命令相似，可以使用如 *、? 等进行正则匹配查找</p><p><strong>常用参数：</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-l num（要显示的行数）</span><br><span class="hljs-deletion">-f   将特定的档案系统排除在外，如将proc排除在外</span><br><span class="hljs-deletion">-r   使用正则运算式做为寻找条件</span><br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）查找和 pwd 相关的所有文件(文件名中包含 pwd）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">locate <span class="hljs-built_in">pwd</span><br></code></pre></td></tr></table></figure><p>（2）搜索 etc 目录下所有以 sh 开头的文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">locate <span class="hljs-regexp">/etc/</span>sh<br></code></pre></td></tr></table></figure><p>（3）查找 &#x2F;var 目录下，以 reason 结尾的文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">locate</span> -r <span class="hljs-string">&#x27;^/var.*reason$&#x27;</span>（其中.表示一个字符，*表示任务多个；.*表示任意多个字符）<br></code></pre></td></tr></table></figure><h3 id="17、find-命令"><a href="#17、find-命令" class="headerlink" title="17、find 命令"></a>17、find 命令</h3><p>用于在文件树中查找文件，并作出相应的处理。</p><p>命令格式：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> pathname -options [-<span class="hljs-built_in">print</span> -exec -ok <span class="hljs-built_in">..</span>.]<br></code></pre></td></tr></table></figure><p>命令参数：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sqf">pathname: <span class="hljs-built_in">find</span>命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录。<br>-print： <span class="hljs-built_in">find</span>命令将匹配的文件输出到标准输出。<br>-<span class="hljs-built_in">exec</span>： <span class="hljs-built_in">find</span>命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为<span class="hljs-string">&#x27;command&#x27;</span> &#123;  &#125; \;，注意&#123;   &#125;和\；之间的空格。<br>-ok： 和-<span class="hljs-built_in">exec</span>的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。<br></code></pre></td></tr></table></figure><p><strong>命令选项：</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-name 按照文件名查找文件</span><br><span class="hljs-deletion">-perm 按文件权限查找文件</span><br><span class="hljs-deletion">-user 按文件属主查找文件</span><br><span class="hljs-deletion">-group  按照文件所属的组来查找文件。</span><br><span class="hljs-deletion">-type  查找某一类型的文件，诸如：</span><br>   b - 块设备文件<br>   d - 目录<br>   c - 字符设备文件<br>   l - 符号链接文件<br>   p - 管道文件<br>   f - 普通文件<br><br><span class="hljs-deletion">-size n :[c] 查找文件长度为n块文件，带有c时表文件字节大小</span><br><span class="hljs-deletion">-amin n   查找系统中最后N分钟访问的文件</span><br><span class="hljs-deletion">-atime n  查找系统中最后n*24小时访问的文件</span><br><span class="hljs-deletion">-cmin n   查找系统中最后N分钟被改变文件状态的文件</span><br><span class="hljs-deletion">-ctime n  查找系统中最后n*24小时被改变文件状态的文件</span><br><span class="hljs-deletion">-mmin n   查找系统中最后N分钟被改变文件数据的文件</span><br><span class="hljs-deletion">-mtime n  查找系统中最后n*24小时被改变文件数据的文件</span><br>(用减号-来限定更改时间在距今n日以内的文件，而用加号+来限定更改时间在距今n日以前的文件。 )<br><span class="hljs-deletion">-maxdepth n 最大查找目录深度</span><br><span class="hljs-deletion">-prune 选项来指出需要忽略的目录。在使用-prune选项时要当心，因为如果你同时使用了-depth选项，那么-prune选项就会被find命令忽略</span><br><span class="hljs-deletion">-newer 如果希望查找更改时间比某个文件新但比另一个文件旧的所有文件，可以使用-newer选项</span><br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）查找 48 小时内修改过的文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> -atime -2<br></code></pre></td></tr></table></figure><p>（2）在当前目录查找 以 .log 结尾的文件。 <strong>.</strong> 代表当前目录</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> ./ -name <span class="hljs-string">&#x27;*.log&#x27;</span><br></code></pre></td></tr></table></figure><p>（3）查找 &#x2F;opt 目录下 权限为 777 的文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> /opt -perm 777<br></code></pre></td></tr></table></figure><p>（4）查找大于 1K 的文件</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">find -size +<span class="hljs-number">1000</span>c<br></code></pre></td></tr></table></figure><p>查找等于 1000 字符的文件</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">find -size <span class="hljs-number">1000</span>c <br></code></pre></td></tr></table></figure><p>-exec 参数后面跟的是 command 命令，它的终止是以 ; 为结束标志的，所以这句命令后面的分号是不可缺少的，考虑到各个系统中分号会有不同的意义，所以前面加反斜杠。{} 花括号代表前面find查找出来的文件名。</p><p><strong>实例：</strong></p><p>（5）在当前目录中查找更改时间在10日以前的文件并删除它们(无提醒）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find . -<span class="hljs-built_in">type</span> f -mtime +10 -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">rm</span> -f &#123;&#125; \;<br></code></pre></td></tr></table></figure><p>（6）当前目录中查找所有文件名以.log结尾、更改时间在5日以上的文件，并删除它们，只不过在删除之前先给出提示。 按y键删除文件，按n键不删除</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">find</span> . -<span class="hljs-built_in">name</span> <span class="hljs-string">&#x27;*.log&#x27;</span> mtime +<span class="hljs-number">5</span> -ok -<span class="hljs-built_in">exec</span> rm &#123;&#125; \;<br></code></pre></td></tr></table></figure><p>（7）当前目录下查找文件名以 passwd 开头，内容包含 “pkg” 字符的文件</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">find</span> . -f -<span class="hljs-built_in">name</span> <span class="hljs-string">&#x27;passwd*&#x27;</span> -<span class="hljs-built_in">exec</span> grep <span class="hljs-string">&quot;pkg&quot;</span> &#123;&#125; \;<br></code></pre></td></tr></table></figure><p>（8）用 exec 选项执行 cp 命令</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">find</span> . -<span class="hljs-built_in">name</span> <span class="hljs-string">&#x27;*.log&#x27;</span> -<span class="hljs-built_in">exec</span> cp &#123;&#125; test3 \;<br></code></pre></td></tr></table></figure><p>-xargs find 命令把匹配到的文件传递给 xargs 命令，而 xargs 命令每次只获取一部分文件而不是全部，不像 -exec 选项那样。这样它可以先处理最先获取的一部分文件，然后是下一批，并如此继续下去。</p><p>实例：</p><p>（9）查找当前目录下每个普通文件，然后使用 xargs 来判断文件类型</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> . -type f -<span class="hljs-built_in">print</span> | xargs file<br></code></pre></td></tr></table></figure><p>（10）查找当前目录下所有以 js 结尾的并且其中包含 ‘editor’ 字符的普通文件</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">find</span> . -type f -name <span class="hljs-string">&quot;*.js&quot;</span> -exec <span class="hljs-keyword">grep</span> -lF <span class="hljs-string">&#x27;ueditor&#x27;</span> &#123;&#125; \;<br><span class="hljs-keyword">find</span> -type f -name <span class="hljs-string">&#x27;*.js&#x27;</span> | xargs <span class="hljs-keyword">grep</span> -lF <span class="hljs-string">&#x27;editor&#x27;</span><br></code></pre></td></tr></table></figure><p>（11）利用 xargs 执行 mv 命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> . -name <span class="hljs-string">&quot;*.log&quot;</span> | xargs -i mv &#123;&#125; test4<br></code></pre></td></tr></table></figure><p>（12）用 grep 命令在当前目录下的所有普通文件中搜索 hostnames 这个词，并标出所在行：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> . -name \*(转义） -type f -<span class="hljs-built_in">print</span> | xargs grep -n <span class="hljs-string">&#x27;hostnames&#x27;</span><br></code></pre></td></tr></table></figure><p>（13）查找当前目录中以一个小写字母开头，最后是 4 到 9 加上 .log 结束的文件：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">find</span> . -name <span class="hljs-string">&#x27;[a-z]*[4-9].log&#x27;</span> -<span class="hljs-keyword">print</span><br></code></pre></td></tr></table></figure><p>（14）在 test 目录查找不在 test4 子目录查找</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">find</span> test -<span class="hljs-built_in">path</span> <span class="hljs-string">&#x27;test/test4&#x27;</span> -prune -o -<span class="hljs-built_in">print</span><br></code></pre></td></tr></table></figure><p>（15）实例1：查找更改时间比文件 log2012.log新但比文件 log2017.log 旧的文件</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">find -<span class="hljs-keyword">new</span><span class="hljs-type">er</span> log2012.log ! -<span class="hljs-keyword">new</span><span class="hljs-type">er</span> log2017.log<br></code></pre></td></tr></table></figure><p><strong>使用 depth 选项：</strong></p><p>depth 选项可以使 find 命令向磁带上备份文件系统时，希望首先备份所有的文件，其次再备份子目录中的文件。</p><p>实例：find 命令从文件系统的根目录开始，查找一个名为 CON.FILE 的文件。 它将首先匹配所有的文件然后再进入子目录中查找</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">find / -name <span class="hljs-string">&quot;CON.FILE&quot;</span> -depth -print<br></code></pre></td></tr></table></figure><h3 id="18、chmod-命令"><a href="#18、chmod-命令" class="headerlink" title="18、chmod 命令"></a>18、chmod 命令</h3><p>用于改变 linux 系统文件或目录的访问权限。用它控制文件或目录的访问权限。该命令有两种用法。一种是包含字母和操作符表达式的文字设定法；另一种是包含数字的数字设定法。</p><p>每一文件或目录的访问权限都有三组，每组用三位表示，分别为文件属主的读、写和执行权限；与属主同组的用户的读、写和执行权限；系统中其他用户的读、写和执行权限。可使用 ls -l test.txt 查找。</p><p>以文件 log2012.log 为例：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-literal">-</span><span class="hljs-comment">rw</span><span class="hljs-literal">-</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span> <span class="hljs-comment">1 root root 296K 11</span><span class="hljs-literal">-</span><span class="hljs-comment">13 06:03 log2012</span><span class="hljs-string">.</span><span class="hljs-comment">log</span><br></code></pre></td></tr></table></figure><p>第一列共有 10 个位置，第一个字符指定了文件类型。在通常意义上，一个目录也是一个文件。如果第一个字符是横线，表示是一个非目录的文件。如果是 d，表示是一个目录。从第二个字符开始到第十个 9 个字符，3 个字符一组，分别表示了 3 组用户对文件或者目录的权限。权限字符用横线代表空许可，r 代表只读，w 代表写，x 代表可执行。</p><p>常用参数：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-c 当发生改变时，报告处理信息</span><br><span class="hljs-deletion">-R 处理指定目录以及其子目录下所有文件</span><br></code></pre></td></tr></table></figure><p>权限范围：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">u ：目录或者文件的当前的用户<br>g ：目录或者文件的当前的群组<br>o ：除了目录或者文件的当前用户或群组之外的用户或者群组<br><span class="hljs-selector-tag">a</span> ：所有的用户及群组<br></code></pre></td></tr></table></figure><p>权限代号：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">r ：读权限，用数字4表示<br>w ：写权限，用数字2表示<br>x ：执行权限，用数字1表示<br><span class="hljs-bullet">- </span>：删除权限，用数字0表示<br>s ：特殊权限<br></code></pre></td></tr></table></figure><p>实例：</p><p>（1）增加文件 t.log 所有用户可执行权限</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">chmod <span class="hljs-keyword">a</span>+x t.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>（2）撤销原来所有的权限，然后使拥有者具有可读权限,并输出处理信息</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">chmod <span class="hljs-attribute">u</span>=r t.log -c<br></code></pre></td></tr></table></figure><p>（3）给 file 的属主分配读、写、执行(7)的权限，给file的所在组分配读、执行(5)的权限，给其他用户分配执行(1)的权限</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">chmod <span class="hljs-number">751</span> t.<span class="hljs-keyword">log</span> <span class="hljs-params">-c</span>（或者：chmod u=rwx,g=<span class="hljs-literal">rx</span>,o=x t.<span class="hljs-keyword">log</span> <span class="hljs-params">-c</span>)<br></code></pre></td></tr></table></figure><p>（4）将 test 目录及其子目录所有文件添加可读权限</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">chmod u+<span class="hljs-built_in">r</span>,g+<span class="hljs-built_in">r</span>,o+<span class="hljs-built_in">r</span> <span class="hljs-literal">-R</span> text/ <span class="hljs-literal">-c</span><br></code></pre></td></tr></table></figure><p>19、tar 命令</p><p>用来压缩和解压文件。tar 本身不具有压缩功能，只具有打包功能，有关压缩及解压是调用其它的功能来完成。</p><p>弄清两个概念：打包和压缩。打包是指将一大堆文件或目录变成一个总的文件；压缩则是将一个大的文件通过一些压缩算法变成一个小文件</p><p><strong>常用参数：</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-c 建立新的压缩文件</span><br><span class="hljs-deletion">-f 指定压缩文件</span><br><span class="hljs-deletion">-r 添加文件到已经压缩文件包中</span><br><span class="hljs-deletion">-u 添加改了和现有的文件到压缩包中</span><br><span class="hljs-deletion">-x 从压缩包中抽取文件</span><br><span class="hljs-deletion">-t 显示压缩文件中的内容</span><br><span class="hljs-deletion">-z 支持gzip压缩</span><br><span class="hljs-deletion">-j 支持bzip2压缩</span><br><span class="hljs-deletion">-Z 支持compress解压文件</span><br><span class="hljs-deletion">-v 显示操作过程</span><br></code></pre></td></tr></table></figure><p>有关 gzip 及 bzip2 压缩:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">gzip 实例：压缩 gzip fileName <span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span> 和<span class="hljs-selector-class">.tgz</span>  解压：gunzip filename<span class="hljs-selector-class">.gz</span> 或 gzip -d filename<span class="hljs-selector-class">.gz</span><br>          对应：tar zcvf filename<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span>     tar zxvf filename<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span><br><br>bz2实例：压缩 bzip2 -z filename <span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.bz2</span> 解压：bunzip filename.bz2或bzip -d filename<span class="hljs-selector-class">.bz2</span><br>       对应：tar jcvf filename<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span>         解压：tar jxvf filename<span class="hljs-selector-class">.tar</span>.bz2<br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）将文件全部打包成 tar 包</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">tar -cvf <span class="hljs-built_in">log</span>.tar <span class="hljs-number">1</span>.<span class="hljs-built_in">log</span>,<span class="hljs-number">2</span>.<span class="hljs-built_in">log</span> 或tar -cvf <span class="hljs-built_in">log</span>.*<br></code></pre></td></tr></table></figure><p>（2）将 &#x2F;etc 下的所有文件及目录打包到指定目录，并使用 gz 压缩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zcvf /tmp/etc.tar.gz /etc<br></code></pre></td></tr></table></figure><p>（3）查看刚打包的文件内容（一定加z，因为是使用 gzip 压缩的）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">tar -ztvf <span class="hljs-regexp">/tmp/</span>etc.tar.gz<br></code></pre></td></tr></table></figure><p>（4）要压缩打包 &#x2F;home, &#x2F;etc ，但不要 &#x2F;home&#x2F;dmtsai</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">tar <span class="hljs-params">--exclude</span> <span class="hljs-string">/home/dmtsai</span> -zcvf myfile.tar.gz <span class="hljs-string">/home/</span>* <span class="hljs-string">/etc</span><br></code></pre></td></tr></table></figure><h3 id="20、chown-命令"><a href="#20、chown-命令" class="headerlink" title="20、chown 命令"></a>20、chown 命令</h3><p>chown 将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户 ID；组可以是组名或者组 ID；文件是以空格分开的要改变权限的文件列表，支持通配符。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-c 显示更改的部分的信息</span><br><span class="hljs-deletion">-R 处理指定目录及子目录</span><br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）改变拥有者和群组 并显示改变信息</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">chown -<span class="hljs-keyword">c</span> mai<span class="hljs-variable">l:mail</span> log2012.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>（2）改变文件群组</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">chown -c :mail t.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>（3）改变文件夹及子文件目录属主及属组为 mail</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> -cR mail: <span class="hljs-built_in">test</span>/<br></code></pre></td></tr></table></figure><h3 id="21、df-命令"><a href="#21、df-命令" class="headerlink" title="21、df 命令"></a>21、df 命令</h3><p>显示磁盘空间使用情况。获取硬盘被占用了多少空间，目前还剩下多少空间等信息，如果没有文件名被指定，则所有当前被挂载的文件系统的可用空间将被显示。默认情况下，磁盘空间将以 1KB 为单位进行显示，除非环境变量 POSIXLY_CORRECT 被指定，那样将以512字节为单位进行显示：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-a 全部文件系统列表</span><br><span class="hljs-deletion">-h 以方便阅读的方式显示信息</span><br><span class="hljs-deletion">-i 显示inode信息</span><br><span class="hljs-deletion">-k 区块为1024字节</span><br><span class="hljs-deletion">-l 只显示本地磁盘</span><br><span class="hljs-deletion">-T 列出文件系统类型</span><br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）显示磁盘使用情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -l<br></code></pre></td></tr></table></figure><p>（2）以易读方式列出所有文件系统及其类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -haT<br></code></pre></td></tr></table></figure><h3 id="22、du-命令"><a href="#22、du-命令" class="headerlink" title="22、du 命令"></a>22、du 命令</h3><p>du 命令也是查看使用空间的，但是与 df 命令不同的是 Linux du 命令是对文件和目录磁盘使用的空间的查看：</p><p>命令格式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">du <span class="hljs-selector-attr">[选项]</span> <span class="hljs-selector-attr">[文件]</span><br></code></pre></td></tr></table></figure><p><strong>常用参数：</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-a 显示目录中所有文件大小</span><br><span class="hljs-deletion">-k 以KB为单位显示文件大小</span><br><span class="hljs-deletion">-m 以MB为单位显示文件大小</span><br><span class="hljs-deletion">-g 以GB为单位显示文件大小</span><br><span class="hljs-deletion">-h 以易读方式显示文件大小</span><br><span class="hljs-deletion">-s 仅显示总计</span><br><span class="hljs-deletion">-c或--total  除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和</span><br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）以易读方式显示文件夹内及子文件夹大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">du</span> -h scf/<br></code></pre></td></tr></table></figure><p>（2）以易读方式显示文件夹内所有文件大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">du</span> -ah scf/<br></code></pre></td></tr></table></figure><p>（3）显示几个文件或目录各自占用磁盘空间的大小，还统计它们的总和</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">du</span> -hc <span class="hljs-built_in">test</span>/ scf/<br></code></pre></td></tr></table></figure><p>（4）输出当前目录下各个子目录所使用的空间</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gml">du -hc --<span class="hljs-built_in">max</span>-<span class="hljs-variable language_">depth</span>=<span class="hljs-number">1</span> scf/<br></code></pre></td></tr></table></figure><h3 id="23、ln-命令"><a href="#23、ln-命令" class="headerlink" title="23、ln 命令"></a>23、ln 命令</h3><p>功能是为文件在另外一个位置建立一个同步的链接，当在不同目录需要该问题时，就不需要为每一个目录创建同样的文件，通过 ln 创建的链接（link）减少磁盘占用量。</p><p>链接分类：软件链接及硬链接</p><p>软链接：</p><ul><li>1.软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式</li><li>2.软链接可以 跨文件系统 ，硬链接不可以</li><li>3.软链接可以对一个不存在的文件名进行链接</li><li>4.软链接可以对目录进行链接</li></ul><p>硬链接:</p><ul><li>1.硬链接，以文件副本的形式存在。但不占用实际空间。</li><li>2.不允许给目录创建硬链接</li><li>3.硬链接只有在同一个文件系统中才能创建</li></ul><p><strong>需要注意：</strong></p><ul><li>第一：ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化；</li><li>第二：ln的链接又分软链接和硬链接两种，软链接就是ln –s 源文件 目标文件，它只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，硬链接 ln 源文件 目标文件，没有参数-s， 它会在你选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化。</li><li>第三：ln指令用在链接文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则会把前面指定的所有文件或目录复制到该目录中。若同时指定多个文件或目录，且最后的目的地并非是一个已存在的目录，则会出现错误信息。</li></ul><p><strong>常用参数：</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-b 删除，覆盖以前建立的链接</span><br><span class="hljs-deletion">-s 软链接（符号链接）</span><br><span class="hljs-deletion">-v 显示详细处理过程</span><br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）给文件创建软链接，并显示操作信息</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ln</span> -<span class="hljs-keyword">sv</span> <span class="hljs-keyword">source</span>.<span class="hljs-built_in">log</span> link.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>（2）给文件创建硬链接，并显示操作信息</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ln</span> -v <span class="hljs-keyword">source</span>.<span class="hljs-built_in">log</span> link1.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>（3）给目录创建软链接</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ln -sv <span class="hljs-regexp">/opt/</span>soft<span class="hljs-regexp">/test/</span>test3 <span class="hljs-regexp">/opt/</span>soft<span class="hljs-regexp">/test/</span>test5<br></code></pre></td></tr></table></figure><h3 id="24、date-命令"><a href="#24、date-命令" class="headerlink" title="24、date 命令"></a>24、date 命令</h3><p>显示或设定系统的日期与时间。</p><p>命令参数：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs haml">-<span class="language-ruby">d&lt;字符串&gt; 　显示字符串所指的日期与时间。字符串前后必须加上双引号。</span><br>-<span class="language-ruby">s&lt;字符串&gt; 　根据字符串来设置日期与时间。字符串前后必须加上双引号。</span><br>-<span class="language-ruby">u 　显示<span class="hljs-variable constant_">GMT</span>。</span><br><span class="hljs-tag">%<span class="hljs-selector-tag">H</span></span> 小时(00-23)<br><span class="hljs-tag">%<span class="hljs-selector-tag">I</span></span> 小时(00-12)<br><span class="hljs-tag">%<span class="hljs-selector-tag">M</span></span> 分钟(以00-59来表示)<br><span class="hljs-tag">%<span class="hljs-selector-tag">s</span></span> 总秒数。起算时间为1970-01-01 00:00:00 UTC。<br><span class="hljs-tag">%<span class="hljs-selector-tag">S</span></span> 秒(以本地的惯用法来表示)<br><span class="hljs-tag">%<span class="hljs-selector-tag">a</span></span> 星期的缩写。<br><span class="hljs-tag">%<span class="hljs-selector-tag">A</span></span> 星期的完整名称。<br><span class="hljs-tag">%<span class="hljs-selector-tag">d</span></span> 日期(以01-31来表示)。<br><span class="hljs-tag">%<span class="hljs-selector-tag">D</span></span> 日期(含年月日)。<br><span class="hljs-tag">%<span class="hljs-selector-tag">m</span></span> 月份(以01-12来表示)。<br><span class="hljs-tag">%<span class="hljs-selector-tag">y</span></span> 年份(以00-99来表示)。<br><span class="hljs-tag">%<span class="hljs-selector-tag">Y</span></span> 年份(以四位数来表示)。<br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）显示下一天</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">date</span> +%Y%m%d --<span class="hljs-keyword">date</span>=<span class="hljs-string">&quot;+1 day&quot;</span>  <span class="hljs-comment">//显示下一天的日期</span><br></code></pre></td></tr></table></figure><p>（2）-d参数使用</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">date</span> -d <span class="hljs-string">&quot;nov 22&quot;</span>  今年的 <span class="hljs-number">11</span> 月 <span class="hljs-number">22</span> 日是星期三<br><span class="hljs-keyword">date</span> -d <span class="hljs-string">&#x27;2 weeks&#x27;</span> <span class="hljs-number">2</span>周后的日期<br><span class="hljs-keyword">date</span> -d <span class="hljs-string">&#x27;next monday&#x27;</span> (下周一的日期)<br><span class="hljs-keyword">date</span> -d next-day +%Y%m%d（明天的日期）或者：<span class="hljs-keyword">date</span> -d tomorrow +%Y%m%d<br><span class="hljs-keyword">date</span> -d last-day +%Y%m%d(昨天的日期) 或者：<span class="hljs-keyword">date</span> -d yesterday +%Y%m%d<br><span class="hljs-keyword">date</span> -d last-month +%Y%m(上个月是几月)<br><span class="hljs-keyword">date</span> -d next-month +%Y%m(下个月是几月)<br></code></pre></td></tr></table></figure><h3 id="25、cal-命令"><a href="#25、cal-命令" class="headerlink" title="25、cal 命令"></a>25、cal 命令</h3><p>可以用户显示公历（阳历）日历如只有一个参数，则表示年份(1-9999)，如有两个参数，则表示月份和年份：</p><p>常用参数：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-3 显示前一月，当前月，后一月三个月的日历</span><br><span class="hljs-deletion">-m 显示星期一为第一列</span><br><span class="hljs-deletion">-j 显示在当前年第几天</span><br><span class="hljs-deletion">-y [year]显示当前年[year]份的日历</span><br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）显示指定年月日期</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cal</span> <span class="hljs-number">9</span> <span class="hljs-number">2012</span><br></code></pre></td></tr></table></figure><p>（2）显示2013年每个月日历</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cal</span> -y <span class="hljs-number">2013</span><br></code></pre></td></tr></table></figure><p>（3）将星期一做为第一列,显示前中后三月</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cal</span> -<span class="hljs-number">3</span>m<br></code></pre></td></tr></table></figure><h3 id="26、grep-命令"><a href="#26、grep-命令" class="headerlink" title="26、grep 命令"></a>26、grep 命令</h3><p>强大的文本搜索命令，grep(Global Regular Expression Print) 全局正则表达式搜索。</p><p>grep 的工作方式是这样的，它在一个或多个文件中搜索字符串模板。如果模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到标准输出，不影响原文件内容。</p><p>命令格式：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">grep [<span class="hljs-keyword">option</span>] pattern <span class="hljs-keyword">file</span>|dir<br></code></pre></td></tr></table></figure><p>常用参数：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-A n --after-context显示匹配字符后n行</span><br><span class="hljs-deletion">-B n --before-context显示匹配字符前n行</span><br><span class="hljs-deletion">-C n --context 显示匹配字符前后n行</span><br><span class="hljs-deletion">-c --count 计算符合样式的列数</span><br><span class="hljs-deletion">-i 忽略大小写</span><br><span class="hljs-deletion">-l 只列出文件内容符合指定的样式的文件名称</span><br><span class="hljs-deletion">-f 从文件中读取关键词</span><br><span class="hljs-deletion">-n 显示匹配内容的所在文件中行数</span><br><span class="hljs-deletion">-R 递归查找文件夹</span><br></code></pre></td></tr></table></figure><p>grep 的规则表达式:</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs autoit">^  <span class="hljs-meta">#锚定行的开始 如：<span class="hljs-string">&#x27;^grep&#x27;</span>匹配所有以grep开头的行。 </span><br>$  <span class="hljs-meta">#锚定行的结束 如：<span class="hljs-string">&#x27;grep$&#x27;</span>匹配所有以grep结尾的行。 </span><br>.  <span class="hljs-meta">#匹配一个非换行符的字符 如：<span class="hljs-string">&#x27;gr.p&#x27;</span>匹配gr后接一个任意字符，然后是p。  </span><br>*  <span class="hljs-meta">#匹配零个或多个先前字符 如：<span class="hljs-string">&#x27;*grep&#x27;</span>匹配所有一个或多个空格后紧跟grep的行。</span><br>.*   <span class="hljs-meta">#一起用代表任意字符。  </span><br>[]   <span class="hljs-meta">#匹配一个指定范围内的字符，如<span class="hljs-string">&#x27;[Gg]rep&#x27;</span>匹配Grep和grep。 </span><br>[^]  <span class="hljs-meta">#匹配一个不在指定范围内的字符，如：<span class="hljs-string">&#x27;[^A-FH-Z]rep&#x27;</span>匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。  </span><br>\(..\)  <span class="hljs-meta">#标记匹配字符，如<span class="hljs-string">&#x27;\(love\)&#x27;</span>，love被标记为1。   </span><br>\&lt;      <span class="hljs-meta">#锚定单词的开始，如:<span class="hljs-string">&#x27;\&lt;grep&#x27;</span>匹配包含以grep开头的单词的行。</span><br>\&gt;      <span class="hljs-meta">#锚定单词的结束，如<span class="hljs-string">&#x27;grep\&gt;&#x27;</span>匹配包含以grep结尾的单词的行。</span><br>x\&#123;m\&#125;  <span class="hljs-meta">#重复字符x，m次，如：<span class="hljs-string">&#x27;0\&#123;5\&#125;&#x27;</span>匹配包含5个o的行。 </span><br>x\&#123;m,\&#125;  <span class="hljs-meta">#重复字符x,至少m次，如：<span class="hljs-string">&#x27;o\&#123;5,\&#125;&#x27;</span>匹配至少有5个o的行。  </span><br>x\&#123;m,n\&#125;  <span class="hljs-meta">#重复字符x，至少m次，不多于n次，如：<span class="hljs-string">&#x27;o\&#123;5,10\&#125;&#x27;</span>匹配5--10个o的行。  </span><br>\w    <span class="hljs-meta">#匹配文字和数字字符，也就是[A-Za-z0-9]，如：<span class="hljs-string">&#x27;G\w*p&#x27;</span>匹配以G后跟零个或多个文字或数字字符，然后是p。  </span><br>\W    <span class="hljs-meta">#\w的反置形式，匹配一个或多个非单词字符，如点号句号等。  </span><br>\b    <span class="hljs-meta">#单词锁定符，如: <span class="hljs-string">&#x27;\bgrep\b&#x27;</span>只匹配grep。</span><br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）查找指定进程</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> svn<br></code></pre></td></tr></table></figure><p>（2）查找指定进程个数</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> svn -<span class="hljs-keyword">c</span><br></code></pre></td></tr></table></figure><p>（3）从文件中读取关键词</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cat</span> test1.txt | <span class="hljs-keyword">grep</span> -<span class="hljs-keyword">f</span> key.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>（4）从文件夹中递归查找以grep开头的行，并只列出文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep -lR <span class="hljs-string">&#x27;^grep&#x27;</span> /tmp<br></code></pre></td></tr></table></figure><p>（5）查找非x开关的行内容</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> <span class="hljs-string">&#x27;^[^x]&#x27;</span> test.txt<br></code></pre></td></tr></table></figure><p>（6）显示包含 ed 或者 at 字符的内容行</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">grep -E <span class="hljs-symbol">&#x27;ed</span>|<span class="hljs-keyword">at</span>&#x27; test.txt<br></code></pre></td></tr></table></figure><h3 id="27、wc-命令"><a href="#27、wc-命令" class="headerlink" title="27、wc 命令"></a>27、wc 命令</h3><p>wc(word count)功能为统计指定的文件中字节数、字数、行数，并将统计结果输出</p><p>命令格式：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">wc [<span class="hljs-keyword">option</span>] <span class="hljs-keyword">file</span>..<br></code></pre></td></tr></table></figure><p><strong>命令参数：</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-c 统计字节数</span><br><span class="hljs-deletion">-l 统计行数</span><br><span class="hljs-deletion">-m 统计字符数</span><br><span class="hljs-deletion">-w 统计词数，一个字被定义为由空白、跳格或换行字符分隔的字符串</span><br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）查找文件的 行数 单词数 字节数 文件名</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">wc <span class="hljs-built_in">text</span>.txt<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">7 </span>    <span class="hljs-number">8</span>     <span class="hljs-number">70</span>     test.txt<br></code></pre></td></tr></table></figure><p>（2）统计输出结果的行数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> test.txt | <span class="hljs-built_in">wc</span> -l<br></code></pre></td></tr></table></figure><h3 id="28、ps-命令"><a href="#28、ps-命令" class="headerlink" title="28、ps 命令"></a>28、ps 命令</h3><p>ps(process status)，用来查看当前运行的进程状态，一次性查看，如果需要动态连续结果使用 top</p><p>linux上进程有5种状态:</p><ul><li><ol><li>运行(正在运行或在运行队列中等待)</li></ol></li><li><ol start="2"><li>中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)</li></ol></li><li><ol start="3"><li>不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生)</li></ol></li><li><ol start="4"><li>僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放)</li></ol></li><li><ol start="5"><li>停止(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行)</li></ol></li></ul><p>ps 工具标识进程的5种状态码:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">D 不可中断 uninterruptible sleep (usually IO)<br>R 运行 runnable (<span class="hljs-keyword">on</span> <span class="hljs-title">run</span> <span class="hljs-title">queue</span>)<br>S 中断 sleeping<br>T 停止 traced <span class="hljs-keyword">or</span> stopped<br>Z 僵死 <span class="hljs-keyword">a</span> defunct (”zombie”) <span class="hljs-built_in">process</span><br></code></pre></td></tr></table></figure><p><strong>命令参数：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">-<span class="hljs-selector-tag">A</span> 显示所有进程<br><span class="hljs-selector-tag">a</span> 显示所有进程<br>-<span class="hljs-selector-tag">a</span> 显示同一终端下所有进程<br>c 显示进程真实名称<br>e 显示环境变量<br>f 显示进程间的关系<br>r 显示当前终端运行的进程<br>-aux 显示所有包含其它使用的进程<br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）显示当前所有进程环境变量及进程间关系</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ps -ef</span><br></code></pre></td></tr></table></figure><p>（2）显示当前所有进程</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">ps -<span class="hljs-selector-tag">A</span><br></code></pre></td></tr></table></figure><p>（3）与grep联用查找某进程</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -aux | <span class="hljs-keyword">grep</span> apache<br></code></pre></td></tr></table></figure><p>（4）找出与 cron 与 syslog 这两个服务有关的 PID 号码</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> aux | <span class="hljs-keyword">grep</span> <span class="hljs-string">&#x27;(cron|syslog)&#x27;</span><br></code></pre></td></tr></table></figure><p>29、top 命令</p><p>显示当前系统正在执行的进程的相关信息，包括进程 ID、内存占用率、CPU 占用率等</p><p><strong>常用参数：</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-c 显示完整的进程命令</span><br><span class="hljs-deletion">-s 保密模式</span><br><span class="hljs-deletion">-p &lt;进程号&gt; 指定进程显示</span><br><span class="hljs-deletion">-n &lt;次数&gt;循环显示次数</span><br></code></pre></td></tr></table></figure><p>实例：</p><p><strong>（1）</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">top</span> - <span class="hljs-number">14</span>:<span class="hljs-number">06</span>:<span class="hljs-number">23</span> up <span class="hljs-number">70</span> days, <span class="hljs-number">16</span>:<span class="hljs-number">44</span>,  <span class="hljs-number">2</span> users,  load average: <span class="hljs-number">1</span>.<span class="hljs-number">25</span>, <span class="hljs-number">1</span>.<span class="hljs-number">32</span>, <span class="hljs-number">1</span>.<span class="hljs-number">35</span><br><span class="hljs-attribute">Tasks</span>: <span class="hljs-number">206</span> total,   <span class="hljs-number">1</span> running, <span class="hljs-number">205</span> sleeping,   <span class="hljs-number">0</span> stopped,   <span class="hljs-number">0</span> zombie<br><span class="hljs-attribute">Cpu</span>(s):  <span class="hljs-number">5</span>.<span class="hljs-number">9</span>%us,  <span class="hljs-number">3</span>.<span class="hljs-number">4</span>%sy,  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>%ni, <span class="hljs-number">90</span>.<span class="hljs-number">4</span>%id,  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>%wa,  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>%hi,  <span class="hljs-number">0</span>.<span class="hljs-number">2</span>%si,  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>%st<br><span class="hljs-attribute">Mem</span>:  <span class="hljs-number">32949016</span>k total, <span class="hljs-number">14411180</span>k used, <span class="hljs-number">18537836</span>k free,   <span class="hljs-number">169884</span>k buffers<br><span class="hljs-attribute">Swap</span>: <span class="hljs-number">32764556</span>k total,        <span class="hljs-number">0</span>k used, <span class="hljs-number">32764556</span>k free,  <span class="hljs-number">3612636</span>k cached<br><span class="hljs-attribute">PID</span> USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND  <br><span class="hljs-attribute">28894</span> root      <span class="hljs-number">22</span>   <span class="hljs-number">0</span> <span class="hljs-number">1501</span>m <span class="hljs-number">405</span>m  <span class="hljs-number">10</span>m S <span class="hljs-number">52</span>.<span class="hljs-number">2</span>  <span class="hljs-number">1</span>.<span class="hljs-number">3</span>   <span class="hljs-number">2534</span>:<span class="hljs-number">16</span> java  <br></code></pre></td></tr></table></figure><p>前五行是当前系统情况整体的统计信息区。</p><p><strong>第一行，任务队列信息，同 uptime 命令的执行结果，具体参数说明情况如下：</strong></p><p>14:06:23 — 当前系统时间</p><p>up 70 days, 16:44 — 系统已经运行了70天16小时44分钟（在这期间系统没有重启过的吆！）</p><p>2 users — 当前有2个用户登录系统</p><p>load average: 1.15, 1.42, 1.44 — load average后面的三个数分别是1分钟、5分钟、15分钟的负载情况。</p><p>load average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了。</p><p><strong>第二行，Tasks — 任务（进程），具体信息说明如下：</strong></p><p>系统现在共有206个进程，其中处于运行中的有1个，205个在休眠（sleep），stoped状态的有0个，zombie状态（僵尸）的有0个。</p><p><strong>第三行，cpu状态信息，具体属性说明如下：</strong></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">5.9</span>%us — 用户空间占用<span class="hljs-meta">CPU</span>的百分比。<br><span class="hljs-number">3.4</span>% sy — 内核空间占用<span class="hljs-meta">CPU</span>的百分比。<br><span class="hljs-number">0.0</span>% ni — 改变过优先级的进程占用<span class="hljs-meta">CPU</span>的百分比<br><span class="hljs-number">90.4</span>% id — 空闲<span class="hljs-meta">CPU</span>百分比<br><span class="hljs-number">0.0</span>% wa — IO等待占用<span class="hljs-meta">CPU</span>的百分比<br><span class="hljs-number">0.0</span>% hi — 硬中断（Hardware IRQ）占用<span class="hljs-meta">CPU</span>的百分比<br><span class="hljs-number">0.2</span>% <span class="hljs-built_in">si</span> — 软中断（Software Interrupts）占用<span class="hljs-meta">CPU</span>的百分比<br></code></pre></td></tr></table></figure><p><strong>备注：</strong>在这里CPU的使用比率和windows概念不同，需要理解linux系统用户空间和内核空间的相关知识！</p><p>第四行，内存状态，具体信息如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">32949016k</span> total — 物理内存总量（<span class="hljs-number">32</span>GB）<br><span class="hljs-attribute">14411180k</span> used — 使用中的内存总量（<span class="hljs-number">14</span>GB）<br><span class="hljs-attribute">18537836k</span> free — 空闲内存总量（<span class="hljs-number">18</span>GB）<br><span class="hljs-attribute">169884k</span> buffers — 缓存的内存量 （<span class="hljs-number">169</span>M）<br></code></pre></td></tr></table></figure><p><strong>第五行，swap交换分区信息，具体信息说明如下：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">32764556k</span> total — 交换区总量（<span class="hljs-number">32</span>GB）<br><span class="hljs-attribute">0k</span> used — 使用的交换区总量（<span class="hljs-number">0</span>K）<br><span class="hljs-attribute">32764556k</span> free — 空闲交换区总量（<span class="hljs-number">32</span>GB）<br><span class="hljs-attribute">3612636k</span> cached — 缓冲的交换区总量（<span class="hljs-number">3</span>.<span class="hljs-number">6</span>GB）<br></code></pre></td></tr></table></figure><p><strong>第六行，空行。</strong></p><p><strong>第七行以下：各进程（任务）的状态监控，项目列信息说明如下：</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs routeros">PID — 进程id<span class="hljs-built_in"></span><br><span class="hljs-built_in">USER </span>— 进程所有者<br>PR — 进程优先级<br>NI — nice值。负值表示高优先级，正值表示低优先级<br>VIRT — 进程使用的虚拟内存总量，单位kb。<span class="hljs-attribute">VIRT</span>=SWAP+RES<br>RES — 进程使用的、未被换出的物理内存大小，单位kb。<span class="hljs-attribute">RES</span>=CODE+DATA<br>SHR — 共享内存大小，单位kb<br>S — 进程状态。<span class="hljs-attribute">D</span>=不可中断的睡眠状态 <span class="hljs-attribute">R</span>=运行 <span class="hljs-attribute">S</span>=睡眠 <span class="hljs-attribute">T</span>=跟踪/停止 <span class="hljs-attribute">Z</span>=僵尸进程<br>%CPU — 上次更新到现在的CPU时间占用百分比<br>%MEM — 进程使用的物理内存百分比<br>TIME+ — 进程使用的CPU时间总计，单位1/100秒<br>COMMAND — 进程名称（命令名/命令行）<br></code></pre></td></tr></table></figure><p><strong>top 交互命令</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">h 显示<span class="hljs-attribute">top</span>交互命令帮助信息<br>c 切换显示命令名称和完整命令行<br>m 以内存使用率排序<br><span class="hljs-selector-tag">P</span> 根据CPU使用百分比大小进行排序<br>T 根据时间/累计时间进行排序<br>W 将当前设置写入~/<span class="hljs-selector-class">.toprc</span>文件中<br>o或者O 改变显示项目的顺序<br></code></pre></td></tr></table></figure><h3 id="30、kill-命令"><a href="#30、kill-命令" class="headerlink" title="30、kill 命令"></a>30、kill 命令</h3><p>发送指定的信号到相应进程。不指定型号将发送SIGTERM（15）终止指定进程。如果任无法终止该程序可用”-KILL” 参数，其发送的信号为SIGKILL(9) ，将强制结束进程，使用ps命令或者jobs 命令可以查看进程号。root用户将影响用户的进程，非root用户只能影响自己的进程。</p><p><strong>常用参数：</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-l  信号，若果不加信号的编号参数，则使用“-l”参数会列出全部的信号名称</span><br><span class="hljs-deletion">-a  当处理当前进程时，不限制命令名和进程号的对应关系</span><br><span class="hljs-deletion">-p  指定kill 命令只打印相关进程的进程号，而不发送任何信号</span><br><span class="hljs-deletion">-s  指定发送信号</span><br><span class="hljs-deletion">-u  指定用户</span><br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）先使用ps查找进程pro1，然后用kill杀掉</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">kill</span> <span class="hljs-literal">-9</span> <span class="hljs-variable">$</span>(<span class="hljs-built_in">ps</span> <span class="hljs-literal">-ef</span> | grep pro1)<br></code></pre></td></tr></table></figure><h3 id="31、free-命令"><a href="#31、free-命令" class="headerlink" title="31、free 命令"></a>31、free 命令</h3><p>显示系统内存使用情况，包括物理内存、交互区内存(swap)和内核缓冲区内存。</p><p><strong>命令参数：</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-b 以Byte显示内存使用情况</span><br><span class="hljs-deletion">-k 以kb为单位显示内存使用情况</span><br><span class="hljs-deletion">-m 以mb为单位显示内存使用情况</span><br><span class="hljs-deletion">-g 以gb为单位显示内存使用情况</span><br><span class="hljs-deletion">-s&lt;间隔秒数&gt; 持续显示内存</span><br><span class="hljs-deletion">-t 显示内存使用总合</span><br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）显示内存使用情况</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">free</span><br><span class="hljs-keyword">free</span> -k<br><span class="hljs-keyword">free</span> -m<br></code></pre></td></tr></table></figure><p>（2）以总和的形式显示内存的使用信息</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">free -t</span><br></code></pre></td></tr></table></figure><p>（3）周期性查询内存使用情况</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">free</span> -s <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h3 id="32、netstat命令"><a href="#32、netstat命令" class="headerlink" title="32、netstat命令"></a>32、netstat命令</h3><p>查看所有服务的端口号和PID</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">netstat -lnp</span><br></code></pre></td></tr></table></figure><blockquote><p><em>原文地址：<a href="https://www.cnblogs.com/gaojun/p/3359355.html">https://www.cnblogs.com/gaojun/p/3359355.html</a></em></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>实用指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LinkedHashMap、LinkedHashSet、LinkedList</title>
    <link href="/2023/12/26/JAVA%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%9Autil%E7%AF%87%EF%BC%883%EF%BC%89/"/>
    <url>/2023/12/26/JAVA%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%9Autil%E7%AF%87%EF%BC%883%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="LinkedHashMap（继承自HashMap）"><a href="#LinkedHashMap（继承自HashMap）" class="headerlink" title="LinkedHashMap（继承自HashMap）"></a>LinkedHashMap（继承自HashMap）</h3><ul><li>特点：使用双向链表+链表+红黑树方法实现，在继承父类（HashMap）下，用head和tail两个节点来标记链表的头和尾，有一个boolen类型的accessOrder参数，用于控制迭代顺序,ture为访问顺序，false为插入顺序。</li><li>构造方式：继承HashMap，且accessOrder默认为false</li><li>（初始容量、最大容量、默认负载因子、链表转化树的默认阈值、树转化链表的默认阈值、自动扩容机制、哈希桶的特殊转化机制均与HashMap相同，这里不再赘述）</li></ul><blockquote><p>迭代顺序：<br>1.访问顺序（access-order）：在这种方法中，链表中的元素将按照它们最近一次被访问的时间排序。最近访问的元素排在最前面，而较早访问的元素排在后面；<br>2.插入顺序（insertion-order）：在这种方法中，链表中的元素将按照它们被插入到哈希映射中的顺序排列。最早插入的元素排在最前面，而最近插入的元素排在后面。</p></blockquote><hr><h3 id="LinkedHashSet（继承HashSet）"><a href="#LinkedHashSet（继承HashSet）" class="headerlink" title="LinkedHashSet（继承HashSet）"></a>LinkedHashSet（继承HashSet）</h3><ul><li>特点：在继承HashSet的基础上重写的迭代方法spliterator，保证了读取和存入顺序相同，伪链表。</li></ul><hr><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><ul><li>特点：使用双向链表实现</li><li>默认初始长度：0</li></ul>]]></content>
    
    
    <categories>
      
      <category>JAVA核心源码</category>
      
      <category>util篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>源码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HashMap、HashSet、HashTable</title>
    <link href="/2023/12/26/JAVA%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%9Autil%E7%AF%87%EF%BC%882%EF%BC%89/"/>
    <url>/2023/12/26/JAVA%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%9Autil%E7%AF%87%EF%BC%882%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><ul><li>特点：使用了数组＋链表＋红黑树实现，Node数组为table，使用（table.length - 1) &amp; hashcode（key）得到Node数组下标</li><li>初始容量：new出来后为空（空参），在添加了第一个元素后，自动扩容到16</li><li>最大容量：2^30</li><li>默认负载因子：0.75</li><li>链表转化树的默认阈值：链表长度大于8（至少为8），且<strong>表当前的容量不少于64</strong></li><li>树转化链表的默认阈值：6（最多为6）</li><li>转化为树时，一个哈希桶的最小容量：4*链表转化树的默认阈值 容量默认为64</li><li>自动扩容机制（桶数量）：当当前实际容量大于（负载因子*当前最大容量时）进行自动扩容，扩容到原来的2倍</li><li>哈希桶的特殊转化机制：当桶中的数量大于链表转化树的阈值，则桶中的链表转化红黑树，当桶中的数量小于树转化链表的阈值则从树退化成链表</li></ul><hr><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><ul><li>特点：背后依赖于HashMap进行实现，参数除了序列化ID，有HashMap和PRESENT（private static final Object）</li><li>去重方式：依赖hashmap中key唯一的特点，进行去重，通过map.put(e, PRESENT)的方式进行添加（PRESENT的hash值在同一个HashSet是唯一的）</li></ul><hr><h3 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h3><ul><li><p>特点：</p><ol><li><p>使用数组＋链表的实现方式，解决哈希冲突的方法为链地址法，且不会转化为红黑树，性能较hashmap来说比较差；</p></li><li><p>各种对元素进行操作或者查询方法使用了synchronized同步锁，保证了线程安全，但是导致性能较差；</p></li><li><p>下标直接通过hashcode % tab.length 进行计算，可能会导致分布不够均匀，进一步影响性能。</p></li></ol></li><li><p>初始容量：11</p></li><li><p>最大容量：Integer.MAX_VALUE - 8</p></li><li><p>默认负载因子：0.75</p></li><li><p>自动扩容机制：当当前实际容量大于（负载因子*当前最大容量时）进行自动扩容，扩容到原来的2倍</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>JAVA核心源码</category>
      
      <category>util篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>源码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Arrays、ArrayDeque、ArrayList</title>
    <link href="/2023/12/25/JAVA%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%9Autil%E7%AF%87%EF%BC%881%EF%BC%89/"/>
    <url>/2023/12/25/JAVA%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%9Autil%E7%AF%87%EF%BC%881%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><ul><li>这个类包含各种操作数组的方法(比如排序和查找)。这个类还包含一个静态工厂，允许将数组视为列表。</li></ul><hr><h3 id="ArrayDeque"><a href="#ArrayDeque" class="headerlink" title="ArrayDeque"></a>ArrayDeque</h3><ul><li>实际为循环队列 hail变化，tail一直指向null</li><li>最大容量为：Integer.MAX_VALUE - 8</li><li>初始容量：16个元素的长度</li><li>自动扩容策略：当前容量小于64时，则增长到原来的2倍，大于64则增长到原来的1.5倍，如果增长的需要大于原来的1.5倍，则扩容至所需要的容量</li></ul><hr><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><ul><li><p>初始容量：new出来后为空（空参），在添加了第一个元素后，自动扩容到10</p></li><li><p>最大容量为：Integer.MAX_VALUE - 8（可自行设定，最大为Integer.MAX_VALUE）</p></li><li><p>自动扩容策略：</p><ol><li><p>开始为空，在添加了第一个元素后，自动扩容到10。</p></li><li><p>到原来的1.5倍，如果增长的需要大于原来的1.5倍，则扩容至所需要的容量。</p></li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>JAVA核心源码</category>
      
      <category>util篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>源码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git使用手册</title>
    <link href="/2023/12/25/Git%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    <url>/2023/12/25/Git%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>官网下载：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads (opens new window)</a>下载完成后使用默认进行安装。</p><p>安装完成后，在开始菜单里找到 <code>Git</code> -&gt; <code>Git Bash</code>，蹦出一个类似命令行窗口的东西，就说明Git安装成功！ 还需要最后一步设置，在命令行输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;Your Name&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;email@example.com&quot;</span><br></code></pre></td></tr></table></figure><p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。</p><h2 id="创建版本库（仓库）"><a href="#创建版本库（仓库）" class="headerlink" title="创建版本库（仓库）"></a>创建版本库（仓库）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建仓库</span><br><span class="hljs-built_in">mkdir</span> &lt;仓库name&gt; <br><br><span class="hljs-comment"># 进入仓库</span><br><span class="hljs-built_in">cd</span> &lt;仓库name&gt;<br><br><span class="hljs-comment"># 此命令用于显示当前目录</span><br><span class="hljs-built_in">pwd</span><br><br><span class="hljs-comment"># 把当前目录初始化成Git仓库</span><br>git init<br></code></pre></td></tr></table></figure><blockquote><p>也不一定必须在空目录下创建Git仓库，选择一个已经有东西的目录直接<code>git init</code>也是可以的。</p></blockquote><h2 id="添加文件到仓库"><a href="#添加文件到仓库" class="headerlink" title="添加文件到仓库"></a>添加文件到仓库</h2><p>在仓库目录下放入文件，如新建一个<code>test.txt</code>文件，然后使用<code>git add test.txt</code>命令告诉Git，把文件添加到缓存区，然后使用<code>git commit -m &quot;提交描述&quot;</code>告诉Git，把文件提交到仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加指定文件或文件夹到缓存区，文件需添加后缀</span><br>git add &lt;文件或文件夹name&gt;                   <span class="hljs-comment"># 单个文件</span><br>git add &lt;文件或文件夹name&gt; &lt;文件或文件夹name&gt;  <span class="hljs-comment"># 多个文件</span><br><br><span class="hljs-comment"># 或 全部文件同时添加到缓存区</span><br>git add .<br><br><span class="hljs-comment"># 把文件从缓存区提交至仓库</span><br>git commit -m <span class="hljs-string">&quot;提交描述&quot;</span><br></code></pre></td></tr></table></figure><h4 id="提交描述规范"><a href="#提交描述规范" class="headerlink" title="提交描述规范"></a>提交描述规范</h4><p>在提交代码时输入清晰的说明有利于版本管理，建议搭配如下关键字编写提交描述</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 新建(add)</span><br><span class="hljs-comment"># 删除(rm)</span><br><span class="hljs-comment"># 更新(update)</span><br><span class="hljs-comment"># 改动(change)</span><br><span class="hljs-comment"># 实现</span><br><span class="hljs-comment"># 发布</span><br><span class="hljs-comment"># 修复</span><br>...<br></code></pre></td></tr></table></figure><h2 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h2><h4 id="提交修改"><a href="#提交修改" class="headerlink" title="提交修改"></a>提交修改</h4><p>如修改<code>test.txt</code>的内容后，运行<code>git status</code>命令看看被修改的文件，然后再使用<code>git add test.txt</code>、 <code>git commit -m &quot;修改描述&quot;</code>把修改后的文件提交到仓库，提交后可再次使用<code>git status</code>查看当前状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 显示 新增/删除/被改动等 的文件</span><br>git status<br></code></pre></td></tr></table></figure><h4 id="查看版本记录"><a href="#查看版本记录" class="headerlink" title="查看版本记录"></a>查看版本记录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看版本记录</span><br>git <span class="hljs-built_in">log</span>   <span class="hljs-comment"># 显示版本号、提交时间等信息</span><br></code></pre></td></tr></table></figure><blockquote><p>也可使用可视化工具查看Git版本历史： 在仓库目录右键 &gt; <code>Git BUI Here</code></p></blockquote><h4 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h4><p>首先，Git必须知道当前版本是哪个版本，在Git中，用<code>HEAD</code>表示当前版本，也就是最新的提交1094adb…（注意我的提交ID和你的肯定不一样），上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个^比较容易数不过来，所以写成<code>HEAD~100</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 回退到上一个版本</span><br>git reset --hard HEAD^<br></code></pre></td></tr></table></figure><p>此时查看<code>git log</code>记录发现，原来最新的版本已经没有了，想回到原来最新的版本怎么办？这就需要知道最新的版本的版本号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 跳转到指定版本</span><br>git reset --hard &lt;版本号前几位&gt;<br></code></pre></td></tr></table></figure><p>但是不知道版本号怎么办？Git提供了一个命令<code>git reflog</code>用来记录你的每一次命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reflog<br></code></pre></td></tr></table></figure><h4 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h4><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/897889638509536">https://www.liaoxuefeng.com/wiki/896043488029600/897889638509536(opens new window)</a></p><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/900002180232448">https://www.liaoxuefeng.com/wiki/896043488029600/900002180232448</a></p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h4 id="SSH验证"><a href="#SSH验证" class="headerlink" title="SSH验证"></a>SSH验证</h4><p>使本机能关联远程仓库，首次需要SSH验证</p><ul><li>第1步：创建<code>SSH Key</code>。在用户主（C:\Users\dell）目录下，看看有没有.ssh目录， 如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。 如果没有，打开Shell（Windows下打开Git Bash），创建<code>SSH Key</code>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建SSH Key</span><br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;邮件地址&quot;</span><br></code></pre></td></tr></table></figure><p>1<br>2</p><ul><li>第2步：登陆GitHub，右上角头像 &gt; settings &gt; SSH and GPG keys &gt;Add SSH Key，在key的文本框里粘贴<code>id_rsa.pub</code>文件的内容</li></ul><h4 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h4><p>SSH验证完成后，在github创建仓库，创建仓库时记得取消 <code>Initialize this repository with a README</code>的勾选，然后在本地命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 关联远程仓库，仓库名一般使用origin</span><br>git remote add &lt;仓库名&gt; &lt;远程仓库地址&gt;<br><br><span class="hljs-comment"># 示例</span><br>git remote add origin git@github.com:xugaoyi/test.git<br></code></pre></td></tr></table></figure><p>下一步，就可以把本地库的所有内容推送到远程库上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 把文件推送到远程仓库</span><br>git push -u &lt;仓库名&gt; &lt;分支名&gt;<br><br><span class="hljs-comment"># 示例</span><br>git push -u origin master<br></code></pre></td></tr></table></figure><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><blockquote><p>前提是目录已经<code>git init</code>初始化成仓库，并且<code>git status</code>状态是没有改动的，如果有改动则先<code>git add .</code>添加至缓存区，<code>git commit -m &#39;提交描述&#39;</code>提交至仓库，然后执行上面命令。</p><p>如创建仓库时勾选了 <code>Initialize this repository with a README</code> 则需先拉取<code>README.md</code>文件到本地仓库<code>git pull</code></p><p>可关联多个远程仓库，注意给不同的远程仓库取不一样的名称，提交是分别按名称提交到不一样的远程仓库。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 简化的推送命令</span><br>git push<br></code></pre></td></tr></table></figure><h4 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看远程仓库</span><br>git remote -v<br></code></pre></td></tr></table></figure><h4 id="删除远程仓库"><a href="#删除远程仓库" class="headerlink" title="删除远程仓库"></a>删除远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除远程仓库</span><br>git remote <span class="hljs-built_in">rm</span> &lt;仓库名&gt;<br></code></pre></td></tr></table></figure><h4 id="从远程库克隆项目"><a href="#从远程库克隆项目" class="headerlink" title="从远程库克隆项目"></a>从远程库克隆项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 从远程库克隆项目</span><br>git <span class="hljs-built_in">clone</span> &lt;仓库地址&gt;<br></code></pre></td></tr></table></figure><h5 id="克隆指定分支"><a href="#克隆指定分支" class="headerlink" title="克隆指定分支"></a>克隆指定分支</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 克隆指定分支</span><br>git <span class="hljs-built_in">clone</span> -b &lt;分支名&gt; &lt;仓库地址&gt;<br></code></pre></td></tr></table></figure><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建分支</span><br>git checkout -b &lt;分支名&gt;<br></code></pre></td></tr></table></figure><h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看分支</span><br>git branch<br></code></pre></td></tr></table></figure><p>查看分支时，在分支前带 * 号的表示当前的分支</p><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 切换分支</span><br>git checkout &lt;分支名&gt;<br></code></pre></td></tr></table></figure><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 合并本地的分支</span><br>git merge &lt;分支名&gt;<br><br><span class="hljs-comment"># 合并远程的分支</span><br>git merge &lt;远程仓库名&gt;/&lt;分支名&gt;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>，是将指定分支合并到当前分支，并非当前分支合并到指定分支。</p><p>一般情况下是把当前分支切换到<strong>主分支</strong>，然后把<strong>子分支</strong>合并到<strong>主分支</strong>。</p><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除分支</span><br>git branch -d &lt;分支名&gt;<br></code></pre></td></tr></table></figure><h4 id="修改分支修改分支名"><a href="#修改分支修改分支名" class="headerlink" title="修改分支修改分支名"></a>修改分支修改分支名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 修改分支名</span><br>git branch -m &lt;原分支名&gt; &lt;新分支名&gt;<br></code></pre></td></tr></table></figure><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><p>如对命令不清楚时，可使用<code>git help</code>命令显示出git命令介绍。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 帮助命令</span><br>git <span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">help</span><br>usage: git [--version] [--<span class="hljs-built_in">help</span>] [-C &lt;path&gt;] [-c &lt;name&gt;=&lt;value&gt;]<br>           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]<br>           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]<br>           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]<br>           &lt;<span class="hljs-built_in">command</span>&gt; [&lt;args&gt;]<br><br>These are common Git commands used <span class="hljs-keyword">in</span> various situations:<br><br>start a working area (see also: git <span class="hljs-built_in">help</span> tutorial)<br>   <span class="hljs-built_in">clone</span>      Clone a repository into a new directory<br>   init       Create an empty Git repository or reinitialize an existing one<br><br>work on the current change (see also: git <span class="hljs-built_in">help</span> everyday)<br>   add        Add file contents to the index<br>   <span class="hljs-built_in">mv</span>         Move or rename a file, a directory, or a symlink<br>   reset      Reset current HEAD to the specified state<br>   <span class="hljs-built_in">rm</span>         Remove files from the working tree and from the index<br><br>examine the <span class="hljs-built_in">history</span> and state (see also: git <span class="hljs-built_in">help</span> revisions)<br>   bisect     Use binary search to find the commit that introduced a bug<br>   grep       Print lines matching a pattern<br>   <span class="hljs-built_in">log</span>        Show commit logs<br>   show       Show various types of objects<br>   status     Show the working tree status<br><br>grow, mark and tweak your common <span class="hljs-built_in">history</span><br>   branch     List, create, or delete branches<br>   checkout   Switch branches or restore working tree files<br>   commit     Record changes to the repository<br>   diff       Show changes between commits, commit and working tree, etc<br>   merge      Join two or more development histories together<br>   rebase     Reapply commits on top of another base tip<br>   tag        Create, list, delete or verify a tag object signed with GPG<br><br>collaborate (see also: git <span class="hljs-built_in">help</span> workflows)<br>   fetch      Download objects and refs from another repository<br>   pull       Fetch from and integrate with another repository or a <span class="hljs-built_in">local</span> branch<br>   push       Update remote refs along with associated objects<br><br><span class="hljs-string">&#x27;git help -a&#x27;</span> and <span class="hljs-string">&#x27;git help -g&#x27;</span> list available subcommands and some<br>concept guides. See <span class="hljs-string">&#x27;git help &lt;command&gt;&#x27;</span> or <span class="hljs-string">&#x27;git help &lt;concept&gt;&#x27;</span><br>to <span class="hljs-built_in">read</span> about a specific subcommand or concept.<br></code></pre></td></tr></table></figure><p>翻译工具翻译中文</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">help</span><br>使用：git [--version] [--<span class="hljs-built_in">help</span>] [-C &lt;path&gt;] [-c &lt;name&gt;=&lt;value&gt;]<br>           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]<br>           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]<br>           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]<br>           &lt;<span class="hljs-built_in">command</span>&gt; [&lt;args&gt;]<br><br>这些是在各种情况下使用的通用Git命令：<br><br>start a working area (参见命令: git <span class="hljs-built_in">help</span> tutorial)<br>   <span class="hljs-built_in">clone</span>      将存储库克隆到新目录中<br>   init       创建一个空的Git存储库或重新初始化一个现有的存储库<br><br>work on the current change (参见命令: git <span class="hljs-built_in">help</span> everyday)<br>   add        将文件内容添加到索引中<br>   <span class="hljs-built_in">mv</span>         移动或重命名文件、目录或符号链接<br>   reset      将当前磁头重置为指定状态<br>   <span class="hljs-built_in">rm</span>         从工作树和索引中删除文件<br><br>examine the <span class="hljs-built_in">history</span> and state (参见命令: git <span class="hljs-built_in">help</span> revisions)<br>   bisect     使用二分查找查找引入错误的提交<br>   grep       打印与模式匹配的行<br>   <span class="hljs-built_in">log</span>        显示提交日志<br>   show       显示各种类型的对象<br>   status     显示工作树状态<br><br>grow, mark and tweak your common <span class="hljs-built_in">history</span><br>   branch     列出、创建或删除分支<br>   checkout   切换分支或还原工作树文件<br>   commit     记录对存储库的更改<br>   diff       显示提交、提交和工作树等之间的更改<br>   merge      将两个或多个开发历史连接在一起<br>   rebase     在另一个基本提示之上重新应用提交<br>   tag        创建、列表、删除或验证用GPG签名的标记对象<br><br>collaborate (参见命令: git <span class="hljs-built_in">help</span> workflows)<br>   fetch      从另一个存储库下载对象和引用<br>   pull       从另一个存储库或本地分支获取并与之集成<br>   push       更新远程引用和相关对象<br><br><span class="hljs-string">&#x27;git help -a&#x27;</span> 和 <span class="hljs-string">&#x27;git help -g&#x27;</span> 列出可用的子命令和一些概念指导。<br>命令<span class="hljs-string">&#x27;git help &lt;command&gt;&#x27;</span> 或 <span class="hljs-string">&#x27;git help &lt;concept&gt;&#x27;</span> 查看特定子命令或概念.<br></code></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600">https://www.liaoxuefeng.com/wiki/896043488029600</a></p>]]></content>
    
    
    <categories>
      
      <category>实用指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo文章编辑指南</title>
    <link href="/2023/12/25/hexo%E6%96%87%E7%AB%A0%E7%BC%96%E8%BE%91/"/>
    <url>/2023/12/25/hexo%E6%96%87%E7%AB%A0%E7%BC%96%E8%BE%91/</url>
    
    <content type="html"><![CDATA[<p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Hello</span> <span class="hljs-string">World</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2013</span><span class="hljs-string">/7/13</span> <span class="hljs-number">20</span><span class="hljs-string">:46:25</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>layout</code></td><td align="left">布局</td><td align="left"><a href="https://hexo.io/zh-cn/docs/configuration#%E6%96%87%E7%AB%A0"><code>config.default_layout</code></a></td></tr><tr><td align="left"><code>title</code></td><td align="left">标题</td><td align="left">文章的文件名</td></tr><tr><td align="left"><code>date</code></td><td align="left">建立日期</td><td align="left">文件建立日期</td></tr><tr><td align="left"><code>updated</code></td><td align="left">更新日期</td><td align="left">文件更新日期</td></tr><tr><td align="left"><code>comments</code></td><td align="left">开启文章的评论功能</td><td align="left"><code>true</code></td></tr><tr><td align="left"><code>tags</code></td><td align="left">标签（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>categories</code></td><td align="left">分类（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>permalink</code></td><td align="left">覆盖文章的永久链接，永久链接应该以 <code>/</code> 或 <code>.html</code> 结尾</td><td align="left"><code>null</code></td></tr><tr><td align="left"><code>excerpt</code></td><td align="left">纯文本的页面摘要。使用 <a href="https://hexo.io/zh-cn/docs/tag-plugins#%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%92%8C%E6%88%AA%E6%96%AD">该插件</a> 来格式化文本</td><td align="left"></td></tr><tr><td align="left"><code>disableNunjucks</code></td><td align="left">启用时禁用 Nunjucks 标签 <code>&#123;&#123; &#125;&#125;</code>&#x2F;<code>&#123;% %&#125;</code> 和 <a href="https://hexo.io/zh-cn/docs/tag-plugins">标签插件</a> 的渲染功能</td><td align="left">false</td></tr><tr><td align="left"><code>lang</code></td><td align="left">设置语言以覆盖 <a href="https://hexo.io/zh-cn/docs/internationalization#%E8%B7%AF%E5%BE%84">自动检测</a></td><td align="left">继承自 <code>_config.yml</code></td></tr><tr><td align="left"><code>published</code></td><td align="left">文章是否发布</td><td align="left">对于 <code>_posts</code> 下的文章为 <code>true</code>，对于 <code>_draft</code> 下的文章为 <code>false</code></td></tr></tbody></table><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>根据 <code>_config.yml</code> 中 <a href="https://hexo.io/zh-cn/docs/configuration#%E6%96%87%E7%AB%A0"><code>default_layout</code></a> 的设置，默认布局是 <code>post</code> 。当文章中的布局被禁用(<code>layout: false</code>)，它将不会使用主题处理。然而，它仍然会被任何可用的渲染引擎渲染：如果一篇文章是用 Markdown 写的，并且安装了 Markdown 渲染引擎（比如默认的 <a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a>)，它将被渲染成HTML。</p><p>除非通过 <code>disableNunjucks</code> 设置或 <a href="https://hexo.io/zh-cn/api/renderer#%E7%A6%81%E7%94%A8-Nunjucks-%E6%A0%87%E7%AD%BE">渲染引擎</a> 禁用，否则无论布局如何，<a href="https://hexo.io/zh-cn/docs/tag-plugins">标签插件</a> 总是被处理。</p><h2 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h2><p>只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs subunit">categories:<br>- Diary<br><span class="hljs-keyword">tags:</span><br>- PS3<br>- Games<br></code></pre></td></tr></table></figure><blockquote><p>分类方法的分歧</p><p>如果您有过使用 WordPress 的经验，就很容易误解 Hexo 的分类方式。WordPress 支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是 Hexo 不支持指定多个同级分类。下面的指定方法：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">categories</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Diary</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Life</span><br></code></pre></td></tr></table></figure><p>会使分类 <code>Life</code> 成为 <code>Diary</code> 的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p><p>如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">categories</span>:<br><span class="hljs-literal">-</span> [Diary, PlayStation]<br><span class="hljs-literal">-</span> [Diary, Games]<br><span class="hljs-literal">-</span> [Life]<br></code></pre></td></tr></table></figure><p>此时这篇文章同时包括三个分类： <code>PlayStation</code> 和 <code>Games</code> 分别都是父分类 <code>Diary</code> 的子分类，同时 <code>Life</code> 是一个没有子分类的分类。</p></blockquote><h2 id="JSON-Front-matter"><a href="#JSON-Front-matter" class="headerlink" title="JSON Front-matter"></a>JSON Front-matter</h2><p>除了 YAML 外，你也可以使用 JSON 来编写 Front-matter，只要将 <code>---</code> 代换成 <code>;;;</code> 即可。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;Hello World&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;2013/7/13 20:46:25&quot;</span><br><span class="hljs-comment">;;;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>实用指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实用指南</tag>
      
      <tag>文章编辑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/12/25/hello-world/"/>
    <url>/2023/12/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
