<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Git使用手册</title>
    <link href="/2023/12/25/Git%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    <url>/2023/12/25/Git%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>官网下载：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads (opens new window)</a>下载完成后使用默认进行安装。</p><p>安装完成后，在开始菜单里找到 <code>Git</code> -&gt; <code>Git Bash</code>，蹦出一个类似命令行窗口的东西，就说明Git安装成功！ 还需要最后一步设置，在命令行输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;Your Name&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;email@example.com&quot;</span><br></code></pre></td></tr></table></figure><p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。</p><h2 id="创建版本库（仓库）"><a href="#创建版本库（仓库）" class="headerlink" title="创建版本库（仓库）"></a>创建版本库（仓库）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建仓库</span><br><span class="hljs-built_in">mkdir</span> &lt;仓库name&gt; <br><br><span class="hljs-comment"># 进入仓库</span><br><span class="hljs-built_in">cd</span> &lt;仓库name&gt;<br><br><span class="hljs-comment"># 此命令用于显示当前目录</span><br><span class="hljs-built_in">pwd</span><br><br><span class="hljs-comment"># 把当前目录初始化成Git仓库</span><br>git init<br></code></pre></td></tr></table></figure><blockquote><p>也不一定必须在空目录下创建Git仓库，选择一个已经有东西的目录直接<code>git init</code>也是可以的。</p></blockquote><h2 id="添加文件到仓库"><a href="#添加文件到仓库" class="headerlink" title="添加文件到仓库"></a>添加文件到仓库</h2><p>在仓库目录下放入文件，如新建一个<code>test.txt</code>文件，然后使用<code>git add test.txt</code>命令告诉Git，把文件添加到缓存区，然后使用<code>git commit -m &quot;提交描述&quot;</code>告诉Git，把文件提交到仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加指定文件或文件夹到缓存区，文件需添加后缀</span><br>git add &lt;文件或文件夹name&gt;                   <span class="hljs-comment"># 单个文件</span><br>git add &lt;文件或文件夹name&gt; &lt;文件或文件夹name&gt;  <span class="hljs-comment"># 多个文件</span><br><br><span class="hljs-comment"># 或 全部文件同时添加到缓存区</span><br>git add .<br><br><span class="hljs-comment"># 把文件从缓存区提交至仓库</span><br>git commit -m <span class="hljs-string">&quot;提交描述&quot;</span><br></code></pre></td></tr></table></figure><h4 id="提交描述规范"><a href="#提交描述规范" class="headerlink" title="提交描述规范"></a>提交描述规范</h4><p>在提交代码时输入清晰的说明有利于版本管理，建议搭配如下关键字编写提交描述</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 新建(add)</span><br><span class="hljs-comment"># 删除(rm)</span><br><span class="hljs-comment"># 更新(update)</span><br><span class="hljs-comment"># 改动(change)</span><br><span class="hljs-comment"># 实现</span><br><span class="hljs-comment"># 发布</span><br><span class="hljs-comment"># 修复</span><br>...<br></code></pre></td></tr></table></figure><h2 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h2><h4 id="提交修改"><a href="#提交修改" class="headerlink" title="提交修改"></a>提交修改</h4><p>如修改<code>test.txt</code>的内容后，运行<code>git status</code>命令看看被修改的文件，然后再使用<code>git add test.txt</code>、 <code>git commit -m &quot;修改描述&quot;</code>把修改后的文件提交到仓库，提交后可再次使用<code>git status</code>查看当前状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 显示 新增/删除/被改动等 的文件</span><br>git status<br></code></pre></td></tr></table></figure><h4 id="查看版本记录"><a href="#查看版本记录" class="headerlink" title="查看版本记录"></a>查看版本记录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看版本记录</span><br>git <span class="hljs-built_in">log</span>   <span class="hljs-comment"># 显示版本号、提交时间等信息</span><br></code></pre></td></tr></table></figure><blockquote><p>也可使用可视化工具查看Git版本历史： 在仓库目录右键 &gt; <code>Git BUI Here</code></p></blockquote><h4 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h4><p>首先，Git必须知道当前版本是哪个版本，在Git中，用<code>HEAD</code>表示当前版本，也就是最新的提交1094adb…（注意我的提交ID和你的肯定不一样），上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个^比较容易数不过来，所以写成<code>HEAD~100</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 回退到上一个版本</span><br>git reset --hard HEAD^<br></code></pre></td></tr></table></figure><p>此时查看<code>git log</code>记录发现，原来最新的版本已经没有了，想回到原来最新的版本怎么办？这就需要知道最新的版本的版本号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 跳转到指定版本</span><br>git reset --hard &lt;版本号前几位&gt;<br></code></pre></td></tr></table></figure><p>但是不知道版本号怎么办？Git提供了一个命令<code>git reflog</code>用来记录你的每一次命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reflog<br></code></pre></td></tr></table></figure><h4 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h4><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/897889638509536">https://www.liaoxuefeng.com/wiki/896043488029600/897889638509536(opens new window)</a></p><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/900002180232448">https://www.liaoxuefeng.com/wiki/896043488029600/900002180232448</a></p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h4 id="SSH验证"><a href="#SSH验证" class="headerlink" title="SSH验证"></a>SSH验证</h4><p>使本机能关联远程仓库，首次需要SSH验证</p><ul><li>第1步：创建<code>SSH Key</code>。在用户主（C:\Users\dell）目录下，看看有没有.ssh目录， 如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。 如果没有，打开Shell（Windows下打开Git Bash），创建<code>SSH Key</code>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建SSH Key</span><br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;邮件地址&quot;</span><br></code></pre></td></tr></table></figure><p>1<br>2</p><ul><li>第2步：登陆GitHub，右上角头像 &gt; settings &gt; SSH and GPG keys &gt;Add SSH Key，在key的文本框里粘贴<code>id_rsa.pub</code>文件的内容</li></ul><h4 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h4><p>SSH验证完成后，在github创建仓库，创建仓库时记得取消 <code>Initialize this repository with a README</code>的勾选，然后在本地命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 关联远程仓库，仓库名一般使用origin</span><br>git remote add &lt;仓库名&gt; &lt;远程仓库地址&gt;<br><br><span class="hljs-comment"># 示例</span><br>git remote add origin git@github.com:xugaoyi/test.git<br></code></pre></td></tr></table></figure><p>下一步，就可以把本地库的所有内容推送到远程库上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 把文件推送到远程仓库</span><br>git push -u &lt;仓库名&gt; &lt;分支名&gt;<br><br><span class="hljs-comment"># 示例</span><br>git push -u origin master<br></code></pre></td></tr></table></figure><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><blockquote><p>前提是目录已经<code>git init</code>初始化成仓库，并且<code>git status</code>状态是没有改动的，如果有改动则先<code>git add .</code>添加至缓存区，<code>git commit -m &#39;提交描述&#39;</code>提交至仓库，然后执行上面命令。</p><p>如创建仓库时勾选了 <code>Initialize this repository with a README</code> 则需先拉取<code>README.md</code>文件到本地仓库<code>git pull</code></p><p>可关联多个远程仓库，注意给不同的远程仓库取不一样的名称，提交是分别按名称提交到不一样的远程仓库。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 简化的推送命令</span><br>git push<br></code></pre></td></tr></table></figure><h4 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看远程仓库</span><br>git remote -v<br></code></pre></td></tr></table></figure><h4 id="删除远程仓库"><a href="#删除远程仓库" class="headerlink" title="删除远程仓库"></a>删除远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除远程仓库</span><br>git remote <span class="hljs-built_in">rm</span> &lt;仓库名&gt;<br></code></pre></td></tr></table></figure><h4 id="从远程库克隆项目"><a href="#从远程库克隆项目" class="headerlink" title="从远程库克隆项目"></a>从远程库克隆项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 从远程库克隆项目</span><br>git <span class="hljs-built_in">clone</span> &lt;仓库地址&gt;<br></code></pre></td></tr></table></figure><h5 id="克隆指定分支"><a href="#克隆指定分支" class="headerlink" title="克隆指定分支"></a>克隆指定分支</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 克隆指定分支</span><br>git <span class="hljs-built_in">clone</span> -b &lt;分支名&gt; &lt;仓库地址&gt;<br></code></pre></td></tr></table></figure><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建分支</span><br>git checkout -b &lt;分支名&gt;<br></code></pre></td></tr></table></figure><h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看分支</span><br>git branch<br></code></pre></td></tr></table></figure><p>查看分支时，在分支前带 * 号的表示当前的分支</p><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 切换分支</span><br>git checkout &lt;分支名&gt;<br></code></pre></td></tr></table></figure><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 合并本地的分支</span><br>git merge &lt;分支名&gt;<br><br><span class="hljs-comment"># 合并远程的分支</span><br>git merge &lt;远程仓库名&gt;/&lt;分支名&gt;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>，是将指定分支合并到当前分支，并非当前分支合并到指定分支。</p><p>一般情况下是把当前分支切换到<strong>主分支</strong>，然后把<strong>子分支</strong>合并到<strong>主分支</strong>。</p><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除分支</span><br>git branch -d &lt;分支名&gt;<br></code></pre></td></tr></table></figure><h4 id="修改分支修改分支名"><a href="#修改分支修改分支名" class="headerlink" title="修改分支修改分支名"></a>修改分支修改分支名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 修改分支名</span><br>git branch -m &lt;原分支名&gt; &lt;新分支名&gt;<br></code></pre></td></tr></table></figure><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><p>如对命令不清楚时，可使用<code>git help</code>命令显示出git命令介绍。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 帮助命令</span><br>git <span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">help</span><br>usage: git [--version] [--<span class="hljs-built_in">help</span>] [-C &lt;path&gt;] [-c &lt;name&gt;=&lt;value&gt;]<br>           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]<br>           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]<br>           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]<br>           &lt;<span class="hljs-built_in">command</span>&gt; [&lt;args&gt;]<br><br>These are common Git commands used <span class="hljs-keyword">in</span> various situations:<br><br>start a working area (see also: git <span class="hljs-built_in">help</span> tutorial)<br>   <span class="hljs-built_in">clone</span>      Clone a repository into a new directory<br>   init       Create an empty Git repository or reinitialize an existing one<br><br>work on the current change (see also: git <span class="hljs-built_in">help</span> everyday)<br>   add        Add file contents to the index<br>   <span class="hljs-built_in">mv</span>         Move or rename a file, a directory, or a symlink<br>   reset      Reset current HEAD to the specified state<br>   <span class="hljs-built_in">rm</span>         Remove files from the working tree and from the index<br><br>examine the <span class="hljs-built_in">history</span> and state (see also: git <span class="hljs-built_in">help</span> revisions)<br>   bisect     Use binary search to find the commit that introduced a bug<br>   grep       Print lines matching a pattern<br>   <span class="hljs-built_in">log</span>        Show commit logs<br>   show       Show various types of objects<br>   status     Show the working tree status<br><br>grow, mark and tweak your common <span class="hljs-built_in">history</span><br>   branch     List, create, or delete branches<br>   checkout   Switch branches or restore working tree files<br>   commit     Record changes to the repository<br>   diff       Show changes between commits, commit and working tree, etc<br>   merge      Join two or more development histories together<br>   rebase     Reapply commits on top of another base tip<br>   tag        Create, list, delete or verify a tag object signed with GPG<br><br>collaborate (see also: git <span class="hljs-built_in">help</span> workflows)<br>   fetch      Download objects and refs from another repository<br>   pull       Fetch from and integrate with another repository or a <span class="hljs-built_in">local</span> branch<br>   push       Update remote refs along with associated objects<br><br><span class="hljs-string">&#x27;git help -a&#x27;</span> and <span class="hljs-string">&#x27;git help -g&#x27;</span> list available subcommands and some<br>concept guides. See <span class="hljs-string">&#x27;git help &lt;command&gt;&#x27;</span> or <span class="hljs-string">&#x27;git help &lt;concept&gt;&#x27;</span><br>to <span class="hljs-built_in">read</span> about a specific subcommand or concept.<br></code></pre></td></tr></table></figure><p>翻译工具翻译中文</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">help</span><br>使用：git [--version] [--<span class="hljs-built_in">help</span>] [-C &lt;path&gt;] [-c &lt;name&gt;=&lt;value&gt;]<br>           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]<br>           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]<br>           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]<br>           &lt;<span class="hljs-built_in">command</span>&gt; [&lt;args&gt;]<br><br>这些是在各种情况下使用的通用Git命令：<br><br>start a working area (参见命令: git <span class="hljs-built_in">help</span> tutorial)<br>   <span class="hljs-built_in">clone</span>      将存储库克隆到新目录中<br>   init       创建一个空的Git存储库或重新初始化一个现有的存储库<br><br>work on the current change (参见命令: git <span class="hljs-built_in">help</span> everyday)<br>   add        将文件内容添加到索引中<br>   <span class="hljs-built_in">mv</span>         移动或重命名文件、目录或符号链接<br>   reset      将当前磁头重置为指定状态<br>   <span class="hljs-built_in">rm</span>         从工作树和索引中删除文件<br><br>examine the <span class="hljs-built_in">history</span> and state (参见命令: git <span class="hljs-built_in">help</span> revisions)<br>   bisect     使用二分查找查找引入错误的提交<br>   grep       打印与模式匹配的行<br>   <span class="hljs-built_in">log</span>        显示提交日志<br>   show       显示各种类型的对象<br>   status     显示工作树状态<br><br>grow, mark and tweak your common <span class="hljs-built_in">history</span><br>   branch     列出、创建或删除分支<br>   checkout   切换分支或还原工作树文件<br>   commit     记录对存储库的更改<br>   diff       显示提交、提交和工作树等之间的更改<br>   merge      将两个或多个开发历史连接在一起<br>   rebase     在另一个基本提示之上重新应用提交<br>   tag        创建、列表、删除或验证用GPG签名的标记对象<br><br>collaborate (参见命令: git <span class="hljs-built_in">help</span> workflows)<br>   fetch      从另一个存储库下载对象和引用<br>   pull       从另一个存储库或本地分支获取并与之集成<br>   push       更新远程引用和相关对象<br><br><span class="hljs-string">&#x27;git help -a&#x27;</span> 和 <span class="hljs-string">&#x27;git help -g&#x27;</span> 列出可用的子命令和一些概念指导。<br>命令<span class="hljs-string">&#x27;git help &lt;command&gt;&#x27;</span> 或 <span class="hljs-string">&#x27;git help &lt;concept&gt;&#x27;</span> 查看特定子命令或概念.<br></code></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600">https://www.liaoxuefeng.com/wiki/896043488029600</a></p>]]></content>
    
    
    <categories>
      
      <category>实用指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo文章编辑指南</title>
    <link href="/2023/12/25/hexo%E6%96%87%E7%AB%A0%E7%BC%96%E8%BE%91/"/>
    <url>/2023/12/25/hexo%E6%96%87%E7%AB%A0%E7%BC%96%E8%BE%91/</url>
    
    <content type="html"><![CDATA[<p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Hello</span> <span class="hljs-string">World</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2013</span><span class="hljs-string">/7/13</span> <span class="hljs-number">20</span><span class="hljs-string">:46:25</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>layout</code></td><td align="left">布局</td><td align="left"><a href="https://hexo.io/zh-cn/docs/configuration#%E6%96%87%E7%AB%A0"><code>config.default_layout</code></a></td></tr><tr><td align="left"><code>title</code></td><td align="left">标题</td><td align="left">文章的文件名</td></tr><tr><td align="left"><code>date</code></td><td align="left">建立日期</td><td align="left">文件建立日期</td></tr><tr><td align="left"><code>updated</code></td><td align="left">更新日期</td><td align="left">文件更新日期</td></tr><tr><td align="left"><code>comments</code></td><td align="left">开启文章的评论功能</td><td align="left"><code>true</code></td></tr><tr><td align="left"><code>tags</code></td><td align="left">标签（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>categories</code></td><td align="left">分类（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>permalink</code></td><td align="left">覆盖文章的永久链接，永久链接应该以 <code>/</code> 或 <code>.html</code> 结尾</td><td align="left"><code>null</code></td></tr><tr><td align="left"><code>excerpt</code></td><td align="left">纯文本的页面摘要。使用 <a href="https://hexo.io/zh-cn/docs/tag-plugins#%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%92%8C%E6%88%AA%E6%96%AD">该插件</a> 来格式化文本</td><td align="left"></td></tr><tr><td align="left"><code>disableNunjucks</code></td><td align="left">启用时禁用 Nunjucks 标签 <code>&#123;&#123; &#125;&#125;</code>&#x2F;<code>&#123;% %&#125;</code> 和 <a href="https://hexo.io/zh-cn/docs/tag-plugins">标签插件</a> 的渲染功能</td><td align="left">false</td></tr><tr><td align="left"><code>lang</code></td><td align="left">设置语言以覆盖 <a href="https://hexo.io/zh-cn/docs/internationalization#%E8%B7%AF%E5%BE%84">自动检测</a></td><td align="left">继承自 <code>_config.yml</code></td></tr><tr><td align="left"><code>published</code></td><td align="left">文章是否发布</td><td align="left">对于 <code>_posts</code> 下的文章为 <code>true</code>，对于 <code>_draft</code> 下的文章为 <code>false</code></td></tr></tbody></table><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>根据 <code>_config.yml</code> 中 <a href="https://hexo.io/zh-cn/docs/configuration#%E6%96%87%E7%AB%A0"><code>default_layout</code></a> 的设置，默认布局是 <code>post</code> 。当文章中的布局被禁用(<code>layout: false</code>)，它将不会使用主题处理。然而，它仍然会被任何可用的渲染引擎渲染：如果一篇文章是用 Markdown 写的，并且安装了 Markdown 渲染引擎（比如默认的 <a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a>)，它将被渲染成HTML。</p><p>除非通过 <code>disableNunjucks</code> 设置或 <a href="https://hexo.io/zh-cn/api/renderer#%E7%A6%81%E7%94%A8-Nunjucks-%E6%A0%87%E7%AD%BE">渲染引擎</a> 禁用，否则无论布局如何，<a href="https://hexo.io/zh-cn/docs/tag-plugins">标签插件</a> 总是被处理。</p><h2 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h2><p>只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs subunit">categories:<br>- Diary<br><span class="hljs-keyword">tags:</span><br>- PS3<br>- Games<br></code></pre></td></tr></table></figure><blockquote><p>分类方法的分歧</p><p>如果您有过使用 WordPress 的经验，就很容易误解 Hexo 的分类方式。WordPress 支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是 Hexo 不支持指定多个同级分类。下面的指定方法：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">categories</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Diary</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Life</span><br></code></pre></td></tr></table></figure><p>会使分类 <code>Life</code> 成为 <code>Diary</code> 的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p><p>如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">categories</span>:<br><span class="hljs-literal">-</span> [Diary, PlayStation]<br><span class="hljs-literal">-</span> [Diary, Games]<br><span class="hljs-literal">-</span> [Life]<br></code></pre></td></tr></table></figure><p>此时这篇文章同时包括三个分类： <code>PlayStation</code> 和 <code>Games</code> 分别都是父分类 <code>Diary</code> 的子分类，同时 <code>Life</code> 是一个没有子分类的分类。</p></blockquote><h2 id="JSON-Front-matter"><a href="#JSON-Front-matter" class="headerlink" title="JSON Front-matter"></a>JSON Front-matter</h2><p>除了 YAML 外，你也可以使用 JSON 来编写 Front-matter，只要将 <code>---</code> 代换成 <code>;;;</code> 即可。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;Hello World&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;2013/7/13 20:46:25&quot;</span><br><span class="hljs-comment">;;;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>实用指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实用指南</tag>
      
      <tag>文章编辑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/12/25/hello-world/"/>
    <url>/2023/12/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
