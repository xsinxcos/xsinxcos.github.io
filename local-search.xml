<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>linux常用命令（持续更新中）</title>
    <link href="/2023/12/26/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/12/26/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="1、ls命令"><a href="#1、ls命令" class="headerlink" title="1、ls命令"></a>1、ls命令</h3><p>就是 list 的缩写，通过 ls 命令不仅可以查看 linux 文件夹包含的文件，而且可以查看文件权限(包括目录、文件夹、文件权限)查看目录信息等等。</p><p><strong>常用参数搭配：</strong></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">ls</span> -a 列出目录所有文件，包含以.开始的隐藏文件<br><span class="hljs-keyword">ls</span> -A 列出除.及<span class="hljs-string">..</span>的其它文件<br><span class="hljs-keyword">ls</span> -r 反序排列<br><span class="hljs-keyword">ls</span> -t 以文件修改时间排序<br><span class="hljs-keyword">ls</span> -S 以文件大小排序<br><span class="hljs-keyword">ls</span> -h 以易读大小显示<br><span class="hljs-keyword">ls</span> -l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来<br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>(1) 按易读方式按时间反序排序，并显示文件详细信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -lhrt<br></code></pre></td></tr></table></figure><p>(2) 按大小反序显示文件详细信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -lrS<br></code></pre></td></tr></table></figure><p>(3)列出当前目录中所有以”t”开头的目录的详细内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l t*<br></code></pre></td></tr></table></figure><p>(4) 列出文件绝对路径（不包含隐藏文件）</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">ls | sed <span class="hljs-string">&quot;s:^:`pwd`/:&quot;</span><br></code></pre></td></tr></table></figure><p>(5) 列出文件绝对路径（包含隐藏文件）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> <span class="hljs-variable">$pwd</span> -maxdepth 1 | xargs ls -ld<br></code></pre></td></tr></table></figure><h3 id="2、cd-命令"><a href="#2、cd-命令" class="headerlink" title="2、cd 命令"></a>2、cd 命令</h3><p>cd(changeDirectory) 命令语法：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cd</span><span class="hljs-meta"> [目录名]</span><br></code></pre></td></tr></table></figure><p>说明：切换当前目录至 dirName。</p><p><strong>实例：</strong></p><p>（1）进入要目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /<br></code></pre></td></tr></table></figure><p>（2）进入 “home” 目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~<br></code></pre></td></tr></table></figure><p>（3）进入上一次工作路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> -<br></code></pre></td></tr></table></figure><p>（4）把上个命令的参数作为cd参数使用。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cd</span> !<span class="hljs-variable">$</span><br></code></pre></td></tr></table></figure><h3 id="3、pwd-命令"><a href="#3、pwd-命令" class="headerlink" title="3、pwd 命令"></a>3、pwd 命令</h3><p>pwd 命令用于查看当前工作目录路径。</p><p><strong>实例：</strong></p><p>（1）查看当前路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span><br></code></pre></td></tr></table></figure><p>（2）查看软链接的实际路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span> -P<br></code></pre></td></tr></table></figure><p>4、mkdir 命令</p><p>mkdir 命令用于创建文件夹。</p><p>可用选项：</p><ul><li><strong>-m</strong>: 对新建目录设置存取权限，也可以用 chmod 命令设置;</li><li><strong>-p</strong>: 可以是一个路径名称。此时若路径中的某些目录尚不存在,加上此选项后，系统将自动建立好那些尚不在的目录，即一次可以建立多个目录。</li></ul><p><strong>实例：</strong></p><p>（1）当前工作目录下创建名为 t的文件夹</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir t<br></code></pre></td></tr></table></figure><p>（2）在 tmp 目录下创建路径为 test&#x2F;t1&#x2F;t 的目录，若不存在，则创建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /tmp/test/t1/t<br></code></pre></td></tr></table></figure><h3 id="5、rm-命令"><a href="#5、rm-命令" class="headerlink" title="5、rm 命令"></a>5、rm 命令</h3><p>删除一个目录中的一个或多个文件或目录，如果没有使用 -r 选项，则 rm 不会删除目录。如果使用 rm 来删除文件，通常仍可以将该文件恢复原状。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> [选项] 文件…<br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）删除任何 .log 文件，删除前逐一询问确认：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -i *.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>（2）删除 test 子目录及子目录中所有档案删除，并且不用一一确认：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>（3）删除以 -f 开头的文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">rm</span> <span class="hljs-literal">--</span> <span class="hljs-operator">-f</span>*<br></code></pre></td></tr></table></figure><h3 id="6、rmdir-命令"><a href="#6、rmdir-命令" class="headerlink" title="6、rmdir 命令"></a>6、rmdir 命令</h3><p>从一个目录中删除一个或多个子目录项，删除某目录时也必须具有对其父目录的写权限。</p><p><strong>注意</strong>：不能删除非空目录</p><p><strong>实例：</strong></p><p>（1）当 parent 子目录被删除后使它也成为空目录的话，则顺便一并删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rmdir</span> -p parent/child/child11<br></code></pre></td></tr></table></figure><h3 id="7、mv-命令"><a href="#7、mv-命令" class="headerlink" title="7、mv 命令"></a>7、mv 命令</h3><p>移动文件或修改文件名，根据第二参数类型（如目录，则移动文件；如为文件则重命令该文件）。</p><p>当第二个参数为目录时，第一个参数可以是多个以空格分隔的文件或目录，然后移动第一个参数指定的多个文件到第二个参数指定的目录中。</p><p><strong>实例：</strong></p><p>（1）将文件 test.log 重命名为 test1.txt</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">mv <span class="hljs-keyword">test</span>.<span class="hljs-keyword">log</span> test1.txt<br></code></pre></td></tr></table></figure><p>（2）将文件 log1.txt,log2.txt,log3.txt 移动到根的 test3 目录中</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">mv llo<span class="hljs-name">g1.</span>txt lo<span class="hljs-name">g2.</span>txt lo<span class="hljs-name">g3.</span>txt /test<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>（3）将文件 file1 改名为 file2，如果 file2 已经存在，则询问是否覆盖</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">mv -i lo<span class="hljs-name">g1.</span>txt lo<span class="hljs-name">g2.</span>txt<br></code></pre></td></tr></table></figure><p>（4）移动当前文件夹下的所有文件到上一级目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> * ../<br></code></pre></td></tr></table></figure><h3 id="8、cp-命令"><a href="#8、cp-命令" class="headerlink" title="8、cp 命令"></a>8、cp 命令</h3><p>将源文件复制至目标文件，或将多个源文件复制至目标目录。</p><p>注意：命令行复制，如果目标文件已经存在会提示是否覆盖，而在 shell 脚本中，如果不加 -i 参数，则不会提示，而是直接覆盖！</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-i 提示</span><br><span class="hljs-deletion">-r 复制目录及目录内所有项目</span><br><span class="hljs-deletion">-a 复制的文件与原文件时间一样</span><br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）复制 a.txt 到 test 目录下，保持原文件时间，如果原文件存在提示是否覆盖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> -ai a.txt <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>（2）为 a.txt 建立一个链接（快捷方式）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cp -s <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.txt</span> link_a.txt<br></code></pre></td></tr></table></figure><h3 id="9、cat-命令"><a href="#9、cat-命令" class="headerlink" title="9、cat 命令"></a>9、cat 命令</h3><p>cat 主要有三大功能：</p><p>1.一次显示整个文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> filename<br></code></pre></td></tr></table></figure><p>2.从键盘创建一个文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &gt; filename<br></code></pre></td></tr></table></figure><p>只能创建新文件，不能编辑已有文件。</p><p>3.将几个文件合并为一个文件:</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> file1 file2 &gt; <span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure><ul><li>-b 对非空输出行号</li><li>-n 输出所有行号</li></ul><p><strong>实例：</strong></p><p>（1）把 log2012.log 的文件内容加上行号后输入 log2013.log 这个文件里</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">cat</span> -n log2012.<span class="hljs-built_in">log</span> log2013.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>（2）把 log2012.log 和 log2013.log 的文件内容加上行号（空白行不加）之后将内容附加到 log.log 里</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">cat</span> -b log2012.<span class="hljs-built_in">log</span> log2013.<span class="hljs-built_in">log</span> <span class="hljs-built_in">log</span>.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>（3）使用 here doc 生成新文件</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> &gt;<span class="hljs-keyword">log</span>.txt &lt;&lt;EOF<br>&gt;Hello<br>&gt;World<br>&gt;<span class="hljs-keyword">PWD</span>=$(<span class="hljs-keyword">pwd</span>)<br>&gt;EOF<br><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span> <span class="hljs-keyword">log</span>.txt<br><span class="hljs-keyword">cat</span> <span class="hljs-keyword">log</span>.txt<br>Hello<br>World<br><span class="hljs-keyword">PWD</span>=/opt/soft/<span class="hljs-keyword">test</span><br></code></pre></td></tr></table></figure><p>（4）反向列示</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">tac <span class="hljs-keyword">log</span>.txt<br><span class="hljs-keyword">PWD</span>=/opt/soft/<span class="hljs-keyword">test</span><br>World<br>Hello<br></code></pre></td></tr></table></figure><h3 id="10、more-命令"><a href="#10、more-命令" class="headerlink" title="10、more 命令"></a>10、more 命令</h3><p>功能类似于 cat, more 会以一页一页的显示方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示。</p><p><strong>命令参数：</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-addition">+n      从笫 n 行开始显示</span><br><span class="hljs-deletion">-n       定义屏幕大小为n行</span><br><span class="hljs-addition">+/pattern 在每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示 </span><br><span class="hljs-deletion">-c       从顶部清屏，然后显示</span><br><span class="hljs-deletion">-d       提示“Press space to continue，’q’ to quit（按空格键继续，按q键退出）”，禁用响铃功能</span><br><span class="hljs-deletion">-l        忽略Ctrl+l（换页）字符</span><br><span class="hljs-deletion">-p       通过清除窗口而不是滚屏来对文件进行换页，与-c选项相似</span><br><span class="hljs-deletion">-s       把连续的多个空行显示为一行</span><br><span class="hljs-deletion">-u       把文件内容中的下画线去掉</span><br></code></pre></td></tr></table></figure><p><strong>常用操作命令：</strong></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs excel">Enter    向下 <span class="hljs-built_in">n</span> 行，需要定义。默认为 <span class="hljs-number">1</span> 行<br>Ctrl+F   向下滚动一屏<br>空格键  向下滚动一屏<br>Ctrl+B  返回上一屏<br>=       输出当前行的行号<br><span class="hljs-symbol">:f</span>     输出文件名和当前行的行号<br>V      调用vi编辑器<br>!命令   调用Shell，并执行命令<br>q       退出more<br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）显示文件中从第3行起的内容</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">more</span> +<span class="hljs-number">3</span> text.txt<br></code></pre></td></tr></table></figure><p>（2）在所列出文件目录详细信息，借助管道使每次显示 5 行</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span> | <span class="hljs-keyword">more</span> -5<br></code></pre></td></tr></table></figure><p>按空格显示下 5 行。</p><h3 id="11、less-命令"><a href="#11、less-命令" class="headerlink" title="11、less 命令"></a>11、less 命令</h3><p>less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。</p><p><strong>常用命令参数：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css">-<span class="hljs-selector-tag">i</span>  忽略搜索时的大小写<br>-N  显示每行的行号<br>-o  &lt;文件名&gt; 将less 输出的内容在指定文件中保存起来<br>-s  显示连续空行为一行<br>/字符串：向下搜索“字符串”的功能<br>?字符串：向上搜索“字符串”的功能<br>n：重复前一个搜索（与 / 或 ? 有关）<br>N：反向重复前一个搜索（与 / 或 ? 有关）<br>-x &lt;数字&gt; 将“tab”键显示为规定的数字空格<br><span class="hljs-selector-tag">b</span>  向后翻一页<br>d  向后翻半页<br>h  显示帮助界面<br><span class="hljs-selector-tag">Q</span>  退出less 命令<br>u  向前滚动半页<br>y  向前滚动一行<br>空格键 滚动一行<br>回车键 滚动一页<br><span class="hljs-selector-attr">[pagedown]</span>： 向下翻动一页<br><span class="hljs-selector-attr">[pageup]</span>：   向上翻动一页<br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）ps 查看进程信息并通过 less 分页显示</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">ps -aux <span class="hljs-string">| less -N</span><br></code></pre></td></tr></table></figure><p>（2）查看多个文件</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">less <span class="hljs-number">1</span>.<span class="hljs-built_in">log</span> <span class="hljs-number">2</span>.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>可以使用 n 查看下一个，使用 p 查看前一个。</p><h3 id="12、head-命令"><a href="#12、head-命令" class="headerlink" title="12、head 命令"></a>12、head 命令</h3><p>head 用来显示档案的开头至标准输出中，默认 head 命令打印其相应文件的开头 10 行。</p><p><strong>常用参数：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">-n<span class="hljs-tag">&lt;<span class="hljs-name">行数</span>&gt;</span> 显示的行数（行数为复数表示从最后向前数）<br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）显示 1.log 文件中前 20 行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">head</span> <span class="hljs-number">1</span>.log -n <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>（2）显示 1.log 文件前 20 字节</p><figure class="highlight stan"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stan"><span class="hljs-built_in">head</span> -c <span class="hljs-number">20</span> log2014.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>（3）显示 t.log最后 10 行</p><figure class="highlight stan"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stan"><span class="hljs-built_in">head</span> -n -<span class="hljs-number">10</span> t.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><h3 id="13、tail-命令"><a href="#13、tail-命令" class="headerlink" title="13、tail 命令"></a>13、tail 命令</h3><p>用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件。</p><p><strong>常用参数：</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-f 循环读取（常用于查看递增的日志文件）</span><br><span class="hljs-deletion">-n&lt;行数&gt; 显示行数（从后向前）</span><br></code></pre></td></tr></table></figure><p>（1）循环读取逐渐增加的文件内容</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-built_in">ping</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> &gt; <span class="hljs-built_in">ping</span>.<span class="hljs-built_in">log</span> &amp;<br></code></pre></td></tr></table></figure><p>后台运行：可使用 jobs -l 查看，也可使用 fg 将其移到前台运行。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">tail -f <span class="hljs-built_in">ping</span>.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>（查看日志）</p><h3 id="14、which-命令"><a href="#14、which-命令" class="headerlink" title="14、which 命令"></a>14、which 命令</h3><p>在 linux 要查找某个文件，但不知道放在哪里了，可以使用下面的一些命令来搜索：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">which     查看可执行文件的位置。<br>whereis 查看文件的位置。<br>locate  配合数据库查看文件位置。<br><span class="hljs-built_in">find</span>        实际搜寻硬盘查询文件名称。<br></code></pre></td></tr></table></figure><p>which 是在 PATH 就是指定的路径中，搜索某个系统命令的位置，并返回第一个搜索结果。使用 which 命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。</p><p><strong>常用参数：</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-n 　指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。</span><br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）查看 ls 命令是否存在，执行哪个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">which</span> <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p>（2）查看 which</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">which</span> <span class="hljs-built_in">which</span><br></code></pre></td></tr></table></figure><p>（3）查看 cd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">which</span> <span class="hljs-built_in">cd</span>（显示不存在，因为 <span class="hljs-built_in">cd</span> 是内建命令，而 <span class="hljs-built_in">which</span> 查找显示是 PATH 中的命令）<br></code></pre></td></tr></table></figure><p>查看当前 PATH 配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure><p>或使用 env 查看所有环境变量及对应值</p><h3 id="15、whereis-命令"><a href="#15、whereis-命令" class="headerlink" title="15、whereis 命令"></a>15、whereis 命令</h3><p>whereis 命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。whereis 及 locate 都是基于系统内建的数据库进行搜索，因此效率很高，而find则是遍历硬盘查找文件。</p><p><strong>常用参数：</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-b   定位可执行文件。</span><br><span class="hljs-deletion">-m   定位帮助文件。</span><br><span class="hljs-deletion">-s   定位源代码文件。</span><br><span class="hljs-deletion">-u   搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件。</span><br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）查找 locate 程序相关文件</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">whereis locate</span><br></code></pre></td></tr></table></figure><p>（2）查找 locate 的源码文件</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">whereis -s locate</span><br></code></pre></td></tr></table></figure><p>（3）查找 lcoate 的帮助文件</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">whereis -m locate</span><br></code></pre></td></tr></table></figure><h3 id="16、locate-命令"><a href="#16、locate-命令" class="headerlink" title="16、locate 命令"></a>16、locate 命令</h3><p>locate 通过搜寻系统内建文档数据库达到快速找到档案，数据库由 updatedb 程序来更新，updatedb 是由 cron daemon 周期性调用的。默认情况下 locate 命令在搜寻数据库时比由整个由硬盘资料来搜寻资料来得快，但较差劲的是 locate 所找到的档案若是最近才建立或 刚更名的，可能会找不到，在内定值中，updatedb 每天会跑一次，可以由修改 crontab 来更新设定值 (etc&#x2F;crontab)。</p><p>locate 与 find 命令相似，可以使用如 *、? 等进行正则匹配查找</p><p><strong>常用参数：</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-l num（要显示的行数）</span><br><span class="hljs-deletion">-f   将特定的档案系统排除在外，如将proc排除在外</span><br><span class="hljs-deletion">-r   使用正则运算式做为寻找条件</span><br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）查找和 pwd 相关的所有文件(文件名中包含 pwd）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">locate <span class="hljs-built_in">pwd</span><br></code></pre></td></tr></table></figure><p>（2）搜索 etc 目录下所有以 sh 开头的文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">locate <span class="hljs-regexp">/etc/</span>sh<br></code></pre></td></tr></table></figure><p>（3）查找 &#x2F;var 目录下，以 reason 结尾的文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">locate</span> -r <span class="hljs-string">&#x27;^/var.*reason$&#x27;</span>（其中.表示一个字符，*表示任务多个；.*表示任意多个字符）<br></code></pre></td></tr></table></figure><h3 id="17、find-命令"><a href="#17、find-命令" class="headerlink" title="17、find 命令"></a>17、find 命令</h3><p>用于在文件树中查找文件，并作出相应的处理。</p><p>命令格式：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> pathname -options [-<span class="hljs-built_in">print</span> -exec -ok <span class="hljs-built_in">..</span>.]<br></code></pre></td></tr></table></figure><p>命令参数：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sqf">pathname: <span class="hljs-built_in">find</span>命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录。<br>-print： <span class="hljs-built_in">find</span>命令将匹配的文件输出到标准输出。<br>-<span class="hljs-built_in">exec</span>： <span class="hljs-built_in">find</span>命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为<span class="hljs-string">&#x27;command&#x27;</span> &#123;  &#125; \;，注意&#123;   &#125;和\；之间的空格。<br>-ok： 和-<span class="hljs-built_in">exec</span>的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。<br></code></pre></td></tr></table></figure><p><strong>命令选项：</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-name 按照文件名查找文件</span><br><span class="hljs-deletion">-perm 按文件权限查找文件</span><br><span class="hljs-deletion">-user 按文件属主查找文件</span><br><span class="hljs-deletion">-group  按照文件所属的组来查找文件。</span><br><span class="hljs-deletion">-type  查找某一类型的文件，诸如：</span><br>   b - 块设备文件<br>   d - 目录<br>   c - 字符设备文件<br>   l - 符号链接文件<br>   p - 管道文件<br>   f - 普通文件<br><br><span class="hljs-deletion">-size n :[c] 查找文件长度为n块文件，带有c时表文件字节大小</span><br><span class="hljs-deletion">-amin n   查找系统中最后N分钟访问的文件</span><br><span class="hljs-deletion">-atime n  查找系统中最后n*24小时访问的文件</span><br><span class="hljs-deletion">-cmin n   查找系统中最后N分钟被改变文件状态的文件</span><br><span class="hljs-deletion">-ctime n  查找系统中最后n*24小时被改变文件状态的文件</span><br><span class="hljs-deletion">-mmin n   查找系统中最后N分钟被改变文件数据的文件</span><br><span class="hljs-deletion">-mtime n  查找系统中最后n*24小时被改变文件数据的文件</span><br>(用减号-来限定更改时间在距今n日以内的文件，而用加号+来限定更改时间在距今n日以前的文件。 )<br><span class="hljs-deletion">-maxdepth n 最大查找目录深度</span><br><span class="hljs-deletion">-prune 选项来指出需要忽略的目录。在使用-prune选项时要当心，因为如果你同时使用了-depth选项，那么-prune选项就会被find命令忽略</span><br><span class="hljs-deletion">-newer 如果希望查找更改时间比某个文件新但比另一个文件旧的所有文件，可以使用-newer选项</span><br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）查找 48 小时内修改过的文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> -atime -2<br></code></pre></td></tr></table></figure><p>（2）在当前目录查找 以 .log 结尾的文件。 <strong>.</strong> 代表当前目录</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> ./ -name <span class="hljs-string">&#x27;*.log&#x27;</span><br></code></pre></td></tr></table></figure><p>（3）查找 &#x2F;opt 目录下 权限为 777 的文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> /opt -perm 777<br></code></pre></td></tr></table></figure><p>（4）查找大于 1K 的文件</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">find -size +<span class="hljs-number">1000</span>c<br></code></pre></td></tr></table></figure><p>查找等于 1000 字符的文件</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">find -size <span class="hljs-number">1000</span>c <br></code></pre></td></tr></table></figure><p>-exec 参数后面跟的是 command 命令，它的终止是以 ; 为结束标志的，所以这句命令后面的分号是不可缺少的，考虑到各个系统中分号会有不同的意义，所以前面加反斜杠。{} 花括号代表前面find查找出来的文件名。</p><p><strong>实例：</strong></p><p>（5）在当前目录中查找更改时间在10日以前的文件并删除它们(无提醒）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find . -<span class="hljs-built_in">type</span> f -mtime +10 -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">rm</span> -f &#123;&#125; \;<br></code></pre></td></tr></table></figure><p>（6）当前目录中查找所有文件名以.log结尾、更改时间在5日以上的文件，并删除它们，只不过在删除之前先给出提示。 按y键删除文件，按n键不删除</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">find</span> . -<span class="hljs-built_in">name</span> <span class="hljs-string">&#x27;*.log&#x27;</span> mtime +<span class="hljs-number">5</span> -ok -<span class="hljs-built_in">exec</span> rm &#123;&#125; \;<br></code></pre></td></tr></table></figure><p>（7）当前目录下查找文件名以 passwd 开头，内容包含 “pkg” 字符的文件</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">find</span> . -f -<span class="hljs-built_in">name</span> <span class="hljs-string">&#x27;passwd*&#x27;</span> -<span class="hljs-built_in">exec</span> grep <span class="hljs-string">&quot;pkg&quot;</span> &#123;&#125; \;<br></code></pre></td></tr></table></figure><p>（8）用 exec 选项执行 cp 命令</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">find</span> . -<span class="hljs-built_in">name</span> <span class="hljs-string">&#x27;*.log&#x27;</span> -<span class="hljs-built_in">exec</span> cp &#123;&#125; test3 \;<br></code></pre></td></tr></table></figure><p>-xargs find 命令把匹配到的文件传递给 xargs 命令，而 xargs 命令每次只获取一部分文件而不是全部，不像 -exec 选项那样。这样它可以先处理最先获取的一部分文件，然后是下一批，并如此继续下去。</p><p>实例：</p><p>（9）查找当前目录下每个普通文件，然后使用 xargs 来判断文件类型</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> . -type f -<span class="hljs-built_in">print</span> | xargs file<br></code></pre></td></tr></table></figure><p>（10）查找当前目录下所有以 js 结尾的并且其中包含 ‘editor’ 字符的普通文件</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">find</span> . -type f -name <span class="hljs-string">&quot;*.js&quot;</span> -exec <span class="hljs-keyword">grep</span> -lF <span class="hljs-string">&#x27;ueditor&#x27;</span> &#123;&#125; \;<br><span class="hljs-keyword">find</span> -type f -name <span class="hljs-string">&#x27;*.js&#x27;</span> | xargs <span class="hljs-keyword">grep</span> -lF <span class="hljs-string">&#x27;editor&#x27;</span><br></code></pre></td></tr></table></figure><p>（11）利用 xargs 执行 mv 命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> . -name <span class="hljs-string">&quot;*.log&quot;</span> | xargs -i mv &#123;&#125; test4<br></code></pre></td></tr></table></figure><p>（12）用 grep 命令在当前目录下的所有普通文件中搜索 hostnames 这个词，并标出所在行：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> . -name \*(转义） -type f -<span class="hljs-built_in">print</span> | xargs grep -n <span class="hljs-string">&#x27;hostnames&#x27;</span><br></code></pre></td></tr></table></figure><p>（13）查找当前目录中以一个小写字母开头，最后是 4 到 9 加上 .log 结束的文件：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">find</span> . -name <span class="hljs-string">&#x27;[a-z]*[4-9].log&#x27;</span> -<span class="hljs-keyword">print</span><br></code></pre></td></tr></table></figure><p>（14）在 test 目录查找不在 test4 子目录查找</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">find</span> test -<span class="hljs-built_in">path</span> <span class="hljs-string">&#x27;test/test4&#x27;</span> -prune -o -<span class="hljs-built_in">print</span><br></code></pre></td></tr></table></figure><p>（15）实例1：查找更改时间比文件 log2012.log新但比文件 log2017.log 旧的文件</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">find -<span class="hljs-keyword">new</span><span class="hljs-type">er</span> log2012.log ! -<span class="hljs-keyword">new</span><span class="hljs-type">er</span> log2017.log<br></code></pre></td></tr></table></figure><p><strong>使用 depth 选项：</strong></p><p>depth 选项可以使 find 命令向磁带上备份文件系统时，希望首先备份所有的文件，其次再备份子目录中的文件。</p><p>实例：find 命令从文件系统的根目录开始，查找一个名为 CON.FILE 的文件。 它将首先匹配所有的文件然后再进入子目录中查找</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">find / -name <span class="hljs-string">&quot;CON.FILE&quot;</span> -depth -print<br></code></pre></td></tr></table></figure><h3 id="18、chmod-命令"><a href="#18、chmod-命令" class="headerlink" title="18、chmod 命令"></a>18、chmod 命令</h3><p>用于改变 linux 系统文件或目录的访问权限。用它控制文件或目录的访问权限。该命令有两种用法。一种是包含字母和操作符表达式的文字设定法；另一种是包含数字的数字设定法。</p><p>每一文件或目录的访问权限都有三组，每组用三位表示，分别为文件属主的读、写和执行权限；与属主同组的用户的读、写和执行权限；系统中其他用户的读、写和执行权限。可使用 ls -l test.txt 查找。</p><p>以文件 log2012.log 为例：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-literal">-</span><span class="hljs-comment">rw</span><span class="hljs-literal">-</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span><span class="hljs-comment">r</span><span class="hljs-literal">--</span> <span class="hljs-comment">1 root root 296K 11</span><span class="hljs-literal">-</span><span class="hljs-comment">13 06:03 log2012</span><span class="hljs-string">.</span><span class="hljs-comment">log</span><br></code></pre></td></tr></table></figure><p>第一列共有 10 个位置，第一个字符指定了文件类型。在通常意义上，一个目录也是一个文件。如果第一个字符是横线，表示是一个非目录的文件。如果是 d，表示是一个目录。从第二个字符开始到第十个 9 个字符，3 个字符一组，分别表示了 3 组用户对文件或者目录的权限。权限字符用横线代表空许可，r 代表只读，w 代表写，x 代表可执行。</p><p>常用参数：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-c 当发生改变时，报告处理信息</span><br><span class="hljs-deletion">-R 处理指定目录以及其子目录下所有文件</span><br></code></pre></td></tr></table></figure><p>权限范围：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">u ：目录或者文件的当前的用户<br>g ：目录或者文件的当前的群组<br>o ：除了目录或者文件的当前用户或群组之外的用户或者群组<br><span class="hljs-selector-tag">a</span> ：所有的用户及群组<br></code></pre></td></tr></table></figure><p>权限代号：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">r ：读权限，用数字4表示<br>w ：写权限，用数字2表示<br>x ：执行权限，用数字1表示<br><span class="hljs-bullet">- </span>：删除权限，用数字0表示<br>s ：特殊权限<br></code></pre></td></tr></table></figure><p>实例：</p><p>（1）增加文件 t.log 所有用户可执行权限</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">chmod <span class="hljs-keyword">a</span>+x t.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>（2）撤销原来所有的权限，然后使拥有者具有可读权限,并输出处理信息</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">chmod <span class="hljs-attribute">u</span>=r t.log -c<br></code></pre></td></tr></table></figure><p>（3）给 file 的属主分配读、写、执行(7)的权限，给file的所在组分配读、执行(5)的权限，给其他用户分配执行(1)的权限</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">chmod <span class="hljs-number">751</span> t.<span class="hljs-keyword">log</span> <span class="hljs-params">-c</span>（或者：chmod u=rwx,g=<span class="hljs-literal">rx</span>,o=x t.<span class="hljs-keyword">log</span> <span class="hljs-params">-c</span>)<br></code></pre></td></tr></table></figure><p>（4）将 test 目录及其子目录所有文件添加可读权限</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">chmod u+<span class="hljs-built_in">r</span>,g+<span class="hljs-built_in">r</span>,o+<span class="hljs-built_in">r</span> <span class="hljs-literal">-R</span> text/ <span class="hljs-literal">-c</span><br></code></pre></td></tr></table></figure><p>19、tar 命令</p><p>用来压缩和解压文件。tar 本身不具有压缩功能，只具有打包功能，有关压缩及解压是调用其它的功能来完成。</p><p>弄清两个概念：打包和压缩。打包是指将一大堆文件或目录变成一个总的文件；压缩则是将一个大的文件通过一些压缩算法变成一个小文件</p><p><strong>常用参数：</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-c 建立新的压缩文件</span><br><span class="hljs-deletion">-f 指定压缩文件</span><br><span class="hljs-deletion">-r 添加文件到已经压缩文件包中</span><br><span class="hljs-deletion">-u 添加改了和现有的文件到压缩包中</span><br><span class="hljs-deletion">-x 从压缩包中抽取文件</span><br><span class="hljs-deletion">-t 显示压缩文件中的内容</span><br><span class="hljs-deletion">-z 支持gzip压缩</span><br><span class="hljs-deletion">-j 支持bzip2压缩</span><br><span class="hljs-deletion">-Z 支持compress解压文件</span><br><span class="hljs-deletion">-v 显示操作过程</span><br></code></pre></td></tr></table></figure><p>有关 gzip 及 bzip2 压缩:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">gzip 实例：压缩 gzip fileName <span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span> 和<span class="hljs-selector-class">.tgz</span>  解压：gunzip filename<span class="hljs-selector-class">.gz</span> 或 gzip -d filename<span class="hljs-selector-class">.gz</span><br>          对应：tar zcvf filename<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span>     tar zxvf filename<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span><br><br>bz2实例：压缩 bzip2 -z filename <span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.bz2</span> 解压：bunzip filename.bz2或bzip -d filename<span class="hljs-selector-class">.bz2</span><br>       对应：tar jcvf filename<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span>         解压：tar jxvf filename<span class="hljs-selector-class">.tar</span>.bz2<br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）将文件全部打包成 tar 包</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">tar -cvf <span class="hljs-built_in">log</span>.tar <span class="hljs-number">1</span>.<span class="hljs-built_in">log</span>,<span class="hljs-number">2</span>.<span class="hljs-built_in">log</span> 或tar -cvf <span class="hljs-built_in">log</span>.*<br></code></pre></td></tr></table></figure><p>（2）将 &#x2F;etc 下的所有文件及目录打包到指定目录，并使用 gz 压缩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zcvf /tmp/etc.tar.gz /etc<br></code></pre></td></tr></table></figure><p>（3）查看刚打包的文件内容（一定加z，因为是使用 gzip 压缩的）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">tar -ztvf <span class="hljs-regexp">/tmp/</span>etc.tar.gz<br></code></pre></td></tr></table></figure><p>（4）要压缩打包 &#x2F;home, &#x2F;etc ，但不要 &#x2F;home&#x2F;dmtsai</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">tar <span class="hljs-params">--exclude</span> <span class="hljs-string">/home/dmtsai</span> -zcvf myfile.tar.gz <span class="hljs-string">/home/</span>* <span class="hljs-string">/etc</span><br></code></pre></td></tr></table></figure><h3 id="20、chown-命令"><a href="#20、chown-命令" class="headerlink" title="20、chown 命令"></a>20、chown 命令</h3><p>chown 将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户 ID；组可以是组名或者组 ID；文件是以空格分开的要改变权限的文件列表，支持通配符。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-c 显示更改的部分的信息</span><br><span class="hljs-deletion">-R 处理指定目录及子目录</span><br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）改变拥有者和群组 并显示改变信息</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">chown -<span class="hljs-keyword">c</span> mai<span class="hljs-variable">l:mail</span> log2012.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>（2）改变文件群组</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">chown -c :mail t.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>（3）改变文件夹及子文件目录属主及属组为 mail</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> -cR mail: <span class="hljs-built_in">test</span>/<br></code></pre></td></tr></table></figure><h3 id="21、df-命令"><a href="#21、df-命令" class="headerlink" title="21、df 命令"></a>21、df 命令</h3><p>显示磁盘空间使用情况。获取硬盘被占用了多少空间，目前还剩下多少空间等信息，如果没有文件名被指定，则所有当前被挂载的文件系统的可用空间将被显示。默认情况下，磁盘空间将以 1KB 为单位进行显示，除非环境变量 POSIXLY_CORRECT 被指定，那样将以512字节为单位进行显示：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-a 全部文件系统列表</span><br><span class="hljs-deletion">-h 以方便阅读的方式显示信息</span><br><span class="hljs-deletion">-i 显示inode信息</span><br><span class="hljs-deletion">-k 区块为1024字节</span><br><span class="hljs-deletion">-l 只显示本地磁盘</span><br><span class="hljs-deletion">-T 列出文件系统类型</span><br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）显示磁盘使用情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -l<br></code></pre></td></tr></table></figure><p>（2）以易读方式列出所有文件系统及其类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -haT<br></code></pre></td></tr></table></figure><h3 id="22、du-命令"><a href="#22、du-命令" class="headerlink" title="22、du 命令"></a>22、du 命令</h3><p>du 命令也是查看使用空间的，但是与 df 命令不同的是 Linux du 命令是对文件和目录磁盘使用的空间的查看：</p><p>命令格式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">du <span class="hljs-selector-attr">[选项]</span> <span class="hljs-selector-attr">[文件]</span><br></code></pre></td></tr></table></figure><p><strong>常用参数：</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-a 显示目录中所有文件大小</span><br><span class="hljs-deletion">-k 以KB为单位显示文件大小</span><br><span class="hljs-deletion">-m 以MB为单位显示文件大小</span><br><span class="hljs-deletion">-g 以GB为单位显示文件大小</span><br><span class="hljs-deletion">-h 以易读方式显示文件大小</span><br><span class="hljs-deletion">-s 仅显示总计</span><br><span class="hljs-deletion">-c或--total  除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和</span><br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）以易读方式显示文件夹内及子文件夹大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">du</span> -h scf/<br></code></pre></td></tr></table></figure><p>（2）以易读方式显示文件夹内所有文件大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">du</span> -ah scf/<br></code></pre></td></tr></table></figure><p>（3）显示几个文件或目录各自占用磁盘空间的大小，还统计它们的总和</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">du</span> -hc <span class="hljs-built_in">test</span>/ scf/<br></code></pre></td></tr></table></figure><p>（4）输出当前目录下各个子目录所使用的空间</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gml">du -hc --<span class="hljs-built_in">max</span>-<span class="hljs-variable language_">depth</span>=<span class="hljs-number">1</span> scf/<br></code></pre></td></tr></table></figure><h3 id="23、ln-命令"><a href="#23、ln-命令" class="headerlink" title="23、ln 命令"></a>23、ln 命令</h3><p>功能是为文件在另外一个位置建立一个同步的链接，当在不同目录需要该问题时，就不需要为每一个目录创建同样的文件，通过 ln 创建的链接（link）减少磁盘占用量。</p><p>链接分类：软件链接及硬链接</p><p>软链接：</p><ul><li>1.软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式</li><li>2.软链接可以 跨文件系统 ，硬链接不可以</li><li>3.软链接可以对一个不存在的文件名进行链接</li><li>4.软链接可以对目录进行链接</li></ul><p>硬链接:</p><ul><li>1.硬链接，以文件副本的形式存在。但不占用实际空间。</li><li>2.不允许给目录创建硬链接</li><li>3.硬链接只有在同一个文件系统中才能创建</li></ul><p><strong>需要注意：</strong></p><ul><li>第一：ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化；</li><li>第二：ln的链接又分软链接和硬链接两种，软链接就是ln –s 源文件 目标文件，它只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，硬链接 ln 源文件 目标文件，没有参数-s， 它会在你选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化。</li><li>第三：ln指令用在链接文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则会把前面指定的所有文件或目录复制到该目录中。若同时指定多个文件或目录，且最后的目的地并非是一个已存在的目录，则会出现错误信息。</li></ul><p><strong>常用参数：</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-b 删除，覆盖以前建立的链接</span><br><span class="hljs-deletion">-s 软链接（符号链接）</span><br><span class="hljs-deletion">-v 显示详细处理过程</span><br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）给文件创建软链接，并显示操作信息</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ln</span> -<span class="hljs-keyword">sv</span> <span class="hljs-keyword">source</span>.<span class="hljs-built_in">log</span> link.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>（2）给文件创建硬链接，并显示操作信息</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ln</span> -v <span class="hljs-keyword">source</span>.<span class="hljs-built_in">log</span> link1.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>（3）给目录创建软链接</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ln -sv <span class="hljs-regexp">/opt/</span>soft<span class="hljs-regexp">/test/</span>test3 <span class="hljs-regexp">/opt/</span>soft<span class="hljs-regexp">/test/</span>test5<br></code></pre></td></tr></table></figure><h3 id="24、date-命令"><a href="#24、date-命令" class="headerlink" title="24、date 命令"></a>24、date 命令</h3><p>显示或设定系统的日期与时间。</p><p>命令参数：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs haml">-<span class="language-ruby">d&lt;字符串&gt; 　显示字符串所指的日期与时间。字符串前后必须加上双引号。</span><br>-<span class="language-ruby">s&lt;字符串&gt; 　根据字符串来设置日期与时间。字符串前后必须加上双引号。</span><br>-<span class="language-ruby">u 　显示<span class="hljs-variable constant_">GMT</span>。</span><br><span class="hljs-tag">%<span class="hljs-selector-tag">H</span></span> 小时(00-23)<br><span class="hljs-tag">%<span class="hljs-selector-tag">I</span></span> 小时(00-12)<br><span class="hljs-tag">%<span class="hljs-selector-tag">M</span></span> 分钟(以00-59来表示)<br><span class="hljs-tag">%<span class="hljs-selector-tag">s</span></span> 总秒数。起算时间为1970-01-01 00:00:00 UTC。<br><span class="hljs-tag">%<span class="hljs-selector-tag">S</span></span> 秒(以本地的惯用法来表示)<br><span class="hljs-tag">%<span class="hljs-selector-tag">a</span></span> 星期的缩写。<br><span class="hljs-tag">%<span class="hljs-selector-tag">A</span></span> 星期的完整名称。<br><span class="hljs-tag">%<span class="hljs-selector-tag">d</span></span> 日期(以01-31来表示)。<br><span class="hljs-tag">%<span class="hljs-selector-tag">D</span></span> 日期(含年月日)。<br><span class="hljs-tag">%<span class="hljs-selector-tag">m</span></span> 月份(以01-12来表示)。<br><span class="hljs-tag">%<span class="hljs-selector-tag">y</span></span> 年份(以00-99来表示)。<br><span class="hljs-tag">%<span class="hljs-selector-tag">Y</span></span> 年份(以四位数来表示)。<br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）显示下一天</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">date</span> +%Y%m%d --<span class="hljs-keyword">date</span>=<span class="hljs-string">&quot;+1 day&quot;</span>  <span class="hljs-comment">//显示下一天的日期</span><br></code></pre></td></tr></table></figure><p>（2）-d参数使用</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">date</span> -d <span class="hljs-string">&quot;nov 22&quot;</span>  今年的 <span class="hljs-number">11</span> 月 <span class="hljs-number">22</span> 日是星期三<br><span class="hljs-keyword">date</span> -d <span class="hljs-string">&#x27;2 weeks&#x27;</span> <span class="hljs-number">2</span>周后的日期<br><span class="hljs-keyword">date</span> -d <span class="hljs-string">&#x27;next monday&#x27;</span> (下周一的日期)<br><span class="hljs-keyword">date</span> -d next-day +%Y%m%d（明天的日期）或者：<span class="hljs-keyword">date</span> -d tomorrow +%Y%m%d<br><span class="hljs-keyword">date</span> -d last-day +%Y%m%d(昨天的日期) 或者：<span class="hljs-keyword">date</span> -d yesterday +%Y%m%d<br><span class="hljs-keyword">date</span> -d last-month +%Y%m(上个月是几月)<br><span class="hljs-keyword">date</span> -d next-month +%Y%m(下个月是几月)<br></code></pre></td></tr></table></figure><h3 id="25、cal-命令"><a href="#25、cal-命令" class="headerlink" title="25、cal 命令"></a>25、cal 命令</h3><p>可以用户显示公历（阳历）日历如只有一个参数，则表示年份(1-9999)，如有两个参数，则表示月份和年份：</p><p>常用参数：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-3 显示前一月，当前月，后一月三个月的日历</span><br><span class="hljs-deletion">-m 显示星期一为第一列</span><br><span class="hljs-deletion">-j 显示在当前年第几天</span><br><span class="hljs-deletion">-y [year]显示当前年[year]份的日历</span><br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）显示指定年月日期</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cal</span> <span class="hljs-number">9</span> <span class="hljs-number">2012</span><br></code></pre></td></tr></table></figure><p>（2）显示2013年每个月日历</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cal</span> -y <span class="hljs-number">2013</span><br></code></pre></td></tr></table></figure><p>（3）将星期一做为第一列,显示前中后三月</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cal</span> -<span class="hljs-number">3</span>m<br></code></pre></td></tr></table></figure><h3 id="26、grep-命令"><a href="#26、grep-命令" class="headerlink" title="26、grep 命令"></a>26、grep 命令</h3><p>强大的文本搜索命令，grep(Global Regular Expression Print) 全局正则表达式搜索。</p><p>grep 的工作方式是这样的，它在一个或多个文件中搜索字符串模板。如果模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到标准输出，不影响原文件内容。</p><p>命令格式：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">grep [<span class="hljs-keyword">option</span>] pattern <span class="hljs-keyword">file</span>|dir<br></code></pre></td></tr></table></figure><p>常用参数：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-A n --after-context显示匹配字符后n行</span><br><span class="hljs-deletion">-B n --before-context显示匹配字符前n行</span><br><span class="hljs-deletion">-C n --context 显示匹配字符前后n行</span><br><span class="hljs-deletion">-c --count 计算符合样式的列数</span><br><span class="hljs-deletion">-i 忽略大小写</span><br><span class="hljs-deletion">-l 只列出文件内容符合指定的样式的文件名称</span><br><span class="hljs-deletion">-f 从文件中读取关键词</span><br><span class="hljs-deletion">-n 显示匹配内容的所在文件中行数</span><br><span class="hljs-deletion">-R 递归查找文件夹</span><br></code></pre></td></tr></table></figure><p>grep 的规则表达式:</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs autoit">^  <span class="hljs-meta">#锚定行的开始 如：<span class="hljs-string">&#x27;^grep&#x27;</span>匹配所有以grep开头的行。 </span><br>$  <span class="hljs-meta">#锚定行的结束 如：<span class="hljs-string">&#x27;grep$&#x27;</span>匹配所有以grep结尾的行。 </span><br>.  <span class="hljs-meta">#匹配一个非换行符的字符 如：<span class="hljs-string">&#x27;gr.p&#x27;</span>匹配gr后接一个任意字符，然后是p。  </span><br>*  <span class="hljs-meta">#匹配零个或多个先前字符 如：<span class="hljs-string">&#x27;*grep&#x27;</span>匹配所有一个或多个空格后紧跟grep的行。</span><br>.*   <span class="hljs-meta">#一起用代表任意字符。  </span><br>[]   <span class="hljs-meta">#匹配一个指定范围内的字符，如<span class="hljs-string">&#x27;[Gg]rep&#x27;</span>匹配Grep和grep。 </span><br>[^]  <span class="hljs-meta">#匹配一个不在指定范围内的字符，如：<span class="hljs-string">&#x27;[^A-FH-Z]rep&#x27;</span>匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。  </span><br>\(..\)  <span class="hljs-meta">#标记匹配字符，如<span class="hljs-string">&#x27;\(love\)&#x27;</span>，love被标记为1。   </span><br>\&lt;      <span class="hljs-meta">#锚定单词的开始，如:<span class="hljs-string">&#x27;\&lt;grep&#x27;</span>匹配包含以grep开头的单词的行。</span><br>\&gt;      <span class="hljs-meta">#锚定单词的结束，如<span class="hljs-string">&#x27;grep\&gt;&#x27;</span>匹配包含以grep结尾的单词的行。</span><br>x\&#123;m\&#125;  <span class="hljs-meta">#重复字符x，m次，如：<span class="hljs-string">&#x27;0\&#123;5\&#125;&#x27;</span>匹配包含5个o的行。 </span><br>x\&#123;m,\&#125;  <span class="hljs-meta">#重复字符x,至少m次，如：<span class="hljs-string">&#x27;o\&#123;5,\&#125;&#x27;</span>匹配至少有5个o的行。  </span><br>x\&#123;m,n\&#125;  <span class="hljs-meta">#重复字符x，至少m次，不多于n次，如：<span class="hljs-string">&#x27;o\&#123;5,10\&#125;&#x27;</span>匹配5--10个o的行。  </span><br>\w    <span class="hljs-meta">#匹配文字和数字字符，也就是[A-Za-z0-9]，如：<span class="hljs-string">&#x27;G\w*p&#x27;</span>匹配以G后跟零个或多个文字或数字字符，然后是p。  </span><br>\W    <span class="hljs-meta">#\w的反置形式，匹配一个或多个非单词字符，如点号句号等。  </span><br>\b    <span class="hljs-meta">#单词锁定符，如: <span class="hljs-string">&#x27;\bgrep\b&#x27;</span>只匹配grep。</span><br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）查找指定进程</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> svn<br></code></pre></td></tr></table></figure><p>（2）查找指定进程个数</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> svn -<span class="hljs-keyword">c</span><br></code></pre></td></tr></table></figure><p>（3）从文件中读取关键词</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cat</span> test1.txt | <span class="hljs-keyword">grep</span> -<span class="hljs-keyword">f</span> key.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>（4）从文件夹中递归查找以grep开头的行，并只列出文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep -lR <span class="hljs-string">&#x27;^grep&#x27;</span> /tmp<br></code></pre></td></tr></table></figure><p>（5）查找非x开关的行内容</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> <span class="hljs-string">&#x27;^[^x]&#x27;</span> test.txt<br></code></pre></td></tr></table></figure><p>（6）显示包含 ed 或者 at 字符的内容行</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">grep -E <span class="hljs-symbol">&#x27;ed</span>|<span class="hljs-keyword">at</span>&#x27; test.txt<br></code></pre></td></tr></table></figure><h3 id="27、wc-命令"><a href="#27、wc-命令" class="headerlink" title="27、wc 命令"></a>27、wc 命令</h3><p>wc(word count)功能为统计指定的文件中字节数、字数、行数，并将统计结果输出</p><p>命令格式：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">wc [<span class="hljs-keyword">option</span>] <span class="hljs-keyword">file</span>..<br></code></pre></td></tr></table></figure><p><strong>命令参数：</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-c 统计字节数</span><br><span class="hljs-deletion">-l 统计行数</span><br><span class="hljs-deletion">-m 统计字符数</span><br><span class="hljs-deletion">-w 统计词数，一个字被定义为由空白、跳格或换行字符分隔的字符串</span><br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）查找文件的 行数 单词数 字节数 文件名</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">wc <span class="hljs-built_in">text</span>.txt<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">7 </span>    <span class="hljs-number">8</span>     <span class="hljs-number">70</span>     test.txt<br></code></pre></td></tr></table></figure><p>（2）统计输出结果的行数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> test.txt | <span class="hljs-built_in">wc</span> -l<br></code></pre></td></tr></table></figure><h3 id="28、ps-命令"><a href="#28、ps-命令" class="headerlink" title="28、ps 命令"></a>28、ps 命令</h3><p>ps(process status)，用来查看当前运行的进程状态，一次性查看，如果需要动态连续结果使用 top</p><p>linux上进程有5种状态:</p><ul><li><ol><li>运行(正在运行或在运行队列中等待)</li></ol></li><li><ol start="2"><li>中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)</li></ol></li><li><ol start="3"><li>不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生)</li></ol></li><li><ol start="4"><li>僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放)</li></ol></li><li><ol start="5"><li>停止(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行)</li></ol></li></ul><p>ps 工具标识进程的5种状态码:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">D 不可中断 uninterruptible sleep (usually IO)<br>R 运行 runnable (<span class="hljs-keyword">on</span> <span class="hljs-title">run</span> <span class="hljs-title">queue</span>)<br>S 中断 sleeping<br>T 停止 traced <span class="hljs-keyword">or</span> stopped<br>Z 僵死 <span class="hljs-keyword">a</span> defunct (”zombie”) <span class="hljs-built_in">process</span><br></code></pre></td></tr></table></figure><p><strong>命令参数：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">-<span class="hljs-selector-tag">A</span> 显示所有进程<br><span class="hljs-selector-tag">a</span> 显示所有进程<br>-<span class="hljs-selector-tag">a</span> 显示同一终端下所有进程<br>c 显示进程真实名称<br>e 显示环境变量<br>f 显示进程间的关系<br>r 显示当前终端运行的进程<br>-aux 显示所有包含其它使用的进程<br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）显示当前所有进程环境变量及进程间关系</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ps -ef</span><br></code></pre></td></tr></table></figure><p>（2）显示当前所有进程</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">ps -<span class="hljs-selector-tag">A</span><br></code></pre></td></tr></table></figure><p>（3）与grep联用查找某进程</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -aux | <span class="hljs-keyword">grep</span> apache<br></code></pre></td></tr></table></figure><p>（4）找出与 cron 与 syslog 这两个服务有关的 PID 号码</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> aux | <span class="hljs-keyword">grep</span> <span class="hljs-string">&#x27;(cron|syslog)&#x27;</span><br></code></pre></td></tr></table></figure><p>29、top 命令</p><p>显示当前系统正在执行的进程的相关信息，包括进程 ID、内存占用率、CPU 占用率等</p><p><strong>常用参数：</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-c 显示完整的进程命令</span><br><span class="hljs-deletion">-s 保密模式</span><br><span class="hljs-deletion">-p &lt;进程号&gt; 指定进程显示</span><br><span class="hljs-deletion">-n &lt;次数&gt;循环显示次数</span><br></code></pre></td></tr></table></figure><p>实例：</p><p><strong>（1）</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">top</span> - <span class="hljs-number">14</span>:<span class="hljs-number">06</span>:<span class="hljs-number">23</span> up <span class="hljs-number">70</span> days, <span class="hljs-number">16</span>:<span class="hljs-number">44</span>,  <span class="hljs-number">2</span> users,  load average: <span class="hljs-number">1</span>.<span class="hljs-number">25</span>, <span class="hljs-number">1</span>.<span class="hljs-number">32</span>, <span class="hljs-number">1</span>.<span class="hljs-number">35</span><br><span class="hljs-attribute">Tasks</span>: <span class="hljs-number">206</span> total,   <span class="hljs-number">1</span> running, <span class="hljs-number">205</span> sleeping,   <span class="hljs-number">0</span> stopped,   <span class="hljs-number">0</span> zombie<br><span class="hljs-attribute">Cpu</span>(s):  <span class="hljs-number">5</span>.<span class="hljs-number">9</span>%us,  <span class="hljs-number">3</span>.<span class="hljs-number">4</span>%sy,  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>%ni, <span class="hljs-number">90</span>.<span class="hljs-number">4</span>%id,  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>%wa,  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>%hi,  <span class="hljs-number">0</span>.<span class="hljs-number">2</span>%si,  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>%st<br><span class="hljs-attribute">Mem</span>:  <span class="hljs-number">32949016</span>k total, <span class="hljs-number">14411180</span>k used, <span class="hljs-number">18537836</span>k free,   <span class="hljs-number">169884</span>k buffers<br><span class="hljs-attribute">Swap</span>: <span class="hljs-number">32764556</span>k total,        <span class="hljs-number">0</span>k used, <span class="hljs-number">32764556</span>k free,  <span class="hljs-number">3612636</span>k cached<br><span class="hljs-attribute">PID</span> USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND  <br><span class="hljs-attribute">28894</span> root      <span class="hljs-number">22</span>   <span class="hljs-number">0</span> <span class="hljs-number">1501</span>m <span class="hljs-number">405</span>m  <span class="hljs-number">10</span>m S <span class="hljs-number">52</span>.<span class="hljs-number">2</span>  <span class="hljs-number">1</span>.<span class="hljs-number">3</span>   <span class="hljs-number">2534</span>:<span class="hljs-number">16</span> java  <br></code></pre></td></tr></table></figure><p>前五行是当前系统情况整体的统计信息区。</p><p><strong>第一行，任务队列信息，同 uptime 命令的执行结果，具体参数说明情况如下：</strong></p><p>14:06:23 — 当前系统时间</p><p>up 70 days, 16:44 — 系统已经运行了70天16小时44分钟（在这期间系统没有重启过的吆！）</p><p>2 users — 当前有2个用户登录系统</p><p>load average: 1.15, 1.42, 1.44 — load average后面的三个数分别是1分钟、5分钟、15分钟的负载情况。</p><p>load average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了。</p><p><strong>第二行，Tasks — 任务（进程），具体信息说明如下：</strong></p><p>系统现在共有206个进程，其中处于运行中的有1个，205个在休眠（sleep），stoped状态的有0个，zombie状态（僵尸）的有0个。</p><p><strong>第三行，cpu状态信息，具体属性说明如下：</strong></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">5.9</span>%us — 用户空间占用<span class="hljs-meta">CPU</span>的百分比。<br><span class="hljs-number">3.4</span>% sy — 内核空间占用<span class="hljs-meta">CPU</span>的百分比。<br><span class="hljs-number">0.0</span>% ni — 改变过优先级的进程占用<span class="hljs-meta">CPU</span>的百分比<br><span class="hljs-number">90.4</span>% id — 空闲<span class="hljs-meta">CPU</span>百分比<br><span class="hljs-number">0.0</span>% wa — IO等待占用<span class="hljs-meta">CPU</span>的百分比<br><span class="hljs-number">0.0</span>% hi — 硬中断（Hardware IRQ）占用<span class="hljs-meta">CPU</span>的百分比<br><span class="hljs-number">0.2</span>% <span class="hljs-built_in">si</span> — 软中断（Software Interrupts）占用<span class="hljs-meta">CPU</span>的百分比<br></code></pre></td></tr></table></figure><p><strong>备注：</strong>在这里CPU的使用比率和windows概念不同，需要理解linux系统用户空间和内核空间的相关知识！</p><p>第四行，内存状态，具体信息如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">32949016k</span> total — 物理内存总量（<span class="hljs-number">32</span>GB）<br><span class="hljs-attribute">14411180k</span> used — 使用中的内存总量（<span class="hljs-number">14</span>GB）<br><span class="hljs-attribute">18537836k</span> free — 空闲内存总量（<span class="hljs-number">18</span>GB）<br><span class="hljs-attribute">169884k</span> buffers — 缓存的内存量 （<span class="hljs-number">169</span>M）<br></code></pre></td></tr></table></figure><p><strong>第五行，swap交换分区信息，具体信息说明如下：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">32764556k</span> total — 交换区总量（<span class="hljs-number">32</span>GB）<br><span class="hljs-attribute">0k</span> used — 使用的交换区总量（<span class="hljs-number">0</span>K）<br><span class="hljs-attribute">32764556k</span> free — 空闲交换区总量（<span class="hljs-number">32</span>GB）<br><span class="hljs-attribute">3612636k</span> cached — 缓冲的交换区总量（<span class="hljs-number">3</span>.<span class="hljs-number">6</span>GB）<br></code></pre></td></tr></table></figure><p><strong>第六行，空行。</strong></p><p><strong>第七行以下：各进程（任务）的状态监控，项目列信息说明如下：</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs routeros">PID — 进程id<span class="hljs-built_in"></span><br><span class="hljs-built_in">USER </span>— 进程所有者<br>PR — 进程优先级<br>NI — nice值。负值表示高优先级，正值表示低优先级<br>VIRT — 进程使用的虚拟内存总量，单位kb。<span class="hljs-attribute">VIRT</span>=SWAP+RES<br>RES — 进程使用的、未被换出的物理内存大小，单位kb。<span class="hljs-attribute">RES</span>=CODE+DATA<br>SHR — 共享内存大小，单位kb<br>S — 进程状态。<span class="hljs-attribute">D</span>=不可中断的睡眠状态 <span class="hljs-attribute">R</span>=运行 <span class="hljs-attribute">S</span>=睡眠 <span class="hljs-attribute">T</span>=跟踪/停止 <span class="hljs-attribute">Z</span>=僵尸进程<br>%CPU — 上次更新到现在的CPU时间占用百分比<br>%MEM — 进程使用的物理内存百分比<br>TIME+ — 进程使用的CPU时间总计，单位1/100秒<br>COMMAND — 进程名称（命令名/命令行）<br></code></pre></td></tr></table></figure><p><strong>top 交互命令</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">h 显示<span class="hljs-attribute">top</span>交互命令帮助信息<br>c 切换显示命令名称和完整命令行<br>m 以内存使用率排序<br><span class="hljs-selector-tag">P</span> 根据CPU使用百分比大小进行排序<br>T 根据时间/累计时间进行排序<br>W 将当前设置写入~/<span class="hljs-selector-class">.toprc</span>文件中<br>o或者O 改变显示项目的顺序<br></code></pre></td></tr></table></figure><h3 id="30、kill-命令"><a href="#30、kill-命令" class="headerlink" title="30、kill 命令"></a>30、kill 命令</h3><p>发送指定的信号到相应进程。不指定型号将发送SIGTERM（15）终止指定进程。如果任无法终止该程序可用”-KILL” 参数，其发送的信号为SIGKILL(9) ，将强制结束进程，使用ps命令或者jobs 命令可以查看进程号。root用户将影响用户的进程，非root用户只能影响自己的进程。</p><p><strong>常用参数：</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-l  信号，若果不加信号的编号参数，则使用“-l”参数会列出全部的信号名称</span><br><span class="hljs-deletion">-a  当处理当前进程时，不限制命令名和进程号的对应关系</span><br><span class="hljs-deletion">-p  指定kill 命令只打印相关进程的进程号，而不发送任何信号</span><br><span class="hljs-deletion">-s  指定发送信号</span><br><span class="hljs-deletion">-u  指定用户</span><br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）先使用ps查找进程pro1，然后用kill杀掉</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">kill</span> <span class="hljs-literal">-9</span> <span class="hljs-variable">$</span>(<span class="hljs-built_in">ps</span> <span class="hljs-literal">-ef</span> | grep pro1)<br></code></pre></td></tr></table></figure><h3 id="31、free-命令"><a href="#31、free-命令" class="headerlink" title="31、free 命令"></a>31、free 命令</h3><p>显示系统内存使用情况，包括物理内存、交互区内存(swap)和内核缓冲区内存。</p><p><strong>命令参数：</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-b 以Byte显示内存使用情况</span><br><span class="hljs-deletion">-k 以kb为单位显示内存使用情况</span><br><span class="hljs-deletion">-m 以mb为单位显示内存使用情况</span><br><span class="hljs-deletion">-g 以gb为单位显示内存使用情况</span><br><span class="hljs-deletion">-s&lt;间隔秒数&gt; 持续显示内存</span><br><span class="hljs-deletion">-t 显示内存使用总合</span><br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）显示内存使用情况</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">free</span><br><span class="hljs-keyword">free</span> -k<br><span class="hljs-keyword">free</span> -m<br></code></pre></td></tr></table></figure><p>（2）以总和的形式显示内存的使用信息</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">free -t</span><br></code></pre></td></tr></table></figure><p>（3）周期性查询内存使用情况</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">free</span> -s <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h3 id="32、netstat命令"><a href="#32、netstat命令" class="headerlink" title="32、netstat命令"></a>32、netstat命令</h3><p>查看所有服务的端口号和PID</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">netstat -lnp</span><br></code></pre></td></tr></table></figure><blockquote><p><em>原文地址：<a href="https://www.cnblogs.com/gaojun/p/3359355.html">https://www.cnblogs.com/gaojun/p/3359355.html</a></em></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>实用指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA源码学习（3）</title>
    <link href="/2023/12/26/JAVA%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%883%EF%BC%89/"/>
    <url>/2023/12/26/JAVA%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%883%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="LinkedHashMap（继承自HashMap）"><a href="#LinkedHashMap（继承自HashMap）" class="headerlink" title="LinkedHashMap（继承自HashMap）"></a>LinkedHashMap（继承自HashMap）</h3><ul><li>特点：使用双向链表+链表+红黑树方法实现，在继承父类（HashMap）下，用head和tail两个节点来标记链表的头和尾，有一个boolen类型的accessOrder参数，用于控制迭代顺序,ture为访问顺序，false为插入顺序。</li><li>构造方式：继承HashMap，且accessOrder默认为false</li><li>（初始容量、最大容量、默认负载因子、链表转化树的默认阈值、树转化链表的默认阈值、自动扩容机制、哈希桶的特殊转化机制均与HashMap相同，这里不再赘述）</li></ul><blockquote><p>迭代顺序：<br>1.访问顺序（access-order）：在这种方法中，链表中的元素将按照它们最近一次被访问的时间排序。最近访问的元素排在最前面，而较早访问的元素排在后面；<br>2.插入顺序（insertion-order）：在这种方法中，链表中的元素将按照它们被插入到哈希映射中的顺序排列。最早插入的元素排在最前面，而最近插入的元素排在后面。</p></blockquote><h3 id="LinkedHashSet（继承HashSet）"><a href="#LinkedHashSet（继承HashSet）" class="headerlink" title="LinkedHashSet（继承HashSet）"></a>LinkedHashSet（继承HashSet）</h3><ul><li>特点：在继承HashSet的基础上重写的迭代方法spliterator，保证了读取和存入顺序相同，伪链表。</li></ul><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><ul><li>特点：使用双向链表实现</li><li>默认初始长度：0</li></ul>]]></content>
    
    
    <categories>
      
      <category>JAVA核心源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>源码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA源码学习（2）</title>
    <link href="/2023/12/26/JAVA%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%882%EF%BC%89/"/>
    <url>/2023/12/26/JAVA%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%882%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><ul><li>特点：使用了数组＋链表＋红黑树实现，Node数组为table，使用（table.length - 1) &amp; hashcode（key）得到Node数组下标</li><li>初始容量：new出来后为空（空参），在添加了第一个元素后，自动扩容到16</li><li>最大容量：2^30</li><li>默认负载因子：0.75</li><li>链表转化树的默认阈值：8（至少为8）</li><li>树转化链表的默认阈值：6（最多为6）</li><li>转化为树时，一个哈希桶的最小容量：4*链表转化树的默认阈值 容量默认为64</li><li>自动扩容机制（桶数量）：当当前实际容量大于（负载因子*当前最大容量时）进行自动扩容，扩容到原来的2倍</li><li>哈希桶的特殊转化机制：当桶中的数量大于链表转化树的阈值，则桶中的链表转化红黑树，当桶中的数量小于树转化链表的阈值则从树退化成链表</li></ul><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><ul><li>特点：背后依赖于HashMap进行实现，参数除了序列化ID，有HashMap和PRESENT（private static final Object）</li><li>去重方式：依赖hashmap中key唯一的特点，进行去重，通过map.put(e, PRESENT)的方式进行添加（PRESENT的hash值在同一个HashSet是唯一的）</li></ul><h4 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h4><p>HashTable</p><ul><li><p>特点：</p><ol><li><p>使用数组＋链表的实现方式，解决哈希冲突的方法为链地址法，且不会转化为红黑树，性能较hashmap来说比较差；</p></li><li><p>各种对元素进行操作或者查询方法使用了synchronized同步锁，保证了线程安全，但是导致性能较差；</p></li><li><p>下标直接通过hashcode % tab.length 进行计算，可能会导致分布不够均匀，进一步影响性能。</p></li></ol></li><li><p>初始容量：11</p></li><li><p>最大容量：Integer.MAX_VALUE - 8</p></li><li><p>默认负载因子：0.75</p></li><li><p>自动扩容机制：当当前实际容量大于（负载因子*当前最大容量时）进行自动扩容，扩容到原来的2倍</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>JAVA核心源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>源码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA源码学习（1）</title>
    <link href="/2023/12/25/JAVA%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%881%EF%BC%89/"/>
    <url>/2023/12/25/JAVA%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%881%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><ul><li>这个类包含各种操作数组的方法(比如排序和查找)。这个类还包含一个静态工厂，允许将数组视为列表。</li></ul><h3 id="ArrayDeque"><a href="#ArrayDeque" class="headerlink" title="ArrayDeque"></a>ArrayDeque</h3><ul><li>实际为循环队列 hail变化，tail一直指向null</li><li>最大容量为：Integer.MAX_VALUE - 8</li><li>初始容量：16个元素的长度</li><li>自动扩容策略：当前容量小于64时，则增长到原来的2倍，大于64则增长到原来的1.5倍，如果增长的需要大于原来的1.5倍，则扩容至所需要的容量</li></ul><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><ul><li><p>初始容量：new出来后为空（空参），在添加了第一个元素后，自动扩容到10</p></li><li><p>最大容量为：Integer.MAX_VALUE - 8（可自行设定，最大为Integer.MAX_VALUE）</p></li><li><p>自动扩容策略：</p><ol><li><p>开始为空，在添加了第一个元素后，自动扩容到10。</p></li><li><p>到原来的1.5倍，如果增长的需要大于原来的1.5倍，则扩容至所需要的容量。</p></li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>JAVA核心源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>源码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git使用手册</title>
    <link href="/2023/12/25/Git%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    <url>/2023/12/25/Git%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>官网下载：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads (opens new window)</a>下载完成后使用默认进行安装。</p><p>安装完成后，在开始菜单里找到 <code>Git</code> -&gt; <code>Git Bash</code>，蹦出一个类似命令行窗口的东西，就说明Git安装成功！ 还需要最后一步设置，在命令行输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;Your Name&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;email@example.com&quot;</span><br></code></pre></td></tr></table></figure><p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。</p><h2 id="创建版本库（仓库）"><a href="#创建版本库（仓库）" class="headerlink" title="创建版本库（仓库）"></a>创建版本库（仓库）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建仓库</span><br><span class="hljs-built_in">mkdir</span> &lt;仓库name&gt; <br><br><span class="hljs-comment"># 进入仓库</span><br><span class="hljs-built_in">cd</span> &lt;仓库name&gt;<br><br><span class="hljs-comment"># 此命令用于显示当前目录</span><br><span class="hljs-built_in">pwd</span><br><br><span class="hljs-comment"># 把当前目录初始化成Git仓库</span><br>git init<br></code></pre></td></tr></table></figure><blockquote><p>也不一定必须在空目录下创建Git仓库，选择一个已经有东西的目录直接<code>git init</code>也是可以的。</p></blockquote><h2 id="添加文件到仓库"><a href="#添加文件到仓库" class="headerlink" title="添加文件到仓库"></a>添加文件到仓库</h2><p>在仓库目录下放入文件，如新建一个<code>test.txt</code>文件，然后使用<code>git add test.txt</code>命令告诉Git，把文件添加到缓存区，然后使用<code>git commit -m &quot;提交描述&quot;</code>告诉Git，把文件提交到仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加指定文件或文件夹到缓存区，文件需添加后缀</span><br>git add &lt;文件或文件夹name&gt;                   <span class="hljs-comment"># 单个文件</span><br>git add &lt;文件或文件夹name&gt; &lt;文件或文件夹name&gt;  <span class="hljs-comment"># 多个文件</span><br><br><span class="hljs-comment"># 或 全部文件同时添加到缓存区</span><br>git add .<br><br><span class="hljs-comment"># 把文件从缓存区提交至仓库</span><br>git commit -m <span class="hljs-string">&quot;提交描述&quot;</span><br></code></pre></td></tr></table></figure><h4 id="提交描述规范"><a href="#提交描述规范" class="headerlink" title="提交描述规范"></a>提交描述规范</h4><p>在提交代码时输入清晰的说明有利于版本管理，建议搭配如下关键字编写提交描述</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 新建(add)</span><br><span class="hljs-comment"># 删除(rm)</span><br><span class="hljs-comment"># 更新(update)</span><br><span class="hljs-comment"># 改动(change)</span><br><span class="hljs-comment"># 实现</span><br><span class="hljs-comment"># 发布</span><br><span class="hljs-comment"># 修复</span><br>...<br></code></pre></td></tr></table></figure><h2 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h2><h4 id="提交修改"><a href="#提交修改" class="headerlink" title="提交修改"></a>提交修改</h4><p>如修改<code>test.txt</code>的内容后，运行<code>git status</code>命令看看被修改的文件，然后再使用<code>git add test.txt</code>、 <code>git commit -m &quot;修改描述&quot;</code>把修改后的文件提交到仓库，提交后可再次使用<code>git status</code>查看当前状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 显示 新增/删除/被改动等 的文件</span><br>git status<br></code></pre></td></tr></table></figure><h4 id="查看版本记录"><a href="#查看版本记录" class="headerlink" title="查看版本记录"></a>查看版本记录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看版本记录</span><br>git <span class="hljs-built_in">log</span>   <span class="hljs-comment"># 显示版本号、提交时间等信息</span><br></code></pre></td></tr></table></figure><blockquote><p>也可使用可视化工具查看Git版本历史： 在仓库目录右键 &gt; <code>Git BUI Here</code></p></blockquote><h4 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h4><p>首先，Git必须知道当前版本是哪个版本，在Git中，用<code>HEAD</code>表示当前版本，也就是最新的提交1094adb…（注意我的提交ID和你的肯定不一样），上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个^比较容易数不过来，所以写成<code>HEAD~100</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 回退到上一个版本</span><br>git reset --hard HEAD^<br></code></pre></td></tr></table></figure><p>此时查看<code>git log</code>记录发现，原来最新的版本已经没有了，想回到原来最新的版本怎么办？这就需要知道最新的版本的版本号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 跳转到指定版本</span><br>git reset --hard &lt;版本号前几位&gt;<br></code></pre></td></tr></table></figure><p>但是不知道版本号怎么办？Git提供了一个命令<code>git reflog</code>用来记录你的每一次命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reflog<br></code></pre></td></tr></table></figure><h4 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h4><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/897889638509536">https://www.liaoxuefeng.com/wiki/896043488029600/897889638509536(opens new window)</a></p><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/900002180232448">https://www.liaoxuefeng.com/wiki/896043488029600/900002180232448</a></p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h4 id="SSH验证"><a href="#SSH验证" class="headerlink" title="SSH验证"></a>SSH验证</h4><p>使本机能关联远程仓库，首次需要SSH验证</p><ul><li>第1步：创建<code>SSH Key</code>。在用户主（C:\Users\dell）目录下，看看有没有.ssh目录， 如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。 如果没有，打开Shell（Windows下打开Git Bash），创建<code>SSH Key</code>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建SSH Key</span><br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;邮件地址&quot;</span><br></code></pre></td></tr></table></figure><p>1<br>2</p><ul><li>第2步：登陆GitHub，右上角头像 &gt; settings &gt; SSH and GPG keys &gt;Add SSH Key，在key的文本框里粘贴<code>id_rsa.pub</code>文件的内容</li></ul><h4 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h4><p>SSH验证完成后，在github创建仓库，创建仓库时记得取消 <code>Initialize this repository with a README</code>的勾选，然后在本地命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 关联远程仓库，仓库名一般使用origin</span><br>git remote add &lt;仓库名&gt; &lt;远程仓库地址&gt;<br><br><span class="hljs-comment"># 示例</span><br>git remote add origin git@github.com:xugaoyi/test.git<br></code></pre></td></tr></table></figure><p>下一步，就可以把本地库的所有内容推送到远程库上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 把文件推送到远程仓库</span><br>git push -u &lt;仓库名&gt; &lt;分支名&gt;<br><br><span class="hljs-comment"># 示例</span><br>git push -u origin master<br></code></pre></td></tr></table></figure><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><blockquote><p>前提是目录已经<code>git init</code>初始化成仓库，并且<code>git status</code>状态是没有改动的，如果有改动则先<code>git add .</code>添加至缓存区，<code>git commit -m &#39;提交描述&#39;</code>提交至仓库，然后执行上面命令。</p><p>如创建仓库时勾选了 <code>Initialize this repository with a README</code> 则需先拉取<code>README.md</code>文件到本地仓库<code>git pull</code></p><p>可关联多个远程仓库，注意给不同的远程仓库取不一样的名称，提交是分别按名称提交到不一样的远程仓库。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 简化的推送命令</span><br>git push<br></code></pre></td></tr></table></figure><h4 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看远程仓库</span><br>git remote -v<br></code></pre></td></tr></table></figure><h4 id="删除远程仓库"><a href="#删除远程仓库" class="headerlink" title="删除远程仓库"></a>删除远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除远程仓库</span><br>git remote <span class="hljs-built_in">rm</span> &lt;仓库名&gt;<br></code></pre></td></tr></table></figure><h4 id="从远程库克隆项目"><a href="#从远程库克隆项目" class="headerlink" title="从远程库克隆项目"></a>从远程库克隆项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 从远程库克隆项目</span><br>git <span class="hljs-built_in">clone</span> &lt;仓库地址&gt;<br></code></pre></td></tr></table></figure><h5 id="克隆指定分支"><a href="#克隆指定分支" class="headerlink" title="克隆指定分支"></a>克隆指定分支</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 克隆指定分支</span><br>git <span class="hljs-built_in">clone</span> -b &lt;分支名&gt; &lt;仓库地址&gt;<br></code></pre></td></tr></table></figure><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建分支</span><br>git checkout -b &lt;分支名&gt;<br></code></pre></td></tr></table></figure><h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看分支</span><br>git branch<br></code></pre></td></tr></table></figure><p>查看分支时，在分支前带 * 号的表示当前的分支</p><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 切换分支</span><br>git checkout &lt;分支名&gt;<br></code></pre></td></tr></table></figure><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 合并本地的分支</span><br>git merge &lt;分支名&gt;<br><br><span class="hljs-comment"># 合并远程的分支</span><br>git merge &lt;远程仓库名&gt;/&lt;分支名&gt;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>，是将指定分支合并到当前分支，并非当前分支合并到指定分支。</p><p>一般情况下是把当前分支切换到<strong>主分支</strong>，然后把<strong>子分支</strong>合并到<strong>主分支</strong>。</p><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除分支</span><br>git branch -d &lt;分支名&gt;<br></code></pre></td></tr></table></figure><h4 id="修改分支修改分支名"><a href="#修改分支修改分支名" class="headerlink" title="修改分支修改分支名"></a>修改分支修改分支名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 修改分支名</span><br>git branch -m &lt;原分支名&gt; &lt;新分支名&gt;<br></code></pre></td></tr></table></figure><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><p>如对命令不清楚时，可使用<code>git help</code>命令显示出git命令介绍。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 帮助命令</span><br>git <span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">help</span><br>usage: git [--version] [--<span class="hljs-built_in">help</span>] [-C &lt;path&gt;] [-c &lt;name&gt;=&lt;value&gt;]<br>           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]<br>           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]<br>           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]<br>           &lt;<span class="hljs-built_in">command</span>&gt; [&lt;args&gt;]<br><br>These are common Git commands used <span class="hljs-keyword">in</span> various situations:<br><br>start a working area (see also: git <span class="hljs-built_in">help</span> tutorial)<br>   <span class="hljs-built_in">clone</span>      Clone a repository into a new directory<br>   init       Create an empty Git repository or reinitialize an existing one<br><br>work on the current change (see also: git <span class="hljs-built_in">help</span> everyday)<br>   add        Add file contents to the index<br>   <span class="hljs-built_in">mv</span>         Move or rename a file, a directory, or a symlink<br>   reset      Reset current HEAD to the specified state<br>   <span class="hljs-built_in">rm</span>         Remove files from the working tree and from the index<br><br>examine the <span class="hljs-built_in">history</span> and state (see also: git <span class="hljs-built_in">help</span> revisions)<br>   bisect     Use binary search to find the commit that introduced a bug<br>   grep       Print lines matching a pattern<br>   <span class="hljs-built_in">log</span>        Show commit logs<br>   show       Show various types of objects<br>   status     Show the working tree status<br><br>grow, mark and tweak your common <span class="hljs-built_in">history</span><br>   branch     List, create, or delete branches<br>   checkout   Switch branches or restore working tree files<br>   commit     Record changes to the repository<br>   diff       Show changes between commits, commit and working tree, etc<br>   merge      Join two or more development histories together<br>   rebase     Reapply commits on top of another base tip<br>   tag        Create, list, delete or verify a tag object signed with GPG<br><br>collaborate (see also: git <span class="hljs-built_in">help</span> workflows)<br>   fetch      Download objects and refs from another repository<br>   pull       Fetch from and integrate with another repository or a <span class="hljs-built_in">local</span> branch<br>   push       Update remote refs along with associated objects<br><br><span class="hljs-string">&#x27;git help -a&#x27;</span> and <span class="hljs-string">&#x27;git help -g&#x27;</span> list available subcommands and some<br>concept guides. See <span class="hljs-string">&#x27;git help &lt;command&gt;&#x27;</span> or <span class="hljs-string">&#x27;git help &lt;concept&gt;&#x27;</span><br>to <span class="hljs-built_in">read</span> about a specific subcommand or concept.<br></code></pre></td></tr></table></figure><p>翻译工具翻译中文</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">help</span><br>使用：git [--version] [--<span class="hljs-built_in">help</span>] [-C &lt;path&gt;] [-c &lt;name&gt;=&lt;value&gt;]<br>           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]<br>           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]<br>           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]<br>           &lt;<span class="hljs-built_in">command</span>&gt; [&lt;args&gt;]<br><br>这些是在各种情况下使用的通用Git命令：<br><br>start a working area (参见命令: git <span class="hljs-built_in">help</span> tutorial)<br>   <span class="hljs-built_in">clone</span>      将存储库克隆到新目录中<br>   init       创建一个空的Git存储库或重新初始化一个现有的存储库<br><br>work on the current change (参见命令: git <span class="hljs-built_in">help</span> everyday)<br>   add        将文件内容添加到索引中<br>   <span class="hljs-built_in">mv</span>         移动或重命名文件、目录或符号链接<br>   reset      将当前磁头重置为指定状态<br>   <span class="hljs-built_in">rm</span>         从工作树和索引中删除文件<br><br>examine the <span class="hljs-built_in">history</span> and state (参见命令: git <span class="hljs-built_in">help</span> revisions)<br>   bisect     使用二分查找查找引入错误的提交<br>   grep       打印与模式匹配的行<br>   <span class="hljs-built_in">log</span>        显示提交日志<br>   show       显示各种类型的对象<br>   status     显示工作树状态<br><br>grow, mark and tweak your common <span class="hljs-built_in">history</span><br>   branch     列出、创建或删除分支<br>   checkout   切换分支或还原工作树文件<br>   commit     记录对存储库的更改<br>   diff       显示提交、提交和工作树等之间的更改<br>   merge      将两个或多个开发历史连接在一起<br>   rebase     在另一个基本提示之上重新应用提交<br>   tag        创建、列表、删除或验证用GPG签名的标记对象<br><br>collaborate (参见命令: git <span class="hljs-built_in">help</span> workflows)<br>   fetch      从另一个存储库下载对象和引用<br>   pull       从另一个存储库或本地分支获取并与之集成<br>   push       更新远程引用和相关对象<br><br><span class="hljs-string">&#x27;git help -a&#x27;</span> 和 <span class="hljs-string">&#x27;git help -g&#x27;</span> 列出可用的子命令和一些概念指导。<br>命令<span class="hljs-string">&#x27;git help &lt;command&gt;&#x27;</span> 或 <span class="hljs-string">&#x27;git help &lt;concept&gt;&#x27;</span> 查看特定子命令或概念.<br></code></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600">https://www.liaoxuefeng.com/wiki/896043488029600</a></p>]]></content>
    
    
    <categories>
      
      <category>实用指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo文章编辑指南</title>
    <link href="/2023/12/25/hexo%E6%96%87%E7%AB%A0%E7%BC%96%E8%BE%91/"/>
    <url>/2023/12/25/hexo%E6%96%87%E7%AB%A0%E7%BC%96%E8%BE%91/</url>
    
    <content type="html"><![CDATA[<p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Hello</span> <span class="hljs-string">World</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2013</span><span class="hljs-string">/7/13</span> <span class="hljs-number">20</span><span class="hljs-string">:46:25</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>layout</code></td><td align="left">布局</td><td align="left"><a href="https://hexo.io/zh-cn/docs/configuration#%E6%96%87%E7%AB%A0"><code>config.default_layout</code></a></td></tr><tr><td align="left"><code>title</code></td><td align="left">标题</td><td align="left">文章的文件名</td></tr><tr><td align="left"><code>date</code></td><td align="left">建立日期</td><td align="left">文件建立日期</td></tr><tr><td align="left"><code>updated</code></td><td align="left">更新日期</td><td align="left">文件更新日期</td></tr><tr><td align="left"><code>comments</code></td><td align="left">开启文章的评论功能</td><td align="left"><code>true</code></td></tr><tr><td align="left"><code>tags</code></td><td align="left">标签（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>categories</code></td><td align="left">分类（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>permalink</code></td><td align="left">覆盖文章的永久链接，永久链接应该以 <code>/</code> 或 <code>.html</code> 结尾</td><td align="left"><code>null</code></td></tr><tr><td align="left"><code>excerpt</code></td><td align="left">纯文本的页面摘要。使用 <a href="https://hexo.io/zh-cn/docs/tag-plugins#%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%92%8C%E6%88%AA%E6%96%AD">该插件</a> 来格式化文本</td><td align="left"></td></tr><tr><td align="left"><code>disableNunjucks</code></td><td align="left">启用时禁用 Nunjucks 标签 <code>&#123;&#123; &#125;&#125;</code>&#x2F;<code>&#123;% %&#125;</code> 和 <a href="https://hexo.io/zh-cn/docs/tag-plugins">标签插件</a> 的渲染功能</td><td align="left">false</td></tr><tr><td align="left"><code>lang</code></td><td align="left">设置语言以覆盖 <a href="https://hexo.io/zh-cn/docs/internationalization#%E8%B7%AF%E5%BE%84">自动检测</a></td><td align="left">继承自 <code>_config.yml</code></td></tr><tr><td align="left"><code>published</code></td><td align="left">文章是否发布</td><td align="left">对于 <code>_posts</code> 下的文章为 <code>true</code>，对于 <code>_draft</code> 下的文章为 <code>false</code></td></tr></tbody></table><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>根据 <code>_config.yml</code> 中 <a href="https://hexo.io/zh-cn/docs/configuration#%E6%96%87%E7%AB%A0"><code>default_layout</code></a> 的设置，默认布局是 <code>post</code> 。当文章中的布局被禁用(<code>layout: false</code>)，它将不会使用主题处理。然而，它仍然会被任何可用的渲染引擎渲染：如果一篇文章是用 Markdown 写的，并且安装了 Markdown 渲染引擎（比如默认的 <a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a>)，它将被渲染成HTML。</p><p>除非通过 <code>disableNunjucks</code> 设置或 <a href="https://hexo.io/zh-cn/api/renderer#%E7%A6%81%E7%94%A8-Nunjucks-%E6%A0%87%E7%AD%BE">渲染引擎</a> 禁用，否则无论布局如何，<a href="https://hexo.io/zh-cn/docs/tag-plugins">标签插件</a> 总是被处理。</p><h2 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h2><p>只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs subunit">categories:<br>- Diary<br><span class="hljs-keyword">tags:</span><br>- PS3<br>- Games<br></code></pre></td></tr></table></figure><blockquote><p>分类方法的分歧</p><p>如果您有过使用 WordPress 的经验，就很容易误解 Hexo 的分类方式。WordPress 支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是 Hexo 不支持指定多个同级分类。下面的指定方法：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">categories</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Diary</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Life</span><br></code></pre></td></tr></table></figure><p>会使分类 <code>Life</code> 成为 <code>Diary</code> 的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p><p>如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">categories</span>:<br><span class="hljs-literal">-</span> [Diary, PlayStation]<br><span class="hljs-literal">-</span> [Diary, Games]<br><span class="hljs-literal">-</span> [Life]<br></code></pre></td></tr></table></figure><p>此时这篇文章同时包括三个分类： <code>PlayStation</code> 和 <code>Games</code> 分别都是父分类 <code>Diary</code> 的子分类，同时 <code>Life</code> 是一个没有子分类的分类。</p></blockquote><h2 id="JSON-Front-matter"><a href="#JSON-Front-matter" class="headerlink" title="JSON Front-matter"></a>JSON Front-matter</h2><p>除了 YAML 外，你也可以使用 JSON 来编写 Front-matter，只要将 <code>---</code> 代换成 <code>;;;</code> 即可。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;Hello World&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;2013/7/13 20:46:25&quot;</span><br><span class="hljs-comment">;;;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>实用指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实用指南</tag>
      
      <tag>文章编辑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/12/25/hello-world/"/>
    <url>/2023/12/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
